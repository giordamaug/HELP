2024-07-02 08:33:33,138:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-02 08:33:33,138:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-02 08:33:33,138:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-02 08:33:33,138:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-02 08:34:13,582:INFO:PyCaret ClassificationExperiment
2024-07-02 08:34:13,582:INFO:Logging name: clf-default-name
2024-07-02 08:34:13,582:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-07-02 08:34:13,582:INFO:version 3.3.2
2024-07-02 08:34:13,582:INFO:Initializing setup()
2024-07-02 08:34:13,582:INFO:self.USI: 5730
2024-07-02 08:34:13,582:INFO:self._variable_keys: {'y', 'X_test', 'pipeline', 'fix_imbalance', 'memory', 'target_param', 'html_param', 'fold_generator', 'n_jobs_param', 'USI', 'exp_id', 'y_train', 'data', 'logging_param', 'X_train', 'exp_name_log', 'X', 'seed', '_available_plots', 'log_plots_param', 'fold_groups_param', '_ml_usecase', 'gpu_n_jobs_param', 'fold_shuffle_param', 'gpu_param', 'is_multiclass', 'idx', 'y_test'}
2024-07-02 08:34:13,582:INFO:Checking environment
2024-07-02 08:34:13,582:INFO:python_version: 3.10.13
2024-07-02 08:34:13,582:INFO:python_build: ('main', 'Dec 23 2023 15:35:25')
2024-07-02 08:34:13,582:INFO:machine: arm64
2024-07-02 08:34:13,582:INFO:platform: macOS-14.4.1-arm64-arm-64bit
2024-07-02 08:34:13,582:INFO:Memory: svmem(total=17179869184, available=7416283136, percent=56.8, used=8083914752, free=975978496, active=6462783488, inactive=6397198336, wired=1621131264)
2024-07-02 08:34:13,582:INFO:Physical Core: 8
2024-07-02 08:34:13,583:INFO:Logical Core: 8
2024-07-02 08:34:13,583:INFO:Checking libraries
2024-07-02 08:34:13,583:INFO:System:
2024-07-02 08:34:13,583:INFO:    python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:35:25) [Clang 16.0.6 ]
2024-07-02 08:34:13,583:INFO:executable: /Users/maurizio/miniconda3/bin/python
2024-07-02 08:34:13,583:INFO:   machine: macOS-14.4.1-arm64-arm-64bit
2024-07-02 08:34:13,583:INFO:PyCaret required dependencies:
2024-07-02 08:34:13,585:INFO:                 pip: 23.3.2
2024-07-02 08:34:13,585:INFO:          setuptools: 69.0.3
2024-07-02 08:34:13,585:INFO:             pycaret: 3.3.2
2024-07-02 08:34:13,585:INFO:             IPython: 8.20.0
2024-07-02 08:34:13,585:INFO:          ipywidgets: 8.1.1
2024-07-02 08:34:13,585:INFO:                tqdm: 4.66.1
2024-07-02 08:34:13,585:INFO:               numpy: 1.26.4
2024-07-02 08:34:13,585:INFO:              pandas: 2.1.3
2024-07-02 08:34:13,585:INFO:              jinja2: 3.1.3
2024-07-02 08:34:13,585:INFO:               scipy: 1.10.1
2024-07-02 08:34:13,585:INFO:              joblib: 1.3.2
2024-07-02 08:34:13,585:INFO:             sklearn: 1.4.2
2024-07-02 08:34:13,585:INFO:                pyod: 1.1.3
2024-07-02 08:34:13,585:INFO:            imblearn: 0.12.2
2024-07-02 08:34:13,585:INFO:   category_encoders: 2.6.3
2024-07-02 08:34:13,585:INFO:            lightgbm: 3.3.5
2024-07-02 08:34:13,585:INFO:               numba: 0.59.1
2024-07-02 08:34:13,585:INFO:            requests: 2.31.0
2024-07-02 08:34:13,585:INFO:          matplotlib: 3.6.0
2024-07-02 08:34:13,585:INFO:          scikitplot: 0.3.7
2024-07-02 08:34:13,585:INFO:         yellowbrick: 1.5
2024-07-02 08:34:13,585:INFO:              plotly: 5.18.0
2024-07-02 08:34:13,585:INFO:    plotly-resampler: Not installed
2024-07-02 08:34:13,585:INFO:             kaleido: 0.2.1
2024-07-02 08:34:13,585:INFO:           schemdraw: 0.15
2024-07-02 08:34:13,586:INFO:         statsmodels: 0.14.1
2024-07-02 08:34:13,586:INFO:              sktime: 0.26.0
2024-07-02 08:34:13,586:INFO:               tbats: 1.1.3
2024-07-02 08:34:13,586:INFO:            pmdarima: 2.0.4
2024-07-02 08:34:13,586:INFO:              psutil: 5.9.4
2024-07-02 08:34:13,586:INFO:          markupsafe: 2.1.3
2024-07-02 08:34:13,586:INFO:             pickle5: Not installed
2024-07-02 08:34:13,586:INFO:         cloudpickle: 2.2.1
2024-07-02 08:34:13,586:INFO:         deprecation: 2.1.0
2024-07-02 08:34:13,586:INFO:              xxhash: 3.4.1
2024-07-02 08:34:13,586:INFO:           wurlitzer: 3.1.0
2024-07-02 08:34:13,586:INFO:PyCaret optional dependencies:
2024-07-02 08:34:13,600:INFO:                shap: Not installed
2024-07-02 08:34:13,600:INFO:           interpret: Not installed
2024-07-02 08:34:13,600:INFO:                umap: Not installed
2024-07-02 08:34:13,600:INFO:     ydata_profiling: Not installed
2024-07-02 08:34:13,600:INFO:  explainerdashboard: Not installed
2024-07-02 08:34:13,600:INFO:             autoviz: Not installed
2024-07-02 08:34:13,600:INFO:           fairlearn: Not installed
2024-07-02 08:34:13,600:INFO:          deepchecks: Not installed
2024-07-02 08:34:13,600:INFO:             xgboost: 1.7.1
2024-07-02 08:34:13,600:INFO:            catboost: Not installed
2024-07-02 08:34:13,600:INFO:              kmodes: Not installed
2024-07-02 08:34:13,600:INFO:             mlxtend: Not installed
2024-07-02 08:34:13,600:INFO:       statsforecast: Not installed
2024-07-02 08:34:13,601:INFO:        tune_sklearn: Not installed
2024-07-02 08:34:13,601:INFO:                 ray: Not installed
2024-07-02 08:34:13,601:INFO:            hyperopt: Not installed
2024-07-02 08:34:13,601:INFO:              optuna: 3.6.1
2024-07-02 08:34:13,601:INFO:               skopt: Not installed
2024-07-02 08:34:13,601:INFO:              mlflow: Not installed
2024-07-02 08:34:13,601:INFO:              gradio: Not installed
2024-07-02 08:34:13,601:INFO:             fastapi: Not installed
2024-07-02 08:34:13,601:INFO:             uvicorn: Not installed
2024-07-02 08:34:13,601:INFO:              m2cgen: Not installed
2024-07-02 08:34:13,601:INFO:           evidently: Not installed
2024-07-02 08:34:13,601:INFO:               fugue: Not installed
2024-07-02 08:34:13,601:INFO:           streamlit: Not installed
2024-07-02 08:34:13,601:INFO:             prophet: Not installed
2024-07-02 08:34:13,601:INFO:None
2024-07-02 08:34:13,601:INFO:Set up data.
2024-07-02 08:34:14,267:INFO:Set up folding strategy.
2024-07-02 08:34:14,267:INFO:Set up train/test split.
2024-07-02 08:34:15,017:INFO:Set up index.
2024-07-02 08:34:15,037:INFO:Assigning column types.
2024-07-02 08:34:15,877:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-07-02 08:34:15,895:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-07-02 08:34:15,897:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-02 08:34:15,910:INFO:Soft dependency imported: xgboost: 1.7.1
2024-07-02 08:34:16,205:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-02 08:34:16,222:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-07-02 08:34:16,222:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-02 08:34:16,233:INFO:Soft dependency imported: xgboost: 1.7.1
2024-07-02 08:34:16,234:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-02 08:34:16,234:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-07-02 08:34:16,251:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-02 08:34:16,262:INFO:Soft dependency imported: xgboost: 1.7.1
2024-07-02 08:34:16,263:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-02 08:34:16,281:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-02 08:34:16,291:INFO:Soft dependency imported: xgboost: 1.7.1
2024-07-02 08:34:16,292:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-02 08:34:16,293:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-07-02 08:34:16,346:INFO:Soft dependency imported: xgboost: 1.7.1
2024-07-02 08:34:16,347:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-02 08:34:16,376:INFO:Soft dependency imported: xgboost: 1.7.1
2024-07-02 08:34:16,377:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-02 08:34:16,378:INFO:Preparing preprocessing pipeline...
2024-07-02 08:34:16,523:INFO:Set up simple imputation.
2024-07-02 08:34:16,620:INFO:Set up column name cleaning.
2024-07-02 08:34:19,083:INFO:Finished creating preprocessing pipeline.
2024-07-02 08:34:19,097:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-07-02 08:34:19,097:INFO:Creating final display dataframe.
2024-07-02 08:34:24,822:INFO:Setup _display_container:                     Description             Value
0                    Session id               444
1                        Target             label
2                   Target type            Binary
3           Original data shape     (17236, 3457)
4        Transformed data shape     (17236, 3457)
5   Transformed train set shape     (12065, 3457)
6    Transformed test set shape      (5171, 3457)
7              Numeric features              3456
8      Rows with missing values             78.1%
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                 5
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              5730
2024-07-02 08:34:24,869:INFO:Soft dependency imported: xgboost: 1.7.1
2024-07-02 08:34:24,872:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-02 08:34:24,902:INFO:Soft dependency imported: xgboost: 1.7.1
2024-07-02 08:34:24,903:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-02 08:34:24,904:INFO:setup() successfully completed in 11.33s...............
2024-07-02 08:39:22,124:INFO:Initializing create_model()
2024-07-02 08:39:22,124:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveLGBM(n_jobs=-1, n_voters=-1, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 08:39:22,124:INFO:Checking exceptions
2024-07-02 08:39:22,177:INFO:Importing libraries
2024-07-02 08:39:22,178:INFO:Copying training dataset
2024-07-02 08:39:23,278:INFO:Defining folds
2024-07-02 08:39:23,278:INFO:Declaring metric variables
2024-07-02 08:39:23,281:INFO:Importing untrained model
2024-07-02 08:39:23,281:INFO:Declaring custom model
2024-07-02 08:39:23,283:INFO:sveLGBM Imported successfully
2024-07-02 08:39:23,285:INFO:Starting cross validation
2024-07-02 08:39:23,293:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 08:40:16,263:INFO:Calculating mean and std
2024-07-02 08:40:16,265:INFO:Creating metrics dataframe
2024-07-02 08:40:16,272:INFO:Finalizing model
2024-07-02 08:40:28,426:INFO:Uploading results into container
2024-07-02 08:40:28,428:INFO:Uploading model into container now
2024-07-02 08:40:28,433:INFO:_master_model_container: 1
2024-07-02 08:40:28,433:INFO:_display_container: 2
2024-07-02 08:40:28,433:INFO:sveLGBM(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft')
2024-07-02 08:40:28,433:INFO:create_model() successfully completed......................................
2024-07-02 08:40:28,501:INFO:Initializing tune_model()
2024-07-02 08:40:28,501:INFO:tune_model(estimator=sveLGBM(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, n_iter=10, custom_grid=None, optimize=BA, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=True, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>)
2024-07-02 08:40:28,501:INFO:Checking exceptions
2024-07-02 08:41:38,570:INFO:Initializing create_model()
2024-07-02 08:41:38,571:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveLGBM(n_jobs=-1, n_voters=-1, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 08:41:38,571:INFO:Checking exceptions
2024-07-02 08:41:38,581:INFO:Importing libraries
2024-07-02 08:41:38,582:INFO:Copying training dataset
2024-07-02 08:41:39,793:INFO:Defining folds
2024-07-02 08:41:39,793:INFO:Declaring metric variables
2024-07-02 08:41:39,795:INFO:Importing untrained model
2024-07-02 08:41:39,795:INFO:Declaring custom model
2024-07-02 08:41:39,797:INFO:sveLGBM Imported successfully
2024-07-02 08:41:39,800:INFO:Starting cross validation
2024-07-02 08:41:39,806:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 08:42:28,550:INFO:Calculating mean and std
2024-07-02 08:42:28,553:INFO:Creating metrics dataframe
2024-07-02 08:42:28,562:INFO:Finalizing model
2024-07-02 08:42:42,287:INFO:Uploading results into container
2024-07-02 08:42:42,289:INFO:Uploading model into container now
2024-07-02 08:42:42,294:INFO:_master_model_container: 2
2024-07-02 08:42:42,294:INFO:_display_container: 3
2024-07-02 08:42:42,295:INFO:sveLGBM(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft')
2024-07-02 08:42:42,295:INFO:create_model() successfully completed......................................
2024-07-02 08:42:42,383:INFO:Initializing tune_model()
2024-07-02 08:42:42,383:INFO:tune_model(estimator=sveLGBM(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, n_iter=10, custom_grid=None, optimize=BA, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=True, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>)
2024-07-02 08:42:42,383:INFO:Checking exceptions
2024-07-02 08:42:43,044:INFO:Copying training dataset
2024-07-02 08:42:43,775:INFO:Checking base model
2024-07-02 08:48:10,399:INFO:Initializing create_model()
2024-07-02 08:48:10,400:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveLGBM(n_jobs=-1, n_voters=-1, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 08:48:10,400:INFO:Checking exceptions
2024-07-02 08:48:10,411:INFO:Importing libraries
2024-07-02 08:48:10,411:INFO:Copying training dataset
2024-07-02 08:48:11,529:INFO:Defining folds
2024-07-02 08:48:11,529:INFO:Declaring metric variables
2024-07-02 08:48:11,531:INFO:Importing untrained model
2024-07-02 08:48:11,531:INFO:Declaring custom model
2024-07-02 08:48:11,533:INFO:sveLGBM Imported successfully
2024-07-02 08:48:11,535:INFO:Starting cross validation
2024-07-02 08:48:11,542:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 08:49:05,986:INFO:Calculating mean and std
2024-07-02 08:49:05,989:INFO:Creating metrics dataframe
2024-07-02 08:49:05,996:INFO:Finalizing model
2024-07-02 08:49:18,171:INFO:Uploading results into container
2024-07-02 08:49:18,173:INFO:Uploading model into container now
2024-07-02 08:49:18,178:INFO:_master_model_container: 3
2024-07-02 08:49:18,178:INFO:_display_container: 4
2024-07-02 08:49:18,179:INFO:sveLGBM(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft')
2024-07-02 08:49:18,179:INFO:create_model() successfully completed......................................
2024-07-02 08:49:18,271:INFO:Initializing tune_model()
2024-07-02 08:49:18,271:INFO:tune_model(estimator=sveLGBM(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, n_iter=10, custom_grid={'n_voters': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, optimize=BA, custom_scorer=None, search_library=scikit-learn, search_algorithm=grid, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=True, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>)
2024-07-02 08:49:18,271:INFO:Checking exceptions
2024-07-02 08:49:18,681:INFO:Copying training dataset
2024-07-02 08:49:19,359:INFO:Checking base model
2024-07-02 08:49:19,359:INFO:A custom model has been passed
2024-07-02 08:49:19,359:INFO:Base model : sveLGBM
2024-07-02 08:49:19,361:INFO:Declaring metric variables
2024-07-02 08:49:19,362:INFO:Defining Hyperparameters
2024-07-02 08:49:19,429:INFO:custom_grid: {'actual_estimator__n_voters': [4, 6, 8, 10, 12, 14, 16, 18, 20]}
2024-07-02 08:49:19,430:INFO:Tuning with n_jobs=-1
2024-07-02 08:49:19,430:INFO:Initializing GridSearchCV
2024-07-02 08:50:33,385:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/joblib/externals/loky/process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(

2024-07-02 08:58:19,572:INFO:best_params: {'actual_estimator__n_voters': 16}
2024-07-02 08:58:19,575:INFO:Hyperparameter search completed
2024-07-02 08:58:19,576:INFO:SubProcess create_model() called ==================================
2024-07-02 08:58:19,576:INFO:Initializing create_model()
2024-07-02 08:58:19,577:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveLGBM(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft'), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32dd32470>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_voters': 16})
2024-07-02 08:58:19,577:INFO:Checking exceptions
2024-07-02 08:58:19,577:INFO:Importing libraries
2024-07-02 08:58:19,578:INFO:Copying training dataset
2024-07-02 08:58:20,771:INFO:Defining folds
2024-07-02 08:58:20,771:INFO:Declaring metric variables
2024-07-02 08:58:20,773:INFO:Importing untrained model
2024-07-02 08:58:20,773:INFO:Declaring custom model
2024-07-02 08:58:20,775:INFO:sveLGBM Imported successfully
2024-07-02 08:58:20,777:INFO:Starting cross validation
2024-07-02 08:58:20,783:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 08:59:17,832:INFO:Calculating mean and std
2024-07-02 08:59:17,835:INFO:Creating metrics dataframe
2024-07-02 08:59:17,844:INFO:Finalizing model
2024-07-02 08:59:32,164:INFO:Uploading results into container
2024-07-02 08:59:32,165:INFO:Uploading model into container now
2024-07-02 08:59:32,166:INFO:_master_model_container: 4
2024-07-02 08:59:32,167:INFO:_display_container: 5
2024-07-02 08:59:32,167:INFO:sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False, voting='soft')
2024-07-02 08:59:32,167:INFO:create_model() successfully completed......................................
2024-07-02 08:59:32,276:INFO:SubProcess create_model() end ==================================
2024-07-02 08:59:32,276:INFO:choose_better activated
2024-07-02 08:59:32,278:INFO:SubProcess create_model() called ==================================
2024-07-02 08:59:32,278:INFO:Initializing create_model()
2024-07-02 08:59:32,278:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False, voting='soft'), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 08:59:32,278:INFO:Checking exceptions
2024-07-02 08:59:32,279:INFO:Importing libraries
2024-07-02 08:59:32,280:INFO:Copying training dataset
2024-07-02 08:59:33,364:INFO:Defining folds
2024-07-02 08:59:33,364:INFO:Declaring metric variables
2024-07-02 08:59:33,364:INFO:Importing untrained model
2024-07-02 08:59:33,364:INFO:Declaring custom model
2024-07-02 08:59:33,364:INFO:sveLGBM Imported successfully
2024-07-02 08:59:33,364:INFO:Starting cross validation
2024-07-02 08:59:33,370:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 09:00:29,827:INFO:Calculating mean and std
2024-07-02 09:00:29,828:INFO:Creating metrics dataframe
2024-07-02 09:00:29,831:INFO:Finalizing model
2024-07-02 09:00:43,987:INFO:Uploading results into container
2024-07-02 09:00:43,988:INFO:Uploading model into container now
2024-07-02 09:00:43,989:INFO:_master_model_container: 5
2024-07-02 09:00:43,989:INFO:_display_container: 6
2024-07-02 09:00:43,989:INFO:sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False, voting='soft')
2024-07-02 09:00:43,989:INFO:create_model() successfully completed......................................
2024-07-02 09:00:44,083:INFO:SubProcess create_model() end ==================================
2024-07-02 09:00:44,083:INFO:sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False, voting='soft') result for BA is 0.8799
2024-07-02 09:00:44,083:INFO:sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False, voting='soft') result for BA is 0.8799
2024-07-02 09:00:44,083:INFO:sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False, voting='soft') is best model
2024-07-02 09:00:44,083:INFO:choose_better completed
2024-07-02 09:00:44,088:INFO:_master_model_container: 5
2024-07-02 09:00:44,088:INFO:_display_container: 5
2024-07-02 09:00:44,088:INFO:sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False, voting='soft')
2024-07-02 09:00:44,088:INFO:tune_model() successfully completed......................................
2024-07-02 09:00:44,184:INFO:Initializing save_model()
2024-07-02 09:00:44,185:INFO:save_model(model=sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False, voting='soft'), model_name=../pycaret/saved_sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False, voting='soft')_model, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-07-02 09:00:44,185:INFO:Adding model into prep_pipe
2024-07-02 09:00:44,263:INFO:../pycaret/saved_sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False, voting='soft')_model.pkl saved in current working directory
2024-07-02 09:00:44,278:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tissue',
                                             'Orthologs count',
                                             'Driver_genes_MUT (all)',
                                             'Driver_g...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False)
2024-07-02 09:00:44,278:INFO:save_model() successfully completed......................................
2024-07-02 09:00:44,340:INFO:Initializing create_model()
2024-07-02 09:00:44,340:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveXGB(n_jobs=-1, n_voters=-1, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 09:00:44,340:INFO:Checking exceptions
2024-07-02 09:00:44,346:INFO:Importing libraries
2024-07-02 09:00:44,346:INFO:Copying training dataset
2024-07-02 09:00:45,464:INFO:Defining folds
2024-07-02 09:00:45,464:INFO:Declaring metric variables
2024-07-02 09:00:45,466:INFO:Importing untrained model
2024-07-02 09:00:45,467:INFO:Declaring custom model
2024-07-02 09:00:45,468:INFO:sveXGB Imported successfully
2024-07-02 09:00:45,472:INFO:Starting cross validation
2024-07-02 09:00:45,478:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 09:03:12,913:INFO:Calculating mean and std
2024-07-02 09:03:12,915:INFO:Creating metrics dataframe
2024-07-02 09:03:12,923:INFO:Finalizing model
2024-07-02 09:03:56,898:INFO:Uploading results into container
2024-07-02 09:03:56,900:INFO:Uploading model into container now
2024-07-02 09:03:56,904:INFO:_master_model_container: 6
2024-07-02 09:03:56,904:INFO:_display_container: 6
2024-07-02 09:03:56,904:INFO:sveXGB(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft')
2024-07-02 09:03:56,905:INFO:create_model() successfully completed......................................
2024-07-02 09:03:57,004:INFO:Initializing tune_model()
2024-07-02 09:03:57,004:INFO:tune_model(estimator=sveXGB(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, n_iter=10, custom_grid={'n_voters': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, optimize=BA, custom_scorer=None, search_library=scikit-learn, search_algorithm=grid, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=True, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>)
2024-07-02 09:03:57,004:INFO:Checking exceptions
2024-07-02 09:03:57,448:INFO:Copying training dataset
2024-07-02 09:03:58,193:INFO:Checking base model
2024-07-02 09:03:58,193:INFO:A custom model has been passed
2024-07-02 09:03:58,193:INFO:Base model : sveXGB
2024-07-02 09:03:58,194:INFO:Declaring metric variables
2024-07-02 09:03:58,196:INFO:Defining Hyperparameters
2024-07-02 09:03:58,270:INFO:custom_grid: {'actual_estimator__n_voters': [4, 6, 8, 10, 12, 14, 16, 18, 20]}
2024-07-02 09:03:58,270:INFO:Tuning with n_jobs=-1
2024-07-02 09:03:58,270:INFO:Initializing GridSearchCV
2024-07-02 09:13:38,381:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/joblib/externals/loky/process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(

2024-07-02 09:30:32,446:INFO:best_params: {'actual_estimator__n_voters': 10}
2024-07-02 09:30:32,448:INFO:Hyperparameter search completed
2024-07-02 09:30:32,448:INFO:SubProcess create_model() called ==================================
2024-07-02 09:30:32,450:INFO:Initializing create_model()
2024-07-02 09:30:32,450:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveXGB(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft'), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x30ce66fb0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_voters': 10})
2024-07-02 09:30:32,450:INFO:Checking exceptions
2024-07-02 09:30:32,450:INFO:Importing libraries
2024-07-02 09:30:32,450:INFO:Copying training dataset
2024-07-02 09:30:33,718:INFO:Defining folds
2024-07-02 09:30:33,718:INFO:Declaring metric variables
2024-07-02 09:30:33,720:INFO:Importing untrained model
2024-07-02 09:30:33,721:INFO:Declaring custom model
2024-07-02 09:30:33,722:INFO:sveXGB Imported successfully
2024-07-02 09:30:33,725:INFO:Starting cross validation
2024-07-02 09:30:33,732:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 09:33:07,303:INFO:Calculating mean and std
2024-07-02 09:33:07,306:INFO:Creating metrics dataframe
2024-07-02 09:33:07,315:INFO:Finalizing model
2024-07-02 09:33:57,776:INFO:Uploading results into container
2024-07-02 09:33:57,778:INFO:Uploading model into container now
2024-07-02 09:33:57,778:INFO:_master_model_container: 7
2024-07-02 09:33:57,778:INFO:_display_container: 7
2024-07-02 09:33:57,779:INFO:sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft')
2024-07-02 09:33:57,779:INFO:create_model() successfully completed......................................
2024-07-02 09:33:57,893:INFO:SubProcess create_model() end ==================================
2024-07-02 09:33:57,893:INFO:choose_better activated
2024-07-02 09:33:57,895:INFO:SubProcess create_model() called ==================================
2024-07-02 09:33:57,895:INFO:Initializing create_model()
2024-07-02 09:33:57,895:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft'), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 09:33:57,895:INFO:Checking exceptions
2024-07-02 09:33:57,897:INFO:Importing libraries
2024-07-02 09:33:57,897:INFO:Copying training dataset
2024-07-02 09:33:59,016:INFO:Defining folds
2024-07-02 09:33:59,016:INFO:Declaring metric variables
2024-07-02 09:33:59,016:INFO:Importing untrained model
2024-07-02 09:33:59,016:INFO:Declaring custom model
2024-07-02 09:33:59,017:INFO:sveXGB Imported successfully
2024-07-02 09:33:59,017:INFO:Starting cross validation
2024-07-02 09:33:59,023:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 09:36:31,331:INFO:Calculating mean and std
2024-07-02 09:36:31,332:INFO:Creating metrics dataframe
2024-07-02 09:36:31,335:INFO:Finalizing model
2024-07-02 09:37:22,669:INFO:Uploading results into container
2024-07-02 09:37:22,670:INFO:Uploading model into container now
2024-07-02 09:37:22,670:INFO:_master_model_container: 8
2024-07-02 09:37:22,671:INFO:_display_container: 8
2024-07-02 09:37:22,671:INFO:sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft')
2024-07-02 09:37:22,671:INFO:create_model() successfully completed......................................
2024-07-02 09:37:22,759:INFO:SubProcess create_model() end ==================================
2024-07-02 09:37:22,760:INFO:sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft') result for BA is 0.8826
2024-07-02 09:37:22,760:INFO:sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft') result for BA is 0.8826
2024-07-02 09:37:22,760:INFO:sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft') is best model
2024-07-02 09:37:22,760:INFO:choose_better completed
2024-07-02 09:37:22,764:INFO:_master_model_container: 8
2024-07-02 09:37:22,765:INFO:_display_container: 7
2024-07-02 09:37:22,765:INFO:sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft')
2024-07-02 09:37:22,765:INFO:tune_model() successfully completed......................................
2024-07-02 09:37:22,871:INFO:Initializing save_model()
2024-07-02 09:37:22,871:INFO:save_model(model=sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft'), model_name=../pycaret/saved_sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft')_model, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-07-02 09:37:22,871:INFO:Adding model into prep_pipe
2024-07-02 09:37:22,912:INFO:../pycaret/saved_sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft')_model.pkl saved in current working directory
2024-07-02 09:37:22,927:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tissue',
                                             'Orthologs count',
                                             'Driver_genes_MUT (all)',
                                             'Driver_g...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False)
2024-07-02 09:37:22,927:INFO:save_model() successfully completed......................................
2024-07-02 09:37:22,990:INFO:Initializing create_model()
2024-07-02 09:37:22,990:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveADA(n_jobs=-1, n_voters=-1, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 09:37:22,990:INFO:Checking exceptions
2024-07-02 09:37:22,997:INFO:Importing libraries
2024-07-02 09:37:22,997:INFO:Copying training dataset
2024-07-02 09:37:24,155:INFO:Defining folds
2024-07-02 09:37:24,155:INFO:Declaring metric variables
2024-07-02 09:37:24,158:INFO:Importing untrained model
2024-07-02 09:37:24,158:INFO:Declaring custom model
2024-07-02 09:37:24,160:INFO:sveADA Imported successfully
2024-07-02 09:37:24,162:INFO:Starting cross validation
2024-07-02 09:37:24,169:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 09:37:25,743:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:25,750:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:25,768:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:25,771:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:25,775:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:25,795:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:25,796:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:25,809:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:28,135:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:28,150:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:28,155:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:28,158:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:28,169:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:28,177:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:28,192:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:28,197:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:28,790:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:28,821:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:28,824:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:28,824:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:28,831:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:28,862:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:28,864:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:28,896:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:29,605:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:29,624:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:29,639:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:29,653:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:29,670:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:29,707:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:29,712:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:29,757:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:33,143:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:33,152:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:33,157:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:33,168:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:33,082:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:33,175:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:33,209:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:33,243:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:52,314:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:52,395:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:52,742:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:52,930:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:53,008:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:58,819:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:59,095:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:59,111:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:59,147:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:59,259:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:37:59,907:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:00,068:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:00,203:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:00,254:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:00,311:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:00,319:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:00,448:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:00,812:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:01,069:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:01,130:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:04,098:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:04,127:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:04,138:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:04,241:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:04,279:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:25,266:INFO:Calculating mean and std
2024-07-02 09:38:25,267:INFO:Creating metrics dataframe
2024-07-02 09:38:25,270:INFO:Finalizing model
2024-07-02 09:38:26,025:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:26,029:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:26,031:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:26,050:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:26,068:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:28,436:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
2024-07-02 09:38:28,437:WARNING:  warnings.warn(
2024-07-02 09:38:28,437:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
2024-07-02 09:38:28,437:WARNING:  warnings.warn(
2024-07-02 09:38:34,126:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:34,133:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:34,193:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:34,334:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:40,789:INFO:Uploading results into container
2024-07-02 09:38:40,790:INFO:Uploading model into container now
2024-07-02 09:38:40,794:INFO:_master_model_container: 9
2024-07-02 09:38:40,795:INFO:_display_container: 8
2024-07-02 09:38:40,795:INFO:sveADA(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft')
2024-07-02 09:38:40,795:INFO:create_model() successfully completed......................................
2024-07-02 09:38:40,890:INFO:Initializing tune_model()
2024-07-02 09:38:40,890:INFO:tune_model(estimator=sveADA(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, n_iter=10, custom_grid={'n_voters': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, optimize=BA, custom_scorer=None, search_library=scikit-learn, search_algorithm=grid, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=True, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>)
2024-07-02 09:38:40,891:INFO:Checking exceptions
2024-07-02 09:38:41,288:INFO:Copying training dataset
2024-07-02 09:38:41,994:INFO:Checking base model
2024-07-02 09:38:41,994:INFO:A custom model has been passed
2024-07-02 09:38:41,994:INFO:Base model : sveADA
2024-07-02 09:38:41,996:INFO:Declaring metric variables
2024-07-02 09:38:41,997:INFO:Defining Hyperparameters
2024-07-02 09:38:42,074:INFO:custom_grid: {'actual_estimator__n_voters': [4, 6, 8, 10, 12, 14, 16, 18, 20]}
2024-07-02 09:38:42,074:INFO:Tuning with n_jobs=-1
2024-07-02 09:38:42,074:INFO:Initializing GridSearchCV
2024-07-02 09:38:43,609:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:43,623:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:43,638:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:43,643:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:45,356:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:45,439:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:45,459:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:45,536:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:45,543:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:45,545:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:45,577:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:45,591:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:48,798:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:48,836:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:48,838:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:48,887:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:50,766:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:50,774:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:50,824:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:50,889:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:52,953:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:52,967:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:53,007:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:53,025:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:53,032:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:53,036:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:54,066:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:54,105:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:54,123:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:54,131:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:54,132:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:54,210:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:58,761:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:58,826:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:58,847:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:58,860:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:58,872:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:38:58,897:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:47,563:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:47,589:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:47,599:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:47,601:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:47,603:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:47,700:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:49,572:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/joblib/externals/loky/process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(

2024-07-02 09:39:50,744:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:50,756:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:50,769:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:50,770:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:50,770:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:50,780:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:52,199:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:52,221:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:52,224:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:52,239:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:52,253:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:52,263:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:52,284:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:52,289:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:54,341:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:54,365:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:54,365:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:54,366:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:54,376:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:54,406:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:54,425:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:54,433:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:58,048:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:58,139:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:58,150:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:58,174:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:58,199:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:58,260:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:58,287:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:39:58,303:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:01,514:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:01,576:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:01,693:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:01,698:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:01,703:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:01,709:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:01,777:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:01,785:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:05,567:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:05,622:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:05,638:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:05,652:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:05,674:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:05,749:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:05,790:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:05,897:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:14,527:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:14,546:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:14,576:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:14,598:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:14,619:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:14,653:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:14,746:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:40:14,832:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:00,970:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:00,977:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:00,990:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:00,992:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:01,001:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:01,003:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:01,017:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:01,033:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:01,172:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:01,218:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:04,897:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:04,903:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:04,910:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:04,911:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:04,927:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:04,928:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:04,942:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:04,955:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:07,791:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:07,800:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:07,812:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:07,829:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:07,854:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:07,861:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:07,885:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:07,888:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:09,756:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:09,786:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:09,830:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:09,862:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:09,868:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:09,891:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:09,895:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:09,909:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:14,410:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:14,438:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:14,456:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:14,481:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:14,496:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:14,496:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:14,511:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:14,605:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:22,480:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:22,526:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:22,543:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:22,572:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:22,599:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:22,606:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:22,608:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:22,652:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:30,992:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:31,020:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:31,040:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:31,071:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:31,113:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:31,121:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:31,178:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:31,207:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:33,884:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:34,118:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:46,694:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:46,794:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:51,915:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:52,115:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:54,835:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:54,840:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:55,622:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:55,724:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:55,731:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:56,017:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:58,283:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:58,288:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:58,347:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:58,376:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:58,377:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:58,380:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:58,382:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:41:58,457:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:01,471:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:01,546:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:01,664:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:01,700:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:06,497:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:06,899:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:07,199:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:07,268:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:22,709:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:22,937:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:22,986:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:23,084:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:24,752:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:24,757:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:24,759:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:24,760:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:24,761:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:24,765:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:24,791:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:24,799:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:29,982:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:29,984:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:29,993:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:30,028:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:30,036:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:30,039:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:30,047:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:30,050:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:32,610:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:32,627:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:32,628:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:32,634:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:32,639:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:32,676:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:32,687:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:32,707:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:34,677:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:34,686:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:34,702:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:34,712:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:34,717:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:34,723:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:34,763:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:34,837:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:37,076:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:37,094:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:37,133:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:37,149:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:37,175:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:37,187:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:37,189:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:37,283:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:40,672:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:40,714:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:40,736:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:40,738:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:40,748:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:40,762:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:40,767:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:40,817:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:50,209:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:50,238:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:50,254:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:50,303:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:50,304:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:50,364:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:50,368:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:50,368:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:58,406:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:58,970:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:59,315:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:42:59,335:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:08,101:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:08,312:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:08,484:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:08,508:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:08,588:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:08,613:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:12,662:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:12,885:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:12,909:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:12,939:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:12,998:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:13,065:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:15,746:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:15,774:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:15,890:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:16,057:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:16,198:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:16,276:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:18,317:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:18,545:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:19,158:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:19,514:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:19,616:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:19,810:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:22,553:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:22,650:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:22,687:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:22,709:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:22,874:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:22,965:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:23,560:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:23,689:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:23,707:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:23,728:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:23,747:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:23,766:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:23,785:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:23,797:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:28,475:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:28,752:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:28,785:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:29,055:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:29,350:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:29,478:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:29,888:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:29,902:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:56,261:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:56,332:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:56,419:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:56,462:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:56,662:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:56,687:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:56,711:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:43:57,340:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:01,225:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:01,229:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:01,235:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:01,236:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:01,240:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:01,255:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:01,259:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:01,265:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:04,655:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:04,656:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:04,658:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:04,666:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:04,673:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:04,688:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:04,696:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:07,001:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:07,073:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:07,074:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:07,097:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:07,110:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:07,118:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:07,120:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:07,122:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:09,577:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:09,646:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:09,654:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:09,666:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:09,676:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:09,723:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:09,728:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:09,733:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:13,012:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:13,108:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:13,119:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:13,131:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:13,142:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:13,176:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:13,193:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:13,196:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:16,343:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:16,347:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:16,390:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:16,411:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:16,460:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:16,462:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:16,471:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:16,496:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:21,776:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:21,793:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:21,795:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:21,817:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:21,860:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:21,879:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:21,886:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:21,910:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:33,815:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:34,330:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:34,336:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:34,402:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:34,515:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:34,682:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:34,724:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:35,286:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:42,252:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:42,298:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:42,346:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:42,627:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:42,637:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:42,852:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:42,902:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:43,080:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:46,436:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:46,725:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:46,827:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:46,874:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:46,967:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:46,992:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:47,346:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:47,660:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:48,653:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:49,053:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:49,131:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:49,208:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:49,244:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:49,342:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:49,368:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:50,569:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:52,574:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:53,607:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:53,663:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:53,690:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:53,714:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:53,730:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:53,989:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:54,980:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:56,401:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:56,649:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:56,685:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:56,986:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:57,159:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:57,275:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:57,414:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:58,182:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:58,789:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:58,819:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:58,832:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:58,873:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:58,876:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:58,883:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:58,898:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:44:58,901:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:01,784:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:02,743:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:03,006:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:03,203:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:03,552:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:03,760:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:04,199:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:04,356:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:30,693:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:30,715:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:33,311:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:33,752:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:35,467:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:35,869:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:36,555:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:36,677:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:36,725:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:36,792:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:36,866:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:36,878:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:36,960:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:36,969:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:37,785:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:38,091:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:43,658:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:43,658:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:43,664:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:43,672:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:43,674:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:43,676:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:43,679:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:43,682:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:46,681:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:46,683:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:46,690:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:46,696:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:46,697:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:46,709:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:46,719:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:46,746:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:48,951:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:48,965:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:48,972:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:49,001:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:49,053:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:49,054:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:49,066:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:49,068:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:56,459:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:45:56,720:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:05,560:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:05,583:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:05,650:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:05,661:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:05,752:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:05,819:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:05,889:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:05,983:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:08,981:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:09,110:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:09,182:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:09,199:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:09,299:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:09,353:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:09,469:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:09,581:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:11,333:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:11,351:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:11,374:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:11,507:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:11,517:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:11,573:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:11,891:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:12,036:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:12,764:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:12,766:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:12,783:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:12,788:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:12,789:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:12,800:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:12,809:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:12,811:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:17,252:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:17,257:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:17,258:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:17,294:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:17,301:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:17,313:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:17,343:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:17,387:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:29,342:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:29,774:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:29,957:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:30,245:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:33,783:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:33,887:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:34,015:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:34,152:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:36,793:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:36,884:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:36,898:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:37,163:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:38,063:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:38,064:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:38,086:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:38,099:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:38,209:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:38,306:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:38,361:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:38,456:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:41,834:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:41,839:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:41,864:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:41,875:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:41,965:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:41,998:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:42,088:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:42,234:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:55,720:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:55,759:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:55,778:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:55,940:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:57,776:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:57,786:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:57,884:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:46:57,922:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:05,362:INFO:best_params: {'actual_estimator__n_voters': 14}
2024-07-02 09:47:05,364:INFO:Hyperparameter search completed
2024-07-02 09:47:05,365:INFO:SubProcess create_model() called ==================================
2024-07-02 09:47:05,365:INFO:Initializing create_model()
2024-07-02 09:47:05,365:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveADA(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft'), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x3083120b0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_voters': 14})
2024-07-02 09:47:05,366:INFO:Checking exceptions
2024-07-02 09:47:05,366:INFO:Importing libraries
2024-07-02 09:47:05,366:INFO:Copying training dataset
2024-07-02 09:47:06,595:INFO:Defining folds
2024-07-02 09:47:06,596:INFO:Declaring metric variables
2024-07-02 09:47:06,598:INFO:Importing untrained model
2024-07-02 09:47:06,598:INFO:Declaring custom model
2024-07-02 09:47:06,600:INFO:sveADA Imported successfully
2024-07-02 09:47:06,603:INFO:Starting cross validation
2024-07-02 09:47:06,610:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 09:47:08,268:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:08,276:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:08,280:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:08,285:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:08,288:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:08,290:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:08,309:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:08,313:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:09,838:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:09,854:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:09,864:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:09,865:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:09,878:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:09,883:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:09,886:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:09,888:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:12,761:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:12,786:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:12,786:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:12,789:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:12,792:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:12,799:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:12,811:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:12,820:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:16,050:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:16,085:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:16,085:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:16,107:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:16,128:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:16,130:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:16,130:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:16,139:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:18,497:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:18,525:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:18,539:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:18,559:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:18,593:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:18,603:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:18,673:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:18,697:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:31,114:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:31,244:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:31,325:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:31,416:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:31,523:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:31,577:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:36,038:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:36,195:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:36,613:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:36,770:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:36,845:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:37,021:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:41,425:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:41,690:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:41,950:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:41,985:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:42,062:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:42,079:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:45,174:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:45,545:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:45,640:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:45,810:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:45,993:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:46,069:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:47,815:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:47,943:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:48,088:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:48,213:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:48,262:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:47:48,352:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:09,876:INFO:Calculating mean and std
2024-07-02 09:48:09,877:INFO:Creating metrics dataframe
2024-07-02 09:48:09,882:INFO:Finalizing model
2024-07-02 09:48:10,822:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:10,892:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:10,988:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:11,066:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:11,190:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:11,240:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:13,267:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
2024-07-02 09:48:13,269:WARNING:  warnings.warn(
2024-07-02 09:48:18,765:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:18,767:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:19,120:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:19,159:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:19,259:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:19,390:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:25,868:INFO:Uploading results into container
2024-07-02 09:48:25,871:INFO:Uploading model into container now
2024-07-02 09:48:25,871:INFO:_master_model_container: 10
2024-07-02 09:48:25,871:INFO:_display_container: 9
2024-07-02 09:48:25,871:INFO:sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft')
2024-07-02 09:48:25,871:INFO:create_model() successfully completed......................................
2024-07-02 09:48:25,966:INFO:SubProcess create_model() end ==================================
2024-07-02 09:48:25,966:INFO:choose_better activated
2024-07-02 09:48:25,968:INFO:SubProcess create_model() called ==================================
2024-07-02 09:48:25,969:INFO:Initializing create_model()
2024-07-02 09:48:25,969:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft'), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 09:48:25,969:INFO:Checking exceptions
2024-07-02 09:48:25,970:INFO:Importing libraries
2024-07-02 09:48:25,970:INFO:Copying training dataset
2024-07-02 09:48:27,056:INFO:Defining folds
2024-07-02 09:48:27,057:INFO:Declaring metric variables
2024-07-02 09:48:27,057:INFO:Importing untrained model
2024-07-02 09:48:27,057:INFO:Declaring custom model
2024-07-02 09:48:27,057:INFO:sveADA Imported successfully
2024-07-02 09:48:27,057:INFO:Starting cross validation
2024-07-02 09:48:27,063:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 09:48:29,086:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:29,092:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:29,094:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:29,097:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:29,099:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:29,105:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:29,118:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:29,120:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:29,451:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:29,465:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:29,467:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:29,470:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:29,481:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:29,492:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:29,495:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:29,500:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:31,753:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:31,771:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:31,781:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:31,782:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:31,796:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:31,798:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:31,801:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:31,819:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:34,694:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:34,699:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:34,733:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:34,735:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:34,742:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:34,758:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:34,774:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:34,786:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:37,879:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:37,938:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:37,970:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:37,983:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:37,988:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:37,996:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:38,004:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:38,004:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:55,582:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:55,736:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:55,768:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:55,853:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:55,885:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:55,979:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:56,583:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:56,613:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:56,694:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:56,755:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:56,913:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:48:57,059:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:00,101:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:00,282:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:00,545:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:00,746:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:00,850:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:00,895:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:04,447:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:04,522:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:04,560:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:04,888:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:04,982:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:05,032:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:07,211:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:07,651:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:07,698:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:07,885:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:07,958:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:08,014:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:29,970:INFO:Calculating mean and std
2024-07-02 09:49:29,971:INFO:Creating metrics dataframe
2024-07-02 09:49:29,973:INFO:Finalizing model
2024-07-02 09:49:30,823:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:30,912:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:31,010:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:31,195:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:31,299:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:33,106:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
2024-07-02 09:49:33,107:WARNING:  warnings.warn(
2024-07-02 09:49:33,229:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
2024-07-02 09:49:33,229:WARNING:  warnings.warn(
2024-07-02 09:49:38,640:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:38,710:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:38,863:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:39,164:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:39,332:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 09:49:45,943:INFO:Uploading results into container
2024-07-02 09:49:45,943:INFO:Uploading model into container now
2024-07-02 09:49:45,944:INFO:_master_model_container: 11
2024-07-02 09:49:45,944:INFO:_display_container: 10
2024-07-02 09:49:45,944:INFO:sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft')
2024-07-02 09:49:45,944:INFO:create_model() successfully completed......................................
2024-07-02 09:49:46,037:INFO:SubProcess create_model() end ==================================
2024-07-02 09:49:46,037:INFO:sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft') result for BA is 0.8773
2024-07-02 09:49:46,037:INFO:sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft') result for BA is 0.8773
2024-07-02 09:49:46,037:INFO:sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft') is best model
2024-07-02 09:49:46,037:INFO:choose_better completed
2024-07-02 09:49:46,042:INFO:_master_model_container: 11
2024-07-02 09:49:46,042:INFO:_display_container: 9
2024-07-02 09:49:46,042:INFO:sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft')
2024-07-02 09:49:46,042:INFO:tune_model() successfully completed......................................
2024-07-02 09:49:46,139:INFO:Initializing save_model()
2024-07-02 09:49:46,139:INFO:save_model(model=sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft'), model_name=../pycaret/saved_sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft')_model, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-07-02 09:49:46,139:INFO:Adding model into prep_pipe
2024-07-02 09:49:46,300:INFO:../pycaret/saved_sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft')_model.pkl saved in current working directory
2024-07-02 09:49:46,315:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tissue',
                                             'Orthologs count',
                                             'Driver_genes_MUT (all)',
                                             'Driver_g...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False)
2024-07-02 09:49:46,315:INFO:save_model() successfully completed......................................
2024-07-02 09:49:46,383:INFO:Initializing create_model()
2024-07-02 09:49:46,383:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveRF(n_jobs=-1, n_voters=-1, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 09:49:46,383:INFO:Checking exceptions
2024-07-02 09:49:46,390:INFO:Importing libraries
2024-07-02 09:49:46,390:INFO:Copying training dataset
2024-07-02 09:49:47,532:INFO:Defining folds
2024-07-02 09:49:47,532:INFO:Declaring metric variables
2024-07-02 09:49:47,534:INFO:Importing untrained model
2024-07-02 09:49:47,534:INFO:Declaring custom model
2024-07-02 09:49:47,536:INFO:sveRF Imported successfully
2024-07-02 09:49:47,539:INFO:Starting cross validation
2024-07-02 09:49:47,545:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 09:50:02,970:INFO:Calculating mean and std
2024-07-02 09:50:02,971:INFO:Creating metrics dataframe
2024-07-02 09:50:02,973:INFO:Finalizing model
2024-07-02 09:50:07,472:INFO:Uploading results into container
2024-07-02 09:50:07,473:INFO:Uploading model into container now
2024-07-02 09:50:07,477:INFO:_master_model_container: 12
2024-07-02 09:50:07,478:INFO:_display_container: 10
2024-07-02 09:50:07,478:INFO:sveRF(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft')
2024-07-02 09:50:07,478:INFO:create_model() successfully completed......................................
2024-07-02 09:50:07,571:INFO:Initializing tune_model()
2024-07-02 09:50:07,571:INFO:tune_model(estimator=sveRF(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, n_iter=10, custom_grid={'n_voters': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, optimize=BA, custom_scorer=None, search_library=scikit-learn, search_algorithm=grid, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=True, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>)
2024-07-02 09:50:07,572:INFO:Checking exceptions
2024-07-02 09:50:07,955:INFO:Copying training dataset
2024-07-02 09:50:08,708:INFO:Checking base model
2024-07-02 09:50:08,708:INFO:A custom model has been passed
2024-07-02 09:50:08,708:INFO:Base model : sveRF
2024-07-02 09:50:08,710:INFO:Declaring metric variables
2024-07-02 09:50:08,711:INFO:Defining Hyperparameters
2024-07-02 09:50:08,792:INFO:custom_grid: {'actual_estimator__n_voters': [4, 6, 8, 10, 12, 14, 16, 18, 20]}
2024-07-02 09:50:08,792:INFO:Tuning with n_jobs=-1
2024-07-02 09:50:08,792:INFO:Initializing GridSearchCV
2024-07-02 09:50:36,791:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/joblib/externals/loky/process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(

2024-07-02 09:52:23,721:INFO:best_params: {'actual_estimator__n_voters': 10}
2024-07-02 09:52:23,725:INFO:Hyperparameter search completed
2024-07-02 09:52:23,725:INFO:SubProcess create_model() called ==================================
2024-07-02 09:52:23,726:INFO:Initializing create_model()
2024-07-02 09:52:23,726:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveRF(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft'), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x10b27ec50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_voters': 10})
2024-07-02 09:52:23,726:INFO:Checking exceptions
2024-07-02 09:52:23,726:INFO:Importing libraries
2024-07-02 09:52:23,727:INFO:Copying training dataset
2024-07-02 09:52:24,932:INFO:Defining folds
2024-07-02 09:52:24,932:INFO:Declaring metric variables
2024-07-02 09:52:24,935:INFO:Importing untrained model
2024-07-02 09:52:24,935:INFO:Declaring custom model
2024-07-02 09:52:24,937:INFO:sveRF Imported successfully
2024-07-02 09:52:24,939:INFO:Starting cross validation
2024-07-02 09:52:24,946:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 09:52:40,393:INFO:Calculating mean and std
2024-07-02 09:52:40,394:INFO:Creating metrics dataframe
2024-07-02 09:52:40,398:INFO:Finalizing model
2024-07-02 09:52:45,765:INFO:Uploading results into container
2024-07-02 09:52:45,767:INFO:Uploading model into container now
2024-07-02 09:52:45,767:INFO:_master_model_container: 13
2024-07-02 09:52:45,767:INFO:_display_container: 11
2024-07-02 09:52:45,767:INFO:sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft')
2024-07-02 09:52:45,768:INFO:create_model() successfully completed......................................
2024-07-02 09:52:45,865:INFO:SubProcess create_model() end ==================================
2024-07-02 09:52:45,865:INFO:choose_better activated
2024-07-02 09:52:45,867:INFO:SubProcess create_model() called ==================================
2024-07-02 09:52:45,867:INFO:Initializing create_model()
2024-07-02 09:52:45,867:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft'), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 09:52:45,867:INFO:Checking exceptions
2024-07-02 09:52:45,868:INFO:Importing libraries
2024-07-02 09:52:45,868:INFO:Copying training dataset
2024-07-02 09:52:46,958:INFO:Defining folds
2024-07-02 09:52:46,958:INFO:Declaring metric variables
2024-07-02 09:52:46,958:INFO:Importing untrained model
2024-07-02 09:52:46,958:INFO:Declaring custom model
2024-07-02 09:52:46,958:INFO:sveRF Imported successfully
2024-07-02 09:52:46,959:INFO:Starting cross validation
2024-07-02 09:52:46,965:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 09:53:01,968:INFO:Calculating mean and std
2024-07-02 09:53:01,968:INFO:Creating metrics dataframe
2024-07-02 09:53:01,971:INFO:Finalizing model
2024-07-02 09:53:07,224:INFO:Uploading results into container
2024-07-02 09:53:07,225:INFO:Uploading model into container now
2024-07-02 09:53:07,226:INFO:_master_model_container: 14
2024-07-02 09:53:07,226:INFO:_display_container: 12
2024-07-02 09:53:07,226:INFO:sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft')
2024-07-02 09:53:07,226:INFO:create_model() successfully completed......................................
2024-07-02 09:53:07,326:INFO:SubProcess create_model() end ==================================
2024-07-02 09:53:07,326:INFO:sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft') result for BA is 0.862
2024-07-02 09:53:07,327:INFO:sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft') result for BA is 0.8603
2024-07-02 09:53:07,327:INFO:sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft') is best model
2024-07-02 09:53:07,327:INFO:choose_better completed
2024-07-02 09:53:07,331:INFO:_master_model_container: 14
2024-07-02 09:53:07,331:INFO:_display_container: 11
2024-07-02 09:53:07,331:INFO:sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft')
2024-07-02 09:53:07,331:INFO:tune_model() successfully completed......................................
2024-07-02 09:53:07,434:INFO:Initializing save_model()
2024-07-02 09:53:07,434:INFO:save_model(model=sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft'), model_name=../pycaret/saved_sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft')_model, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-07-02 09:53:07,434:INFO:Adding model into prep_pipe
2024-07-02 09:53:07,683:INFO:../pycaret/saved_sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False, voting='soft')_model.pkl saved in current working directory
2024-07-02 09:53:07,698:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tissue',
                                             'Orthologs count',
                                             'Driver_genes_MUT (all)',
                                             'Driver_g...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False)
2024-07-02 09:53:07,698:INFO:save_model() successfully completed......................................
2024-07-02 09:53:07,765:INFO:Initializing create_model()
2024-07-02 09:53:07,765:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveLDA(n_jobs=-1, n_voters=-1, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 09:53:07,765:INFO:Checking exceptions
2024-07-02 09:53:07,772:INFO:Importing libraries
2024-07-02 09:53:07,772:INFO:Copying training dataset
2024-07-02 09:53:08,953:INFO:Defining folds
2024-07-02 09:53:08,953:INFO:Declaring metric variables
2024-07-02 09:53:08,956:INFO:Importing untrained model
2024-07-02 09:53:08,956:INFO:Declaring custom model
2024-07-02 09:53:08,958:INFO:sveLDA Imported successfully
2024-07-02 09:53:08,960:INFO:Starting cross validation
2024-07-02 09:53:08,966:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 09:53:35,312:INFO:Calculating mean and std
2024-07-02 09:53:35,314:INFO:Creating metrics dataframe
2024-07-02 09:53:35,320:INFO:Finalizing model
2024-07-02 09:53:44,715:INFO:Uploading results into container
2024-07-02 09:53:44,717:INFO:Uploading model into container now
2024-07-02 09:53:44,722:INFO:_master_model_container: 15
2024-07-02 09:53:44,722:INFO:_display_container: 12
2024-07-02 09:53:44,722:INFO:sveLDA(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft')
2024-07-02 09:53:44,722:INFO:create_model() successfully completed......................................
2024-07-02 09:53:44,837:INFO:Initializing tune_model()
2024-07-02 09:53:44,837:INFO:tune_model(estimator=sveLDA(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, n_iter=10, custom_grid={'n_voters': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, optimize=BA, custom_scorer=None, search_library=scikit-learn, search_algorithm=grid, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=True, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>)
2024-07-02 09:53:44,838:INFO:Checking exceptions
2024-07-02 09:53:45,261:INFO:Copying training dataset
2024-07-02 09:53:45,985:INFO:Checking base model
2024-07-02 09:53:45,985:INFO:A custom model has been passed
2024-07-02 09:53:45,985:INFO:Base model : sveLDA
2024-07-02 09:53:45,987:INFO:Declaring metric variables
2024-07-02 09:53:45,988:INFO:Defining Hyperparameters
2024-07-02 09:53:46,068:INFO:custom_grid: {'actual_estimator__n_voters': [4, 6, 8, 10, 12, 14, 16, 18, 20]}
2024-07-02 09:53:46,068:INFO:Tuning with n_jobs=-1
2024-07-02 09:53:46,068:INFO:Initializing GridSearchCV
2024-07-02 09:56:47,773:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/joblib/externals/loky/process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(

2024-07-02 09:58:34,150:INFO:best_params: {'actual_estimator__n_voters': 14}
2024-07-02 09:58:34,153:INFO:Hyperparameter search completed
2024-07-02 09:58:34,153:INFO:SubProcess create_model() called ==================================
2024-07-02 09:58:34,154:INFO:Initializing create_model()
2024-07-02 09:58:34,155:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveLDA(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft'), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x10b27ec50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_voters': 14})
2024-07-02 09:58:34,155:INFO:Checking exceptions
2024-07-02 09:58:34,155:INFO:Importing libraries
2024-07-02 09:58:34,155:INFO:Copying training dataset
2024-07-02 09:58:35,390:INFO:Defining folds
2024-07-02 09:58:35,390:INFO:Declaring metric variables
2024-07-02 09:58:35,393:INFO:Importing untrained model
2024-07-02 09:58:35,393:INFO:Declaring custom model
2024-07-02 09:58:35,395:INFO:sveLDA Imported successfully
2024-07-02 09:58:35,397:INFO:Starting cross validation
2024-07-02 09:58:35,404:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 09:59:03,377:INFO:Calculating mean and std
2024-07-02 09:59:03,380:INFO:Creating metrics dataframe
2024-07-02 09:59:03,385:INFO:Finalizing model
2024-07-02 09:59:12,546:INFO:Uploading results into container
2024-07-02 09:59:12,547:INFO:Uploading model into container now
2024-07-02 09:59:12,548:INFO:_master_model_container: 16
2024-07-02 09:59:12,548:INFO:_display_container: 13
2024-07-02 09:59:12,548:INFO:sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft')
2024-07-02 09:59:12,548:INFO:create_model() successfully completed......................................
2024-07-02 09:59:12,647:INFO:SubProcess create_model() end ==================================
2024-07-02 09:59:12,648:INFO:choose_better activated
2024-07-02 09:59:12,649:INFO:SubProcess create_model() called ==================================
2024-07-02 09:59:12,650:INFO:Initializing create_model()
2024-07-02 09:59:12,650:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft'), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 09:59:12,650:INFO:Checking exceptions
2024-07-02 09:59:12,651:INFO:Importing libraries
2024-07-02 09:59:12,651:INFO:Copying training dataset
2024-07-02 09:59:13,720:INFO:Defining folds
2024-07-02 09:59:13,720:INFO:Declaring metric variables
2024-07-02 09:59:13,720:INFO:Importing untrained model
2024-07-02 09:59:13,720:INFO:Declaring custom model
2024-07-02 09:59:13,721:INFO:sveLDA Imported successfully
2024-07-02 09:59:13,721:INFO:Starting cross validation
2024-07-02 09:59:13,727:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 09:59:40,362:INFO:Calculating mean and std
2024-07-02 09:59:40,363:INFO:Creating metrics dataframe
2024-07-02 09:59:40,366:INFO:Finalizing model
2024-07-02 09:59:49,587:INFO:Uploading results into container
2024-07-02 09:59:49,588:INFO:Uploading model into container now
2024-07-02 09:59:49,588:INFO:_master_model_container: 17
2024-07-02 09:59:49,588:INFO:_display_container: 14
2024-07-02 09:59:49,588:INFO:sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft')
2024-07-02 09:59:49,588:INFO:create_model() successfully completed......................................
2024-07-02 09:59:49,672:INFO:SubProcess create_model() end ==================================
2024-07-02 09:59:49,672:INFO:sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft') result for BA is 0.7855
2024-07-02 09:59:49,672:INFO:sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft') result for BA is 0.7855
2024-07-02 09:59:49,672:INFO:sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft') is best model
2024-07-02 09:59:49,672:INFO:choose_better completed
2024-07-02 09:59:49,676:INFO:_master_model_container: 17
2024-07-02 09:59:49,677:INFO:_display_container: 13
2024-07-02 09:59:49,677:INFO:sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft')
2024-07-02 09:59:49,677:INFO:tune_model() successfully completed......................................
2024-07-02 09:59:49,779:INFO:Initializing save_model()
2024-07-02 09:59:49,779:INFO:save_model(model=sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft'), model_name=../pycaret/saved_sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft')_model, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-07-02 09:59:49,779:INFO:Adding model into prep_pipe
2024-07-02 09:59:49,816:INFO:../pycaret/saved_sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False, voting='soft')_model.pkl saved in current working directory
2024-07-02 09:59:49,831:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tissue',
                                             'Orthologs count',
                                             'Driver_genes_MUT (all)',
                                             'Driver_g...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False)
2024-07-02 09:59:49,831:INFO:save_model() successfully completed......................................
2024-07-02 09:59:49,898:INFO:Initializing create_model()
2024-07-02 09:59:49,898:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=lightgbm, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 09:59:49,898:INFO:Checking exceptions
2024-07-02 09:59:49,905:INFO:Importing libraries
2024-07-02 09:59:49,905:INFO:Copying training dataset
2024-07-02 09:59:51,060:INFO:Defining folds
2024-07-02 09:59:51,060:INFO:Declaring metric variables
2024-07-02 09:59:51,062:INFO:Importing untrained model
2024-07-02 09:59:51,064:INFO:Light Gradient Boosting Machine Imported successfully
2024-07-02 09:59:51,067:INFO:Starting cross validation
2024-07-02 09:59:51,074:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 10:00:10,618:INFO:Calculating mean and std
2024-07-02 10:00:10,619:INFO:Creating metrics dataframe
2024-07-02 10:00:10,625:INFO:Finalizing model
2024-07-02 10:00:17,491:INFO:Uploading results into container
2024-07-02 10:00:17,492:INFO:Uploading model into container now
2024-07-02 10:00:17,497:INFO:_master_model_container: 18
2024-07-02 10:00:17,497:INFO:_display_container: 14
2024-07-02 10:00:17,497:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=444, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2024-07-02 10:00:17,497:INFO:create_model() successfully completed......................................
2024-07-02 10:00:17,650:INFO:Initializing tune_model()
2024-07-02 10:00:17,650:INFO:tune_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=444, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), fold=None, round=4, n_iter=10, custom_grid=None, optimize=BA, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=True, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>)
2024-07-02 10:00:17,650:INFO:Checking exceptions
2024-07-02 10:00:18,039:INFO:Copying training dataset
2024-07-02 10:00:18,737:INFO:Checking base model
2024-07-02 10:00:18,738:INFO:Base model : Light Gradient Boosting Machine
2024-07-02 10:00:18,739:INFO:Declaring metric variables
2024-07-02 10:00:18,741:INFO:Defining Hyperparameters
2024-07-02 10:00:18,819:INFO:Tuning with n_jobs=-1
2024-07-02 10:00:18,819:INFO:Initializing RandomizedSearchCV
2024-07-02 10:01:27,710:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/joblib/externals/loky/process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(

2024-07-02 10:02:06,696:INFO:best_params: {'actual_estimator__reg_lambda': 1e-07, 'actual_estimator__reg_alpha': 0.0001, 'actual_estimator__num_leaves': 30, 'actual_estimator__n_estimators': 60, 'actual_estimator__min_split_gain': 0.6, 'actual_estimator__min_child_samples': 91, 'actual_estimator__learning_rate': 0.4, 'actual_estimator__feature_fraction': 0.4, 'actual_estimator__bagging_freq': 0, 'actual_estimator__bagging_fraction': 0.5}
2024-07-02 10:02:06,698:INFO:Hyperparameter search completed
2024-07-02 10:02:06,698:INFO:SubProcess create_model() called ==================================
2024-07-02 10:02:06,699:INFO:Initializing create_model()
2024-07-02 10:02:06,699:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=444, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x328517850>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'reg_lambda': 1e-07, 'reg_alpha': 0.0001, 'num_leaves': 30, 'n_estimators': 60, 'min_split_gain': 0.6, 'min_child_samples': 91, 'learning_rate': 0.4, 'feature_fraction': 0.4, 'bagging_freq': 0, 'bagging_fraction': 0.5})
2024-07-02 10:02:06,699:INFO:Checking exceptions
2024-07-02 10:02:06,699:INFO:Importing libraries
2024-07-02 10:02:06,700:INFO:Copying training dataset
2024-07-02 10:02:07,922:INFO:Defining folds
2024-07-02 10:02:07,922:INFO:Declaring metric variables
2024-07-02 10:02:07,925:INFO:Importing untrained model
2024-07-02 10:02:07,925:INFO:Declaring custom model
2024-07-02 10:02:07,928:INFO:Light Gradient Boosting Machine Imported successfully
2024-07-02 10:02:07,930:INFO:Starting cross validation
2024-07-02 10:02:07,937:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 10:02:12,390:INFO:[LightGBM] [Warning] bagging_freq is set=0, subsample_freq=0 will be ignored. Current value: bagging_freq=0
2024-07-02 10:02:12,391:INFO:[LightGBM] [Warning] feature_fraction is set=0.4, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.4
2024-07-02 10:02:12,391:INFO:[LightGBM] [Warning] bagging_fraction is set=0.5, subsample=1.0 will be ignored. Current value: bagging_fraction=0.5
2024-07-02 10:02:17,989:INFO:Calculating mean and std
2024-07-02 10:02:17,990:INFO:Creating metrics dataframe
2024-07-02 10:02:17,997:INFO:Finalizing model
2024-07-02 10:02:21,380:INFO:Uploading results into container
2024-07-02 10:02:21,380:INFO:Uploading model into container now
2024-07-02 10:02:21,381:INFO:_master_model_container: 19
2024-07-02 10:02:21,381:INFO:_display_container: 15
2024-07-02 10:02:21,382:INFO:LGBMClassifier(bagging_fraction=0.5, bagging_freq=0, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.4,
               importance_type='split', learning_rate=0.4, max_depth=-1,
               min_child_samples=91, min_child_weight=0.001, min_split_gain=0.6,
               n_estimators=60, n_jobs=-1, num_leaves=30, objective=None,
               random_state=444, reg_alpha=0.0001, reg_lambda=1e-07,
               silent='warn', subsample=1.0, subsample_for_bin=200000,
               subsample_freq=0)
2024-07-02 10:02:21,382:INFO:create_model() successfully completed......................................
2024-07-02 10:02:21,477:INFO:SubProcess create_model() end ==================================
2024-07-02 10:02:21,478:INFO:choose_better activated
2024-07-02 10:02:21,479:INFO:SubProcess create_model() called ==================================
2024-07-02 10:02:21,480:INFO:Initializing create_model()
2024-07-02 10:02:21,480:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=444, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 10:02:21,480:INFO:Checking exceptions
2024-07-02 10:02:21,481:INFO:Importing libraries
2024-07-02 10:02:21,481:INFO:Copying training dataset
2024-07-02 10:02:22,556:INFO:Defining folds
2024-07-02 10:02:22,556:INFO:Declaring metric variables
2024-07-02 10:02:22,556:INFO:Importing untrained model
2024-07-02 10:02:22,557:INFO:Declaring custom model
2024-07-02 10:02:22,557:INFO:Light Gradient Boosting Machine Imported successfully
2024-07-02 10:02:22,557:INFO:Starting cross validation
2024-07-02 10:02:22,564:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 10:02:42,424:INFO:Calculating mean and std
2024-07-02 10:02:42,425:INFO:Creating metrics dataframe
2024-07-02 10:02:42,428:INFO:Finalizing model
2024-07-02 10:02:49,595:INFO:Uploading results into container
2024-07-02 10:02:49,596:INFO:Uploading model into container now
2024-07-02 10:02:49,596:INFO:_master_model_container: 20
2024-07-02 10:02:49,596:INFO:_display_container: 16
2024-07-02 10:02:49,596:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=444, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2024-07-02 10:02:49,596:INFO:create_model() successfully completed......................................
2024-07-02 10:02:49,680:INFO:SubProcess create_model() end ==================================
2024-07-02 10:02:49,680:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=444, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0) result for BA is 0.7242
2024-07-02 10:02:49,681:INFO:LGBMClassifier(bagging_fraction=0.5, bagging_freq=0, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.4,
               importance_type='split', learning_rate=0.4, max_depth=-1,
               min_child_samples=91, min_child_weight=0.001, min_split_gain=0.6,
               n_estimators=60, n_jobs=-1, num_leaves=30, objective=None,
               random_state=444, reg_alpha=0.0001, reg_lambda=1e-07,
               silent='warn', subsample=1.0, subsample_for_bin=200000,
               subsample_freq=0) result for BA is 0.7294
2024-07-02 10:02:49,681:INFO:LGBMClassifier(bagging_fraction=0.5, bagging_freq=0, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.4,
               importance_type='split', learning_rate=0.4, max_depth=-1,
               min_child_samples=91, min_child_weight=0.001, min_split_gain=0.6,
               n_estimators=60, n_jobs=-1, num_leaves=30, objective=None,
               random_state=444, reg_alpha=0.0001, reg_lambda=1e-07,
               silent='warn', subsample=1.0, subsample_for_bin=200000,
               subsample_freq=0) is best model
2024-07-02 10:02:49,681:INFO:choose_better completed
2024-07-02 10:02:49,685:INFO:_master_model_container: 20
2024-07-02 10:02:49,685:INFO:_display_container: 15
2024-07-02 10:02:49,686:INFO:LGBMClassifier(bagging_fraction=0.5, bagging_freq=0, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.4,
               importance_type='split', learning_rate=0.4, max_depth=-1,
               min_child_samples=91, min_child_weight=0.001, min_split_gain=0.6,
               n_estimators=60, n_jobs=-1, num_leaves=30, objective=None,
               random_state=444, reg_alpha=0.0001, reg_lambda=1e-07,
               silent='warn', subsample=1.0, subsample_for_bin=200000,
               subsample_freq=0)
2024-07-02 10:02:49,686:INFO:tune_model() successfully completed......................................
2024-07-02 10:02:49,789:INFO:Initializing save_model()
2024-07-02 10:02:49,789:INFO:save_model(model=LGBMClassifier(bagging_fraction=0.5, bagging_freq=0, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.4,
               importance_type='split', learning_rate=0.4, max_depth=-1,
               min_child_samples=91, min_child_weight=0.001, min_split_gain=0.6,
               n_estimators=60, n_jobs=-1, num_leaves=30, objective=None,
               random_state=444, reg_alpha=0.0001, reg_lambda=1e-07,
               silent='warn', subsample=1.0, subsample_for_bin=200000,
               subsample_freq=0), model_name=../pycaret/saved_lightgbm_model, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-07-02 10:02:49,790:INFO:Adding model into prep_pipe
2024-07-02 10:02:49,823:INFO:../pycaret/saved_lightgbm_model.pkl saved in current working directory
2024-07-02 10:02:49,838:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tissue',
                                             'Orthologs count',
                                             'Driver_genes_MUT (all)',
                                             'Driver_g...
                                colsample_bytree=1.0, feature_fraction=0.4,
                                importance_type='split', learning_rate=0.4,
                                max_depth=-1, min_child_samples=91,
                                min_child_weight=0.001, min_split_gain=0.6,
                                n_estimators=60, n_jobs=-1, num_leaves=30,
                                objective=None, random_state=444,
                                reg_alpha=0.0001, reg_lambda=1e-07,
                                silent='warn', subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2024-07-02 10:02:49,838:INFO:save_model() successfully completed......................................
2024-07-02 10:02:49,903:INFO:Initializing create_model()
2024-07-02 10:02:49,903:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=xgboost, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 10:02:49,903:INFO:Checking exceptions
2024-07-02 10:02:49,910:INFO:Importing libraries
2024-07-02 10:02:49,910:INFO:Copying training dataset
2024-07-02 10:02:51,041:INFO:Defining folds
2024-07-02 10:02:51,042:INFO:Declaring metric variables
2024-07-02 10:02:51,045:INFO:Importing untrained model
2024-07-02 10:02:51,046:INFO:Extreme Gradient Boosting Imported successfully
2024-07-02 10:02:51,049:INFO:Starting cross validation
2024-07-02 10:02:51,056:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 10:02:52,406:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:02:52,406:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:02:52,458:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:02:52,481:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:02:52,893:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:02:52,893:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:02:52,945:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:02:52,962:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:02:53,005:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:02:53,505:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:02:53,559:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:02:53,559:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:02:53,611:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:02:53,635:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:02:54,194:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:02:54,323:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:02:54,323:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:02:54,381:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:02:54,403:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:02:54,939:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:02:56,092:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:02:56,092:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:02:56,141:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:02:56,170:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:02:56,740:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:04:57,320:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:04:57,321:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:04:57,374:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:04:57,390:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:04:57,531:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:04:57,531:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:04:57,585:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:04:57,607:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:04:57,696:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:04:57,696:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:04:57,745:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:04:57,764:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:04:57,885:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:04:57,885:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:04:57,936:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:04:57,962:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:04:58,439:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:04:58,439:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:04:58,483:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:04:58,500:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:04:58,603:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:04:58,603:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:04:58,641:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:04:58,658:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:04:59,055:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:04:59,055:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:04:59,093:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:04:59,110:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:04:59,209:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:04:59,209:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:04:59,247:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:04:59,263:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:05:00,694:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:05:00,694:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:05:00,731:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:05:00,747:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:05:00,844:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:05:00,844:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:05:00,880:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:05:00,896:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:05:01,012:INFO:Calculating mean and std
2024-07-02 10:05:01,013:INFO:Creating metrics dataframe
2024-07-02 10:05:01,019:INFO:Finalizing model
2024-07-02 10:05:01,729:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:05:01,729:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:05:01,766:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:05:01,782:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:05:01,956:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:05:31,312:INFO:Uploading results into container
2024-07-02 10:05:31,313:INFO:Uploading model into container now
2024-07-02 10:05:31,318:INFO:_master_model_container: 21
2024-07-02 10:05:31,318:INFO:_display_container: 16
2024-07-02 10:05:31,320:INFO:XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, feature_types=None, gamma=0, gpu_id=-1,
              grow_policy='depthwise', importance_type=None,
              interaction_constraints='', learning_rate=0.300000012,
              max_bin=256, max_cat_threshold=64, max_cat_to_onehot=4,
              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,
              missing=nan, monotone_constraints='()', n_estimators=100,
              n_jobs=-1, num_parallel_tree=1, objective='binary:logistic',
              predictor='auto', ...)
2024-07-02 10:05:31,320:INFO:create_model() successfully completed......................................
2024-07-02 10:05:31,416:INFO:Initializing tune_model()
2024-07-02 10:05:31,416:INFO:tune_model(estimator=XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, feature_types=None, gamma=0, gpu_id=-1,
              grow_policy='depthwise', importance_type=None,
              interaction_constraints='', learning_rate=0.300000012,
              max_bin=256, max_cat_threshold=64, max_cat_to_onehot=4,
              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,
              missing=nan, monotone_constraints='()', n_estimators=100,
              n_jobs=-1, num_parallel_tree=1, objective='binary:logistic',
              predictor='auto', ...), fold=None, round=4, n_iter=10, custom_grid=None, optimize=BA, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=True, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>)
2024-07-02 10:05:31,416:INFO:Checking exceptions
2024-07-02 10:05:31,816:INFO:Copying training dataset
2024-07-02 10:05:32,568:INFO:Checking base model
2024-07-02 10:05:32,568:INFO:Base model : Extreme Gradient Boosting
2024-07-02 10:05:32,570:INFO:Declaring metric variables
2024-07-02 10:05:32,572:INFO:Defining Hyperparameters
2024-07-02 10:05:32,652:INFO:Tuning with n_jobs=-1
2024-07-02 10:05:32,652:INFO:Initializing RandomizedSearchCV
2024-07-02 10:05:34,145:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:05:34,145:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:05:34,194:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:05:34,216:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:05:34,781:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:05:34,781:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:05:34,855:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:05:34,883:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:05:34,955:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:05:35,240:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:05:35,240:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:05:35,297:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:05:35,324:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:05:35,577:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:05:36,087:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:05:36,089:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:05:36,113:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:05:36,179:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:05:36,204:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:05:36,699:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:05:36,699:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:05:36,759:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:05:36,786:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:05:36,869:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:05:37,527:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:05:38,657:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:05:38,657:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:05:38,716:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:05:38,745:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:05:39,369:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:05:39,369:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:05:39,435:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:05:39,462:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:05:39,559:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:05:39,982:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:05:39,982:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:05:40,049:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:05:40,073:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:05:40,264:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:05:40,811:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:06:27,003:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:06:27,004:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:06:27,062:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:06:27,085:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:06:27,239:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:06:27,239:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:06:27,311:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:06:27,354:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:06:28,023:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:06:28,024:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:06:28,086:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:06:28,110:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:06:29,450:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:06:29,450:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:06:29,527:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:06:29,558:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:06:30,615:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:06:31,132:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:06:31,132:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:06:31,222:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:06:31,258:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:06:32,118:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:06:32,118:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:06:32,165:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:06:32,192:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:06:32,244:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:06:33,023:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:06:52,297:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:06:52,297:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:06:52,367:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:06:52,390:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:06:54,743:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:06:54,744:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:06:54,807:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:06:54,831:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:06:55,656:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:07:15,129:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:07:15,130:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:07:15,194:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:07:15,218:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:07:17,752:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:07:17,753:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:07:17,829:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:07:17,859:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:07:18,698:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:07:24,299:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:07:24,299:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:07:24,386:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:07:24,412:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:07:25,059:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:07:25,059:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:07:25,127:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:07:25,157:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:07:26,899:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:07:26,899:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:07:26,974:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:07:26,994:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:07:27,716:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:07:27,970:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:07:27,971:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:07:28,042:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:07:28,065:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:07:28,783:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:07:37,726:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:07:37,726:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:07:37,796:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:07:37,823:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:07:40,335:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:07:40,335:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:07:40,396:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:07:40,434:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:07:41,175:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:07:45,001:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:07:45,002:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:07:45,051:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:07:45,078:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:07:45,971:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:07:45,971:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:07:46,044:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:07:46,080:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:07:47,334:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:07:47,334:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:07:47,413:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:07:47,478:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:07:48,210:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:07:48,838:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:07:48,838:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:07:48,920:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:07:48,944:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:07:49,812:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:08:26,053:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:08:26,054:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:08:26,094:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:08:26,094:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:08:26,111:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:08:26,139:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:08:26,149:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:08:26,181:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:08:26,460:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:08:26,460:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:08:26,517:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:08:26,542:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:08:27,128:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:08:27,129:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:08:27,187:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:08:27,220:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:08:27,847:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:08:27,847:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:08:28,235:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:08:28,270:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:08:29,244:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:08:29,244:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:08:29,347:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:08:29,391:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:08:31,086:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:08:31,092:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:08:31,092:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:08:31,316:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:08:31,414:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:08:32,064:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:08:32,064:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:08:32,209:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:08:32,254:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:08:32,740:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:08:32,740:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:08:32,855:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:08:32,886:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:08:32,887:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:08:33,145:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:08:33,145:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:08:33,198:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:08:33,266:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:08:33,341:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:08:33,914:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:08:34,413:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:09:35,491:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:09:35,491:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:09:35,570:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:09:35,602:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:09:40,539:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:09:40,540:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:09:40,654:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:09:40,693:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:09:42,103:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:09:45,545:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:09:45,545:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:09:45,609:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:09:45,636:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:09:46,948:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:09:46,950:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:09:47,027:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:09:47,055:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:09:48,172:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:09:48,172:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:09:48,261:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:09:48,314:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:09:49,225:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:09:49,832:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:09:49,832:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:09:49,888:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:09:49,919:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:09:50,685:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:10:27,987:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:10:27,988:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:10:28,054:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:10:28,102:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:10:29,716:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:10:29,717:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:10:29,808:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:10:29,848:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:10:30,531:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:10:30,531:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:10:30,580:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:10:30,603:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:10:31,386:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:10:32,515:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:10:32,515:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:10:32,580:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:10:32,607:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:10:33,302:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:12:33,788:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:12:33,789:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:12:33,859:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:12:33,884:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:12:36,497:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:12:36,497:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:12:36,565:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:12:36,594:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:12:37,361:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:13:12,258:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:13:12,259:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:13:12,303:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:13:12,335:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:13:12,586:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:13:12,586:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:13:12,637:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:13:12,660:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:13:14,622:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:13:14,623:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:13:14,694:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:13:14,717:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:13:15,546:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:13:15,793:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:13:15,793:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:13:15,870:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:13:15,915:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:13:16,701:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:13:42,095:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:13:42,096:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:13:42,153:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:13:42,176:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:13:44,733:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:13:44,733:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:13:44,798:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:13:44,840:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:13:45,548:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:14:11,185:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:14:11,186:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:14:11,271:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:14:11,310:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:14:13,877:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:14:13,877:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:14:13,936:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:14:13,962:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:14:14,698:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:14:40,829:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:14:40,829:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:14:40,887:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:14:40,918:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:14:43,712:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:14:43,712:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:14:43,783:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:14:43,807:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:14:44,611:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:14:45,546:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:14:45,546:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:14:45,624:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:14:45,656:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:14:45,737:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:14:45,737:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:14:45,787:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:14:45,804:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:14:47,081:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:14:47,082:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:14:47,141:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:14:47,166:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:14:48,006:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:14:48,006:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:14:48,062:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:14:48,086:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:14:48,858:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:14:48,911:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:14:48,911:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:14:48,975:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:14:49,014:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:14:49,850:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:14:50,770:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:14:50,771:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:14:50,869:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:14:50,915:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:14:51,611:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:15:01,385:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:01,385:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:01,446:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:01,468:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:03,843:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:03,843:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:03,902:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:03,924:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:04,590:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:15:05,945:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:05,945:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:06,016:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:06,043:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:07,179:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:07,180:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:07,232:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:07,262:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:08,961:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:08,961:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:09,038:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:09,066:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:09,794:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:15:10,422:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:10,422:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:10,493:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:10,522:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:11,057:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:11,057:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:11,110:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:11,134:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:11,220:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:15:13,614:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:13,614:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:13,671:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:13,701:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:14,437:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:15:15,508:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:15,508:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:15,575:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:15,610:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:17,732:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:17,733:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:17,800:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:17,817:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:18,583:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:15:21,022:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:21,022:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:21,093:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:21,114:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:23,911:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:23,912:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:23,974:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:24,014:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:24,748:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:15:25,877:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:25,877:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:25,921:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:25,944:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:27,013:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:27,014:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:27,083:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:27,112:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:28,210:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:28,210:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:28,280:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:28,313:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:29,147:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:15:30,177:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:30,178:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:30,235:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:30,256:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:30,933:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:15:38,857:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:38,858:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:38,922:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:38,948:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:42,069:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:42,069:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:42,128:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:42,153:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:42,848:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:15:50,590:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:50,591:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:50,662:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:50,686:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:53,348:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:53,348:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:53,405:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:53,426:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:54,156:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:15:56,484:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:56,484:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:56,530:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:56,553:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:59,074:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:15:59,076:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:15:59,133:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:15:59,180:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:15:59,956:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:16:08,830:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:16:08,831:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:16:08,886:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:16:08,913:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:16:11,369:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:16:11,369:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:16:11,446:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:16:11,476:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:16:12,167:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:16:20,446:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:16:20,446:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:16:20,520:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:16:20,551:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:16:22,538:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:16:22,539:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:16:22,601:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:16:22,629:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:16:23,488:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:16:25,760:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:16:25,760:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:16:25,827:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:16:25,858:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:16:36,270:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:16:36,271:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:16:36,328:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:16:36,347:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:16:45,645:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:16:45,645:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:16:45,702:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:16:45,733:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:24,176:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:24,177:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:24,235:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:24,263:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:27,760:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:27,760:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:27,805:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:27,822:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:29,566:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:29,566:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:29,604:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:29,621:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:33,344:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:33,344:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:33,383:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:33,399:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:35,502:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:35,502:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:35,539:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:35,556:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:35,691:INFO:best_params: {'actual_estimator__subsample': 0.7, 'actual_estimator__scale_pos_weight': 37.80000000000001, 'actual_estimator__reg_lambda': 1e-07, 'actual_estimator__reg_alpha': 0.4, 'actual_estimator__n_estimators': 50, 'actual_estimator__min_child_weight': 2, 'actual_estimator__max_depth': 1, 'actual_estimator__learning_rate': 0.5, 'actual_estimator__colsample_bytree': 0.9}
2024-07-02 10:19:35,694:INFO:Hyperparameter search completed
2024-07-02 10:19:35,694:INFO:SubProcess create_model() called ==================================
2024-07-02 10:19:35,696:INFO:Initializing create_model()
2024-07-02 10:19:35,696:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, feature_types=None, gamma=0, gpu_id=-1,
              grow_policy='depthwise', importance_type=None,
              interaction_constraints='', learning_rate=0.300000012,
              max_bin=256, max_cat_threshold=64, max_cat_to_onehot=4,
              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,
              missing=nan, monotone_constraints='()', n_estimators=100,
              n_jobs=-1, num_parallel_tree=1, objective='binary:logistic',
              predictor='auto', ...), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32822b0d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'subsample': 0.7, 'scale_pos_weight': 37.80000000000001, 'reg_lambda': 1e-07, 'reg_alpha': 0.4, 'n_estimators': 50, 'min_child_weight': 2, 'max_depth': 1, 'learning_rate': 0.5, 'colsample_bytree': 0.9})
2024-07-02 10:19:35,696:INFO:Checking exceptions
2024-07-02 10:19:35,696:INFO:Importing libraries
2024-07-02 10:19:35,696:INFO:Copying training dataset
2024-07-02 10:19:36,929:INFO:Defining folds
2024-07-02 10:19:36,929:INFO:Declaring metric variables
2024-07-02 10:19:36,932:INFO:Importing untrained model
2024-07-02 10:19:36,932:INFO:Declaring custom model
2024-07-02 10:19:36,936:INFO:Extreme Gradient Boosting Imported successfully
2024-07-02 10:19:36,938:INFO:Starting cross validation
2024-07-02 10:19:36,945:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 10:19:38,344:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:38,344:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:38,384:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:38,406:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:38,889:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:38,889:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:38,944:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:38,967:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:39,083:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:19:39,434:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:39,438:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:39,518:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:39,542:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:39,766:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:19:40,040:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:40,041:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:40,102:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:40,131:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:40,264:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:19:40,755:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:19:40,983:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:40,983:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:41,031:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:41,048:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:41,661:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:19:51,122:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:51,123:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:51,170:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:51,187:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:51,300:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:51,300:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:51,368:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:51,386:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:51,991:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:51,991:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:52,035:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:52,052:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:52,153:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:52,153:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:52,191:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:52,209:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:52,263:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:52,264:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:52,304:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:52,321:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:52,420:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:52,420:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:52,459:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:52,476:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:52,586:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:52,587:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:52,625:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:52,641:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:52,736:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:52,736:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:52,774:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:52,791:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:53,306:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:53,306:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:53,344:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:53,360:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:53,453:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:53,453:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:53,489:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:53,506:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:53,608:INFO:Calculating mean and std
2024-07-02 10:19:53,611:INFO:Creating metrics dataframe
2024-07-02 10:19:53,617:INFO:Finalizing model
2024-07-02 10:19:54,381:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:19:54,381:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:19:54,418:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:19:54,434:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:19:54,608:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:19:57,653:INFO:Uploading results into container
2024-07-02 10:19:57,654:INFO:Uploading model into container now
2024-07-02 10:19:57,654:INFO:_master_model_container: 22
2024-07-02 10:19:57,655:INFO:_display_container: 17
2024-07-02 10:19:57,656:INFO:XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.9,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, feature_types=None, gamma=0, gpu_id=-1,
              grow_policy='depthwise', importance_type=None,
              interaction_constraints='', learning_rate=0.5, max_bin=256,
              max_cat_threshold=64, max_cat_to_onehot=4, max_delta_step=0,
              max_depth=1, max_leaves=0, min_child_weight=2, missing=nan,
              monotone_constraints='()', n_estimators=50, n_jobs=-1,
              num_parallel_tree=1, objective='binary:logistic',
              predictor='auto', ...)
2024-07-02 10:19:57,656:INFO:create_model() successfully completed......................................
2024-07-02 10:19:57,750:INFO:SubProcess create_model() end ==================================
2024-07-02 10:19:57,750:INFO:choose_better activated
2024-07-02 10:19:57,752:INFO:SubProcess create_model() called ==================================
2024-07-02 10:19:57,753:INFO:Initializing create_model()
2024-07-02 10:19:57,753:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, feature_types=None, gamma=0, gpu_id=-1,
              grow_policy='depthwise', importance_type=None,
              interaction_constraints='', learning_rate=0.300000012,
              max_bin=256, max_cat_threshold=64, max_cat_to_onehot=4,
              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,
              missing=nan, monotone_constraints='()', n_estimators=100,
              n_jobs=-1, num_parallel_tree=1, objective='binary:logistic',
              predictor='auto', ...), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 10:19:57,753:INFO:Checking exceptions
2024-07-02 10:19:57,754:INFO:Importing libraries
2024-07-02 10:19:57,754:INFO:Copying training dataset
2024-07-02 10:19:58,913:INFO:Defining folds
2024-07-02 10:19:58,913:INFO:Declaring metric variables
2024-07-02 10:19:58,913:INFO:Importing untrained model
2024-07-02 10:19:58,914:INFO:Declaring custom model
2024-07-02 10:19:58,915:INFO:Extreme Gradient Boosting Imported successfully
2024-07-02 10:19:58,915:INFO:Starting cross validation
2024-07-02 10:19:58,921:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 10:20:00,339:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:20:00,340:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:20:00,379:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:20:00,400:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:20:00,782:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:20:00,782:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:20:00,824:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:20:00,843:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:20:00,990:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:20:01,586:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:20:01,586:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:20:01,615:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:20:01,633:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:20:01,660:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:20:02,301:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:20:02,301:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:20:02,340:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:20:02,360:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:20:02,394:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:20:02,800:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:20:02,800:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:20:02,844:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:20:02,863:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:20:02,987:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:20:03,449:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:22:16,869:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:22:16,872:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:22:16,922:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:22:16,939:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:22:17,075:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:22:17,076:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:22:17,122:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:22:17,151:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:22:17,817:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:22:17,817:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:22:17,855:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:22:17,872:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:22:17,999:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:22:18,000:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:22:18,036:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:22:18,036:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:22:18,048:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:22:18,068:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:22:18,074:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:22:18,092:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:22:18,211:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:22:18,211:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:22:18,249:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:22:18,266:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:22:18,839:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:22:18,839:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:22:18,877:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:22:18,893:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:22:19,015:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:22:19,015:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:22:19,052:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:22:19,069:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:22:20,869:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:22:20,869:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:22:20,918:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:22:20,953:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:22:21,176:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:22:21,176:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:22:21,213:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:22:21,229:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:22:21,346:INFO:Calculating mean and std
2024-07-02 10:22:21,347:INFO:Creating metrics dataframe
2024-07-02 10:22:21,350:INFO:Finalizing model
2024-07-02 10:22:22,094:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 10:22:22,094:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 10:22:22,130:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 10:22:22,147:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 10:22:22,315:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 10:22:55,273:INFO:Uploading results into container
2024-07-02 10:22:55,274:INFO:Uploading model into container now
2024-07-02 10:22:55,275:INFO:_master_model_container: 23
2024-07-02 10:22:55,275:INFO:_display_container: 18
2024-07-02 10:22:55,276:INFO:XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, feature_types=None, gamma=0, gpu_id=-1,
              grow_policy='depthwise', importance_type=None,
              interaction_constraints='', learning_rate=0.300000012,
              max_bin=256, max_cat_threshold=64, max_cat_to_onehot=4,
              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,
              missing=nan, monotone_constraints='()', n_estimators=100,
              n_jobs=-1, num_parallel_tree=1, objective='binary:logistic',
              predictor='auto', ...)
2024-07-02 10:22:55,276:INFO:create_model() successfully completed......................................
2024-07-02 10:22:55,379:INFO:SubProcess create_model() end ==================================
2024-07-02 10:22:55,380:INFO:XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, feature_types=None, gamma=0, gpu_id=-1,
              grow_policy='depthwise', importance_type=None,
              interaction_constraints='', learning_rate=0.300000012,
              max_bin=256, max_cat_threshold=64, max_cat_to_onehot=4,
              max_delta_step=0, max_depth=6, max_leaves=0, min_child_weight=1,
              missing=nan, monotone_constraints='()', n_estimators=100,
              n_jobs=-1, num_parallel_tree=1, objective='binary:logistic',
              predictor='auto', ...) result for BA is 0.7232
2024-07-02 10:22:55,381:INFO:XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.9,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, feature_types=None, gamma=0, gpu_id=-1,
              grow_policy='depthwise', importance_type=None,
              interaction_constraints='', learning_rate=0.5, max_bin=256,
              max_cat_threshold=64, max_cat_to_onehot=4, max_delta_step=0,
              max_depth=1, max_leaves=0, min_child_weight=2, missing=nan,
              monotone_constraints='()', n_estimators=50, n_jobs=-1,
              num_parallel_tree=1, objective='binary:logistic',
              predictor='auto', ...) result for BA is 0.8552
2024-07-02 10:22:55,382:INFO:XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.9,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, feature_types=None, gamma=0, gpu_id=-1,
              grow_policy='depthwise', importance_type=None,
              interaction_constraints='', learning_rate=0.5, max_bin=256,
              max_cat_threshold=64, max_cat_to_onehot=4, max_delta_step=0,
              max_depth=1, max_leaves=0, min_child_weight=2, missing=nan,
              monotone_constraints='()', n_estimators=50, n_jobs=-1,
              num_parallel_tree=1, objective='binary:logistic',
              predictor='auto', ...) is best model
2024-07-02 10:22:55,382:INFO:choose_better completed
2024-07-02 10:22:55,387:INFO:_master_model_container: 23
2024-07-02 10:22:55,387:INFO:_display_container: 17
2024-07-02 10:22:55,389:INFO:XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.9,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, feature_types=None, gamma=0, gpu_id=-1,
              grow_policy='depthwise', importance_type=None,
              interaction_constraints='', learning_rate=0.5, max_bin=256,
              max_cat_threshold=64, max_cat_to_onehot=4, max_delta_step=0,
              max_depth=1, max_leaves=0, min_child_weight=2, missing=nan,
              monotone_constraints='()', n_estimators=50, n_jobs=-1,
              num_parallel_tree=1, objective='binary:logistic',
              predictor='auto', ...)
2024-07-02 10:22:55,389:INFO:tune_model() successfully completed......................................
2024-07-02 10:22:55,495:INFO:Initializing save_model()
2024-07-02 10:22:55,495:INFO:save_model(model=XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.9,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, feature_types=None, gamma=0, gpu_id=-1,
              grow_policy='depthwise', importance_type=None,
              interaction_constraints='', learning_rate=0.5, max_bin=256,
              max_cat_threshold=64, max_cat_to_onehot=4, max_delta_step=0,
              max_depth=1, max_leaves=0, min_child_weight=2, missing=nan,
              monotone_constraints='()', n_estimators=50, n_jobs=-1,
              num_parallel_tree=1, objective='binary:logistic',
              predictor='auto', ...), model_name=../pycaret/saved_xgboost_model, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-07-02 10:22:55,495:INFO:Adding model into prep_pipe
2024-07-02 10:22:55,527:INFO:../pycaret/saved_xgboost_model.pkl saved in current working directory
2024-07-02 10:22:55,545:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tissue',
                                             'Orthologs count',
                                             'Driver_genes_MUT (all)',
                                             'Driver_g...
                               grow_policy='depthwise', importance_type=None,
                               interaction_constraints='', learning_rate=0.5,
                               max_bin=256, max_cat_threshold=64,
                               max_cat_to_onehot=4, max_delta_step=0,
                               max_depth=1, max_leaves=0, min_child_weight=2,
                               missing=nan, monotone_constraints='()',
                               n_estimators=50, n_jobs=-1, num_parallel_tree=1,
                               objective='binary:logistic', predictor='auto', ...))],
         verbose=False)
2024-07-02 10:22:55,545:INFO:save_model() successfully completed......................................
2024-07-02 10:22:55,610:INFO:Initializing create_model()
2024-07-02 10:22:55,610:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=ada, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 10:22:55,610:INFO:Checking exceptions
2024-07-02 10:22:55,617:INFO:Importing libraries
2024-07-02 10:22:55,618:INFO:Copying training dataset
2024-07-02 10:22:56,742:INFO:Defining folds
2024-07-02 10:22:56,742:INFO:Declaring metric variables
2024-07-02 10:22:56,744:INFO:Importing untrained model
2024-07-02 10:22:56,746:INFO:Ada Boost Classifier Imported successfully
2024-07-02 10:22:56,749:INFO:Starting cross validation
2024-07-02 10:22:56,756:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 10:22:58,259:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 10:22:58,972:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 10:22:59,574:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 10:23:00,452:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 10:23:01,201:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 10:23:25,897:INFO:Calculating mean and std
2024-07-02 10:23:25,900:INFO:Creating metrics dataframe
2024-07-02 10:23:25,906:INFO:Finalizing model
2024-07-02 10:23:26,837:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 10:23:49,508:INFO:Uploading results into container
2024-07-02 10:23:49,509:INFO:Uploading model into container now
2024-07-02 10:23:49,514:INFO:_master_model_container: 24
2024-07-02 10:23:49,514:INFO:_display_container: 18
2024-07-02 10:23:49,514:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=444)
2024-07-02 10:23:49,514:INFO:create_model() successfully completed......................................
2024-07-02 10:23:49,600:INFO:Initializing tune_model()
2024-07-02 10:23:49,601:INFO:tune_model(estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=444), fold=None, round=4, n_iter=10, custom_grid=None, optimize=BA, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=True, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>)
2024-07-02 10:23:49,601:INFO:Checking exceptions
2024-07-02 10:23:50,019:INFO:Copying training dataset
2024-07-02 10:23:50,744:INFO:Checking base model
2024-07-02 10:23:50,744:INFO:Base model : Ada Boost Classifier
2024-07-02 10:23:50,746:INFO:Declaring metric variables
2024-07-02 10:23:50,748:INFO:Defining Hyperparameters
2024-07-02 10:23:50,826:INFO:Tuning with n_jobs=-1
2024-07-02 10:23:50,826:INFO:Initializing RandomizedSearchCV
2024-07-02 10:31:39,640:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/joblib/externals/loky/process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(

2024-07-02 10:33:46,860:INFO:best_params: {'actual_estimator__n_estimators': 280, 'actual_estimator__learning_rate': 0.4, 'actual_estimator__algorithm': 'SAMME'}
2024-07-02 10:33:46,866:INFO:Hyperparameter search completed
2024-07-02 10:33:46,866:INFO:SubProcess create_model() called ==================================
2024-07-02 10:33:46,868:INFO:Initializing create_model()
2024-07-02 10:33:46,870:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=444), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x328517850>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 280, 'learning_rate': 0.4, 'algorithm': 'SAMME'})
2024-07-02 10:33:46,871:INFO:Checking exceptions
2024-07-02 10:33:46,871:INFO:Importing libraries
2024-07-02 10:33:46,872:INFO:Copying training dataset
2024-07-02 10:33:48,155:INFO:Defining folds
2024-07-02 10:33:48,155:INFO:Declaring metric variables
2024-07-02 10:33:48,158:INFO:Importing untrained model
2024-07-02 10:33:48,158:INFO:Declaring custom model
2024-07-02 10:33:48,161:INFO:Ada Boost Classifier Imported successfully
2024-07-02 10:33:48,164:INFO:Starting cross validation
2024-07-02 10:33:48,171:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 10:35:53,531:INFO:Calculating mean and std
2024-07-02 10:35:53,533:INFO:Creating metrics dataframe
2024-07-02 10:35:53,540:INFO:Finalizing model
2024-07-02 10:37:58,005:INFO:Uploading results into container
2024-07-02 10:37:58,007:INFO:Uploading model into container now
2024-07-02 10:37:58,007:INFO:_master_model_container: 25
2024-07-02 10:37:58,008:INFO:_display_container: 19
2024-07-02 10:37:58,008:INFO:AdaBoostClassifier(algorithm='SAMME', estimator=None, learning_rate=0.4,
                   n_estimators=280, random_state=444)
2024-07-02 10:37:58,008:INFO:create_model() successfully completed......................................
2024-07-02 10:37:58,118:INFO:SubProcess create_model() end ==================================
2024-07-02 10:37:58,118:INFO:choose_better activated
2024-07-02 10:37:58,120:INFO:SubProcess create_model() called ==================================
2024-07-02 10:37:58,120:INFO:Initializing create_model()
2024-07-02 10:37:58,120:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=444), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 10:37:58,121:INFO:Checking exceptions
2024-07-02 10:37:58,122:INFO:Importing libraries
2024-07-02 10:37:58,122:INFO:Copying training dataset
2024-07-02 10:37:59,493:INFO:Defining folds
2024-07-02 10:37:59,493:INFO:Declaring metric variables
2024-07-02 10:37:59,493:INFO:Importing untrained model
2024-07-02 10:37:59,493:INFO:Declaring custom model
2024-07-02 10:37:59,493:INFO:Ada Boost Classifier Imported successfully
2024-07-02 10:37:59,493:INFO:Starting cross validation
2024-07-02 10:37:59,499:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 10:38:01,143:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 10:38:01,669:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 10:38:02,085:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 10:38:02,793:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 10:38:03,447:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 10:38:23,739:INFO:Calculating mean and std
2024-07-02 10:38:23,740:INFO:Creating metrics dataframe
2024-07-02 10:38:23,743:INFO:Finalizing model
2024-07-02 10:38:24,574:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 10:38:45,665:INFO:Uploading results into container
2024-07-02 10:38:45,666:INFO:Uploading model into container now
2024-07-02 10:38:45,666:INFO:_master_model_container: 26
2024-07-02 10:38:45,666:INFO:_display_container: 20
2024-07-02 10:38:45,666:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=444)
2024-07-02 10:38:45,666:INFO:create_model() successfully completed......................................
2024-07-02 10:38:45,744:INFO:SubProcess create_model() end ==================================
2024-07-02 10:38:45,745:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=444) result for BA is 0.7356
2024-07-02 10:38:45,745:INFO:AdaBoostClassifier(algorithm='SAMME', estimator=None, learning_rate=0.4,
                   n_estimators=280, random_state=444) result for BA is 0.6921
2024-07-02 10:38:45,745:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=444) is best model
2024-07-02 10:38:45,745:INFO:choose_better completed
2024-07-02 10:38:45,745:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-07-02 10:38:45,750:INFO:_master_model_container: 26
2024-07-02 10:38:45,750:INFO:_display_container: 19
2024-07-02 10:38:45,750:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=444)
2024-07-02 10:38:45,750:INFO:tune_model() successfully completed......................................
2024-07-02 10:38:45,850:INFO:Initializing save_model()
2024-07-02 10:38:45,850:INFO:save_model(model=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=444), model_name=../pycaret/saved_ada_model, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-07-02 10:38:45,850:INFO:Adding model into prep_pipe
2024-07-02 10:38:45,888:INFO:../pycaret/saved_ada_model.pkl saved in current working directory
2024-07-02 10:38:45,902:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tissue',
                                             'Orthologs count',
                                             'Driver_genes_MUT (all)',
                                             'Driver_g...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=444))],
         verbose=False)
2024-07-02 10:38:45,902:INFO:save_model() successfully completed......................................
2024-07-02 10:38:45,962:INFO:Initializing create_model()
2024-07-02 10:38:45,963:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 10:38:45,963:INFO:Checking exceptions
2024-07-02 10:38:45,969:INFO:Importing libraries
2024-07-02 10:38:45,969:INFO:Copying training dataset
2024-07-02 10:38:47,089:INFO:Defining folds
2024-07-02 10:38:47,089:INFO:Declaring metric variables
2024-07-02 10:38:47,092:INFO:Importing untrained model
2024-07-02 10:38:47,094:INFO:Random Forest Classifier Imported successfully
2024-07-02 10:38:47,096:INFO:Starting cross validation
2024-07-02 10:38:47,102:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 10:39:00,758:INFO:Calculating mean and std
2024-07-02 10:39:00,760:INFO:Creating metrics dataframe
2024-07-02 10:39:00,767:INFO:Finalizing model
2024-07-02 10:39:04,577:INFO:Uploading results into container
2024-07-02 10:39:04,578:INFO:Uploading model into container now
2024-07-02 10:39:04,582:INFO:_master_model_container: 27
2024-07-02 10:39:04,582:INFO:_display_container: 20
2024-07-02 10:39:04,582:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=444, verbose=0,
                       warm_start=False)
2024-07-02 10:39:04,582:INFO:create_model() successfully completed......................................
2024-07-02 10:39:04,662:INFO:Initializing tune_model()
2024-07-02 10:39:04,663:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=444, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=BA, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=True, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>)
2024-07-02 10:39:04,663:INFO:Checking exceptions
2024-07-02 10:39:05,075:INFO:Copying training dataset
2024-07-02 10:39:05,784:INFO:Checking base model
2024-07-02 10:39:05,784:INFO:Base model : Random Forest Classifier
2024-07-02 10:39:05,786:INFO:Declaring metric variables
2024-07-02 10:39:05,787:INFO:Defining Hyperparameters
2024-07-02 10:39:05,860:INFO:Tuning with n_jobs=-1
2024-07-02 10:39:05,860:INFO:Initializing RandomizedSearchCV
2024-07-02 10:53:20,085:INFO:best_params: {'actual_estimator__n_estimators': 50, 'actual_estimator__min_samples_split': 5, 'actual_estimator__min_samples_leaf': 6, 'actual_estimator__min_impurity_decrease': 0.01, 'actual_estimator__max_features': 'sqrt', 'actual_estimator__max_depth': 6, 'actual_estimator__criterion': 'gini', 'actual_estimator__class_weight': 'balanced', 'actual_estimator__bootstrap': False}
2024-07-02 10:53:20,088:INFO:Hyperparameter search completed
2024-07-02 10:53:20,088:INFO:SubProcess create_model() called ==================================
2024-07-02 10:53:20,089:INFO:Initializing create_model()
2024-07-02 10:53:20,090:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=444, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x17f8db700>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 50, 'min_samples_split': 5, 'min_samples_leaf': 6, 'min_impurity_decrease': 0.01, 'max_features': 'sqrt', 'max_depth': 6, 'criterion': 'gini', 'class_weight': 'balanced', 'bootstrap': False})
2024-07-02 10:53:20,090:INFO:Checking exceptions
2024-07-02 10:53:20,090:INFO:Importing libraries
2024-07-02 10:53:20,090:INFO:Copying training dataset
2024-07-02 10:53:21,349:INFO:Defining folds
2024-07-02 10:53:21,349:INFO:Declaring metric variables
2024-07-02 10:53:21,351:INFO:Importing untrained model
2024-07-02 10:53:21,352:INFO:Declaring custom model
2024-07-02 10:53:21,354:INFO:Random Forest Classifier Imported successfully
2024-07-02 10:53:21,356:INFO:Starting cross validation
2024-07-02 10:53:21,363:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 10:53:25,869:INFO:Calculating mean and std
2024-07-02 10:53:25,872:INFO:Creating metrics dataframe
2024-07-02 10:53:25,879:INFO:Finalizing model
2024-07-02 10:53:26,922:INFO:Uploading results into container
2024-07-02 10:53:26,923:INFO:Uploading model into container now
2024-07-02 10:53:26,924:INFO:_master_model_container: 28
2024-07-02 10:53:26,924:INFO:_display_container: 21
2024-07-02 10:53:26,924:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight='balanced',
                       criterion='gini', max_depth=6, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.01, min_samples_leaf=6,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=50, n_jobs=-1,
                       oob_score=False, random_state=444, verbose=0,
                       warm_start=False)
2024-07-02 10:53:26,924:INFO:create_model() successfully completed......................................
2024-07-02 10:53:27,030:INFO:SubProcess create_model() end ==================================
2024-07-02 10:53:27,030:INFO:choose_better activated
2024-07-02 10:53:27,032:INFO:SubProcess create_model() called ==================================
2024-07-02 10:53:27,032:INFO:Initializing create_model()
2024-07-02 10:53:27,033:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=444, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 10:53:27,033:INFO:Checking exceptions
2024-07-02 10:53:27,034:INFO:Importing libraries
2024-07-02 10:53:27,034:INFO:Copying training dataset
2024-07-02 10:53:28,122:INFO:Defining folds
2024-07-02 10:53:28,122:INFO:Declaring metric variables
2024-07-02 10:53:28,122:INFO:Importing untrained model
2024-07-02 10:53:28,122:INFO:Declaring custom model
2024-07-02 10:53:28,123:INFO:Random Forest Classifier Imported successfully
2024-07-02 10:53:28,123:INFO:Starting cross validation
2024-07-02 10:53:28,129:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 10:53:41,511:INFO:Calculating mean and std
2024-07-02 10:53:41,512:INFO:Creating metrics dataframe
2024-07-02 10:53:41,515:INFO:Finalizing model
2024-07-02 10:53:45,258:INFO:Uploading results into container
2024-07-02 10:53:45,258:INFO:Uploading model into container now
2024-07-02 10:53:45,259:INFO:_master_model_container: 29
2024-07-02 10:53:45,259:INFO:_display_container: 22
2024-07-02 10:53:45,259:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=444, verbose=0,
                       warm_start=False)
2024-07-02 10:53:45,259:INFO:create_model() successfully completed......................................
2024-07-02 10:53:45,339:INFO:SubProcess create_model() end ==================================
2024-07-02 10:53:45,339:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=444, verbose=0,
                       warm_start=False) result for BA is 0.6602
2024-07-02 10:53:45,340:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight='balanced',
                       criterion='gini', max_depth=6, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.01, min_samples_leaf=6,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=50, n_jobs=-1,
                       oob_score=False, random_state=444, verbose=0,
                       warm_start=False) result for BA is 0.8197
2024-07-02 10:53:45,340:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight='balanced',
                       criterion='gini', max_depth=6, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.01, min_samples_leaf=6,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=50, n_jobs=-1,
                       oob_score=False, random_state=444, verbose=0,
                       warm_start=False) is best model
2024-07-02 10:53:45,340:INFO:choose_better completed
2024-07-02 10:53:45,344:INFO:_master_model_container: 29
2024-07-02 10:53:45,344:INFO:_display_container: 21
2024-07-02 10:53:45,344:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight='balanced',
                       criterion='gini', max_depth=6, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.01, min_samples_leaf=6,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=50, n_jobs=-1,
                       oob_score=False, random_state=444, verbose=0,
                       warm_start=False)
2024-07-02 10:53:45,344:INFO:tune_model() successfully completed......................................
2024-07-02 10:53:45,444:INFO:Initializing save_model()
2024-07-02 10:53:45,444:INFO:save_model(model=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight='balanced',
                       criterion='gini', max_depth=6, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.01, min_samples_leaf=6,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=50, n_jobs=-1,
                       oob_score=False, random_state=444, verbose=0,
                       warm_start=False), model_name=../pycaret/saved_rf_model, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-07-02 10:53:45,444:INFO:Adding model into prep_pipe
2024-07-02 10:53:45,483:INFO:../pycaret/saved_rf_model.pkl saved in current working directory
2024-07-02 10:53:45,497:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tissue',
                                             'Orthologs count',
                                             'Driver_genes_MUT (all)',
                                             'Driver_g...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='gini', max_depth=6,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.01,
                                        min_samples_leaf=6, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=50,
                                        n_jobs=-1, oob_score=False,
                                        random_state=444, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-07-02 10:53:45,497:INFO:save_model() successfully completed......................................
2024-07-02 10:53:45,557:INFO:Initializing create_model()
2024-07-02 10:53:45,557:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=lda, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 10:53:45,557:INFO:Checking exceptions
2024-07-02 10:53:45,564:INFO:Importing libraries
2024-07-02 10:53:45,564:INFO:Copying training dataset
2024-07-02 10:53:46,754:INFO:Defining folds
2024-07-02 10:53:46,754:INFO:Declaring metric variables
2024-07-02 10:53:46,756:INFO:Importing untrained model
2024-07-02 10:53:46,758:INFO:Linear Discriminant Analysis Imported successfully
2024-07-02 10:53:46,760:INFO:Starting cross validation
2024-07-02 10:53:46,766:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 10:54:20,877:INFO:Calculating mean and std
2024-07-02 10:54:20,881:INFO:Creating metrics dataframe
2024-07-02 10:54:20,887:INFO:Finalizing model
2024-07-02 10:54:36,045:INFO:Uploading results into container
2024-07-02 10:54:36,046:INFO:Uploading model into container now
2024-07-02 10:54:36,055:INFO:_master_model_container: 30
2024-07-02 10:54:36,055:INFO:_display_container: 22
2024-07-02 10:54:36,055:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-07-02 10:54:36,056:INFO:create_model() successfully completed......................................
2024-07-02 10:54:36,173:INFO:Initializing tune_model()
2024-07-02 10:54:36,173:INFO:tune_model(estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=None, round=4, n_iter=10, custom_grid=None, optimize=BA, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=True, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>)
2024-07-02 10:54:36,173:INFO:Checking exceptions
2024-07-02 10:54:36,584:INFO:Copying training dataset
2024-07-02 10:54:37,304:INFO:Checking base model
2024-07-02 10:54:37,304:INFO:Base model : Linear Discriminant Analysis
2024-07-02 10:54:37,306:INFO:Declaring metric variables
2024-07-02 10:54:37,307:INFO:Defining Hyperparameters
2024-07-02 10:54:37,379:INFO:Tuning with n_jobs=-1
2024-07-02 10:54:37,379:INFO:Initializing RandomizedSearchCV
2024-07-02 10:59:11,203:INFO:best_params: {'actual_estimator__solver': 'lsqr', 'actual_estimator__shrinkage': 0.6}
2024-07-02 10:59:11,206:INFO:Hyperparameter search completed
2024-07-02 10:59:11,207:INFO:SubProcess create_model() called ==================================
2024-07-02 10:59:11,208:INFO:Initializing create_model()
2024-07-02 10:59:11,208:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32822b0d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'solver': 'lsqr', 'shrinkage': 0.6})
2024-07-02 10:59:11,208:INFO:Checking exceptions
2024-07-02 10:59:11,208:INFO:Importing libraries
2024-07-02 10:59:11,208:INFO:Copying training dataset
2024-07-02 10:59:12,453:INFO:Defining folds
2024-07-02 10:59:12,454:INFO:Declaring metric variables
2024-07-02 10:59:12,456:INFO:Importing untrained model
2024-07-02 10:59:12,456:INFO:Declaring custom model
2024-07-02 10:59:12,458:INFO:Linear Discriminant Analysis Imported successfully
2024-07-02 10:59:12,461:INFO:Starting cross validation
2024-07-02 10:59:12,467:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 10:59:44,346:INFO:Calculating mean and std
2024-07-02 10:59:44,349:INFO:Creating metrics dataframe
2024-07-02 10:59:44,356:INFO:Finalizing model
2024-07-02 10:59:56,506:INFO:Uploading results into container
2024-07-02 10:59:56,506:INFO:Uploading model into container now
2024-07-02 10:59:56,507:INFO:_master_model_container: 31
2024-07-02 10:59:56,507:INFO:_display_container: 23
2024-07-02 10:59:56,507:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=0.6, solver='lsqr',
                           store_covariance=False, tol=0.0001)
2024-07-02 10:59:56,507:INFO:create_model() successfully completed......................................
2024-07-02 10:59:56,618:INFO:SubProcess create_model() end ==================================
2024-07-02 10:59:56,619:INFO:choose_better activated
2024-07-02 10:59:56,623:INFO:SubProcess create_model() called ==================================
2024-07-02 10:59:56,624:INFO:Initializing create_model()
2024-07-02 10:59:56,624:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 10:59:56,624:INFO:Checking exceptions
2024-07-02 10:59:56,626:INFO:Importing libraries
2024-07-02 10:59:56,626:INFO:Copying training dataset
2024-07-02 10:59:57,797:INFO:Defining folds
2024-07-02 10:59:57,797:INFO:Declaring metric variables
2024-07-02 10:59:57,797:INFO:Importing untrained model
2024-07-02 10:59:57,797:INFO:Declaring custom model
2024-07-02 10:59:57,797:INFO:Linear Discriminant Analysis Imported successfully
2024-07-02 10:59:57,797:INFO:Starting cross validation
2024-07-02 10:59:57,804:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:00:32,152:INFO:Calculating mean and std
2024-07-02 11:00:32,153:INFO:Creating metrics dataframe
2024-07-02 11:00:32,156:INFO:Finalizing model
2024-07-02 11:00:46,257:INFO:Uploading results into container
2024-07-02 11:00:46,258:INFO:Uploading model into container now
2024-07-02 11:00:46,258:INFO:_master_model_container: 32
2024-07-02 11:00:46,258:INFO:_display_container: 24
2024-07-02 11:00:46,259:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-07-02 11:00:46,259:INFO:create_model() successfully completed......................................
2024-07-02 11:00:46,362:INFO:SubProcess create_model() end ==================================
2024-07-02 11:00:46,362:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001) result for BA is 0.7085
2024-07-02 11:00:46,362:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=0.6, solver='lsqr',
                           store_covariance=False, tol=0.0001) result for BA is 0.795
2024-07-02 11:00:46,362:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=0.6, solver='lsqr',
                           store_covariance=False, tol=0.0001) is best model
2024-07-02 11:00:46,362:INFO:choose_better completed
2024-07-02 11:00:46,371:INFO:_master_model_container: 32
2024-07-02 11:00:46,371:INFO:_display_container: 23
2024-07-02 11:00:46,371:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=0.6, solver='lsqr',
                           store_covariance=False, tol=0.0001)
2024-07-02 11:00:46,371:INFO:tune_model() successfully completed......................................
2024-07-02 11:00:46,513:INFO:Initializing save_model()
2024-07-02 11:00:46,513:INFO:save_model(model=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=0.6, solver='lsqr',
                           store_covariance=False, tol=0.0001), model_name=../pycaret/saved_lda_model, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-07-02 11:00:46,513:INFO:Adding model into prep_pipe
2024-07-02 11:00:46,689:INFO:../pycaret/saved_lda_model.pkl saved in current working directory
2024-07-02 11:00:46,704:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tissue',
                                             'Orthologs count',
                                             'Driver_genes_MUT (all)',
                                             'Driver_g...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=0.6, solver='lsqr',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False)
2024-07-02 11:00:46,704:INFO:save_model() successfully completed......................................
2024-07-02 11:00:46,767:INFO:Initializing create_model()
2024-07-02 11:00:46,767:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:00:46,767:INFO:Checking exceptions
2024-07-02 11:00:46,775:INFO:Importing libraries
2024-07-02 11:00:46,775:INFO:Copying training dataset
2024-07-02 11:00:47,860:INFO:Defining folds
2024-07-02 11:00:47,860:INFO:Declaring metric variables
2024-07-02 11:00:47,862:INFO:Importing untrained model
2024-07-02 11:00:47,864:INFO:Logistic Regression Imported successfully
2024-07-02 11:00:47,866:INFO:Starting cross validation
2024-07-02 11:00:47,872:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:00:55,718:INFO:Calculating mean and std
2024-07-02 11:00:55,721:INFO:Creating metrics dataframe
2024-07-02 11:00:55,728:INFO:Finalizing model
2024-07-02 11:00:59,561:INFO:Uploading results into container
2024-07-02 11:00:59,561:INFO:Uploading model into container now
2024-07-02 11:00:59,566:INFO:_master_model_container: 33
2024-07-02 11:00:59,566:INFO:_display_container: 24
2024-07-02 11:00:59,566:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=444, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-07-02 11:00:59,566:INFO:create_model() successfully completed......................................
2024-07-02 11:00:59,735:INFO:Initializing tune_model()
2024-07-02 11:00:59,736:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=444, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=BA, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=True, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>)
2024-07-02 11:00:59,736:INFO:Checking exceptions
2024-07-02 11:01:00,293:INFO:Copying training dataset
2024-07-02 11:01:00,974:INFO:Checking base model
2024-07-02 11:01:00,974:INFO:Base model : Logistic Regression
2024-07-02 11:01:00,976:INFO:Declaring metric variables
2024-07-02 11:01:00,977:INFO:Defining Hyperparameters
2024-07-02 11:01:01,050:INFO:Tuning with n_jobs=-1
2024-07-02 11:01:01,051:INFO:Initializing RandomizedSearchCV
2024-07-02 11:02:00,448:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 2.396}
2024-07-02 11:02:00,452:INFO:Hyperparameter search completed
2024-07-02 11:02:00,453:INFO:SubProcess create_model() called ==================================
2024-07-02 11:02:00,454:INFO:Initializing create_model()
2024-07-02 11:02:00,454:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=444, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x10b27ec50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 2.396})
2024-07-02 11:02:00,454:INFO:Checking exceptions
2024-07-02 11:02:00,455:INFO:Importing libraries
2024-07-02 11:02:00,455:INFO:Copying training dataset
2024-07-02 11:02:01,677:INFO:Defining folds
2024-07-02 11:02:01,678:INFO:Declaring metric variables
2024-07-02 11:02:01,680:INFO:Importing untrained model
2024-07-02 11:02:01,680:INFO:Declaring custom model
2024-07-02 11:02:01,682:INFO:Logistic Regression Imported successfully
2024-07-02 11:02:01,685:INFO:Starting cross validation
2024-07-02 11:02:01,691:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:02:09,223:INFO:Calculating mean and std
2024-07-02 11:02:09,225:INFO:Creating metrics dataframe
2024-07-02 11:02:09,233:INFO:Finalizing model
2024-07-02 11:02:13,356:INFO:Uploading results into container
2024-07-02 11:02:13,357:INFO:Uploading model into container now
2024-07-02 11:02:13,357:INFO:_master_model_container: 34
2024-07-02 11:02:13,358:INFO:_display_container: 25
2024-07-02 11:02:13,359:INFO:LogisticRegression(C=2.396, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=444, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-07-02 11:02:13,359:INFO:create_model() successfully completed......................................
2024-07-02 11:02:13,474:INFO:SubProcess create_model() end ==================================
2024-07-02 11:02:13,474:INFO:choose_better activated
2024-07-02 11:02:13,478:INFO:SubProcess create_model() called ==================================
2024-07-02 11:02:13,479:INFO:Initializing create_model()
2024-07-02 11:02:13,479:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=444, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:02:13,479:INFO:Checking exceptions
2024-07-02 11:02:13,481:INFO:Importing libraries
2024-07-02 11:02:13,481:INFO:Copying training dataset
2024-07-02 11:02:14,609:INFO:Defining folds
2024-07-02 11:02:14,610:INFO:Declaring metric variables
2024-07-02 11:02:14,610:INFO:Importing untrained model
2024-07-02 11:02:14,610:INFO:Declaring custom model
2024-07-02 11:02:14,610:INFO:Logistic Regression Imported successfully
2024-07-02 11:02:14,610:INFO:Starting cross validation
2024-07-02 11:02:14,617:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:02:22,718:INFO:Calculating mean and std
2024-07-02 11:02:22,719:INFO:Creating metrics dataframe
2024-07-02 11:02:22,722:INFO:Finalizing model
2024-07-02 11:02:26,901:INFO:Uploading results into container
2024-07-02 11:02:26,902:INFO:Uploading model into container now
2024-07-02 11:02:26,902:INFO:_master_model_container: 35
2024-07-02 11:02:26,902:INFO:_display_container: 26
2024-07-02 11:02:26,902:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=444, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-07-02 11:02:26,902:INFO:create_model() successfully completed......................................
2024-07-02 11:02:27,230:INFO:SubProcess create_model() end ==================================
2024-07-02 11:02:27,230:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=444, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for BA is 0.7511
2024-07-02 11:02:27,231:INFO:LogisticRegression(C=2.396, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=444, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for BA is 0.7739
2024-07-02 11:02:27,231:INFO:LogisticRegression(C=2.396, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=444, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2024-07-02 11:02:27,231:INFO:choose_better completed
2024-07-02 11:02:27,235:INFO:_master_model_container: 35
2024-07-02 11:02:27,236:INFO:_display_container: 25
2024-07-02 11:02:27,236:INFO:LogisticRegression(C=2.396, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=444, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-07-02 11:02:27,236:INFO:tune_model() successfully completed......................................
2024-07-02 11:02:27,463:INFO:Initializing save_model()
2024-07-02 11:02:27,463:INFO:save_model(model=LogisticRegression(C=2.396, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=444, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), model_name=../pycaret/saved_lr_model, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-07-02 11:02:27,463:INFO:Adding model into prep_pipe
2024-07-02 11:02:27,515:INFO:../pycaret/saved_lr_model.pkl saved in current working directory
2024-07-02 11:02:27,530:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tissue',
                                             'Orthologs count',
                                             'Driver_genes_MUT (all)',
                                             'Driver_g...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=2.396, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=444,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-07-02 11:02:27,530:INFO:save_model() successfully completed......................................
2024-07-02 11:02:27,593:INFO:Initializing create_model()
2024-07-02 11:02:27,593:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=et, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:02:27,593:INFO:Checking exceptions
2024-07-02 11:02:27,600:INFO:Importing libraries
2024-07-02 11:02:27,600:INFO:Copying training dataset
2024-07-02 11:02:29,426:INFO:Defining folds
2024-07-02 11:02:29,426:INFO:Declaring metric variables
2024-07-02 11:02:29,428:INFO:Importing untrained model
2024-07-02 11:02:29,430:INFO:Extra Trees Classifier Imported successfully
2024-07-02 11:02:29,433:INFO:Starting cross validation
2024-07-02 11:02:29,439:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:02:38,414:INFO:Calculating mean and std
2024-07-02 11:02:38,416:INFO:Creating metrics dataframe
2024-07-02 11:02:38,424:INFO:Finalizing model
2024-07-02 11:02:40,857:INFO:Uploading results into container
2024-07-02 11:02:40,858:INFO:Uploading model into container now
2024-07-02 11:02:40,862:INFO:_master_model_container: 36
2024-07-02 11:02:40,862:INFO:_display_container: 26
2024-07-02 11:02:40,862:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=444, verbose=0,
                     warm_start=False)
2024-07-02 11:02:40,862:INFO:create_model() successfully completed......................................
2024-07-02 11:02:40,944:INFO:Initializing tune_model()
2024-07-02 11:02:40,944:INFO:tune_model(estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=444, verbose=0,
                     warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=BA, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=True, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>)
2024-07-02 11:02:40,945:INFO:Checking exceptions
2024-07-02 11:02:41,331:INFO:Copying training dataset
2024-07-02 11:02:42,010:INFO:Checking base model
2024-07-02 11:02:42,010:INFO:Base model : Extra Trees Classifier
2024-07-02 11:02:42,012:INFO:Declaring metric variables
2024-07-02 11:02:42,013:INFO:Defining Hyperparameters
2024-07-02 11:02:42,086:INFO:Tuning with n_jobs=-1
2024-07-02 11:02:42,086:INFO:Initializing RandomizedSearchCV
2024-07-02 11:05:46,720:INFO:best_params: {'actual_estimator__n_estimators': 50, 'actual_estimator__min_samples_split': 5, 'actual_estimator__min_samples_leaf': 6, 'actual_estimator__min_impurity_decrease': 0.01, 'actual_estimator__max_features': 'sqrt', 'actual_estimator__max_depth': 6, 'actual_estimator__criterion': 'gini', 'actual_estimator__class_weight': 'balanced', 'actual_estimator__bootstrap': False}
2024-07-02 11:05:46,722:INFO:Hyperparameter search completed
2024-07-02 11:05:46,722:INFO:SubProcess create_model() called ==================================
2024-07-02 11:05:46,723:INFO:Initializing create_model()
2024-07-02 11:05:46,723:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=444, verbose=0,
                     warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32822b0d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 50, 'min_samples_split': 5, 'min_samples_leaf': 6, 'min_impurity_decrease': 0.01, 'max_features': 'sqrt', 'max_depth': 6, 'criterion': 'gini', 'class_weight': 'balanced', 'bootstrap': False})
2024-07-02 11:05:46,723:INFO:Checking exceptions
2024-07-02 11:05:46,723:INFO:Importing libraries
2024-07-02 11:05:46,723:INFO:Copying training dataset
2024-07-02 11:05:47,960:INFO:Defining folds
2024-07-02 11:05:47,960:INFO:Declaring metric variables
2024-07-02 11:05:47,963:INFO:Importing untrained model
2024-07-02 11:05:47,963:INFO:Declaring custom model
2024-07-02 11:05:47,965:INFO:Extra Trees Classifier Imported successfully
2024-07-02 11:05:47,967:INFO:Starting cross validation
2024-07-02 11:05:47,974:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:05:52,172:INFO:Calculating mean and std
2024-07-02 11:05:52,174:INFO:Creating metrics dataframe
2024-07-02 11:05:52,179:INFO:Finalizing model
2024-07-02 11:05:52,986:INFO:Uploading results into container
2024-07-02 11:05:52,987:INFO:Uploading model into container now
2024-07-02 11:05:52,988:INFO:_master_model_container: 37
2024-07-02 11:05:52,988:INFO:_display_container: 27
2024-07-02 11:05:52,988:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight='balanced',
                     criterion='gini', max_depth=6, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.01, min_samples_leaf=6,
                     min_samples_split=5, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=50, n_jobs=-1,
                     oob_score=False, random_state=444, verbose=0,
                     warm_start=False)
2024-07-02 11:05:52,988:INFO:create_model() successfully completed......................................
2024-07-02 11:05:53,093:INFO:SubProcess create_model() end ==================================
2024-07-02 11:05:53,093:INFO:choose_better activated
2024-07-02 11:05:53,095:INFO:SubProcess create_model() called ==================================
2024-07-02 11:05:53,095:INFO:Initializing create_model()
2024-07-02 11:05:53,095:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=444, verbose=0,
                     warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:05:53,096:INFO:Checking exceptions
2024-07-02 11:05:53,097:INFO:Importing libraries
2024-07-02 11:05:53,097:INFO:Copying training dataset
2024-07-02 11:05:54,166:INFO:Defining folds
2024-07-02 11:05:54,166:INFO:Declaring metric variables
2024-07-02 11:05:54,166:INFO:Importing untrained model
2024-07-02 11:05:54,166:INFO:Declaring custom model
2024-07-02 11:05:54,167:INFO:Extra Trees Classifier Imported successfully
2024-07-02 11:05:54,167:INFO:Starting cross validation
2024-07-02 11:05:54,173:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:06:02,897:INFO:Calculating mean and std
2024-07-02 11:06:02,898:INFO:Creating metrics dataframe
2024-07-02 11:06:02,901:INFO:Finalizing model
2024-07-02 11:06:05,361:INFO:Uploading results into container
2024-07-02 11:06:05,361:INFO:Uploading model into container now
2024-07-02 11:06:05,362:INFO:_master_model_container: 38
2024-07-02 11:06:05,362:INFO:_display_container: 28
2024-07-02 11:06:05,362:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=444, verbose=0,
                     warm_start=False)
2024-07-02 11:06:05,362:INFO:create_model() successfully completed......................................
2024-07-02 11:06:05,436:INFO:SubProcess create_model() end ==================================
2024-07-02 11:06:05,436:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=444, verbose=0,
                     warm_start=False) result for BA is 0.6603
2024-07-02 11:06:05,437:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight='balanced',
                     criterion='gini', max_depth=6, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.01, min_samples_leaf=6,
                     min_samples_split=5, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=50, n_jobs=-1,
                     oob_score=False, random_state=444, verbose=0,
                     warm_start=False) result for BA is 0.7965
2024-07-02 11:06:05,437:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight='balanced',
                     criterion='gini', max_depth=6, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.01, min_samples_leaf=6,
                     min_samples_split=5, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=50, n_jobs=-1,
                     oob_score=False, random_state=444, verbose=0,
                     warm_start=False) is best model
2024-07-02 11:06:05,437:INFO:choose_better completed
2024-07-02 11:06:05,441:INFO:_master_model_container: 38
2024-07-02 11:06:05,441:INFO:_display_container: 27
2024-07-02 11:06:05,441:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight='balanced',
                     criterion='gini', max_depth=6, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.01, min_samples_leaf=6,
                     min_samples_split=5, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=50, n_jobs=-1,
                     oob_score=False, random_state=444, verbose=0,
                     warm_start=False)
2024-07-02 11:06:05,441:INFO:tune_model() successfully completed......................................
2024-07-02 11:06:05,545:INFO:Initializing save_model()
2024-07-02 11:06:05,545:INFO:save_model(model=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight='balanced',
                     criterion='gini', max_depth=6, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.01, min_samples_leaf=6,
                     min_samples_split=5, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=50, n_jobs=-1,
                     oob_score=False, random_state=444, verbose=0,
                     warm_start=False), model_name=../pycaret/saved_et_model, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-07-02 11:06:05,545:INFO:Adding model into prep_pipe
2024-07-02 11:06:05,583:INFO:../pycaret/saved_et_model.pkl saved in current working directory
2024-07-02 11:06:05,598:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tissue',
                                             'Orthologs count',
                                             'Driver_genes_MUT (all)',
                                             'Driver_g...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight='balanced', criterion='gini',
                                      max_depth=6, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.01,
                                      min_samples_leaf=6, min_samples_split=5,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=50,
                                      n_jobs=-1, oob_score=False,
                                      random_state=444, verbose=0,
                                      warm_start=False))],
         verbose=False)
2024-07-02 11:06:05,598:INFO:save_model() successfully completed......................................
2024-07-02 11:06:05,659:INFO:Initializing create_model()
2024-07-02 11:06:05,659:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=svm, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:06:05,659:INFO:Checking exceptions
2024-07-02 11:06:05,665:INFO:Importing libraries
2024-07-02 11:06:05,666:INFO:Copying training dataset
2024-07-02 11:06:06,826:INFO:Defining folds
2024-07-02 11:06:06,827:INFO:Declaring metric variables
2024-07-02 11:06:06,829:INFO:Importing untrained model
2024-07-02 11:06:06,830:INFO:SVM - Linear Kernel Imported successfully
2024-07-02 11:06:06,833:INFO:Starting cross validation
2024-07-02 11:06:06,839:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:06:21,654:INFO:Calculating mean and std
2024-07-02 11:06:21,657:INFO:Creating metrics dataframe
2024-07-02 11:06:21,663:INFO:Finalizing model
2024-07-02 11:06:32,419:INFO:Uploading results into container
2024-07-02 11:06:32,420:INFO:Uploading model into container now
2024-07-02 11:06:32,424:INFO:_master_model_container: 39
2024-07-02 11:06:32,424:INFO:_display_container: 28
2024-07-02 11:06:32,424:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=444, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-07-02 11:06:32,424:INFO:create_model() successfully completed......................................
2024-07-02 11:06:32,505:INFO:Initializing tune_model()
2024-07-02 11:06:32,505:INFO:tune_model(estimator=SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=444, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=BA, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=True, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>)
2024-07-02 11:06:32,505:INFO:Checking exceptions
2024-07-02 11:06:32,888:INFO:Copying training dataset
2024-07-02 11:06:33,567:INFO:Checking base model
2024-07-02 11:06:33,568:INFO:Base model : SVM - Linear Kernel
2024-07-02 11:06:33,569:INFO:Declaring metric variables
2024-07-02 11:06:33,571:INFO:Defining Hyperparameters
2024-07-02 11:06:33,646:INFO:Tuning with n_jobs=-1
2024-07-02 11:06:33,646:INFO:Initializing RandomizedSearchCV
2024-07-02 11:06:45,161:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/joblib/externals/loky/process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(

2024-07-02 11:08:45,279:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:08:45,718:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:08:47,448:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:08:48,123:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:08:48,498:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:09:48,225:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:09:52,575:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:09:56,045:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:10:12,684:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:10:12,876:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:10:13,064:INFO:best_params: {'actual_estimator__penalty': 'l1', 'actual_estimator__learning_rate': 'optimal', 'actual_estimator__l1_ratio': 0.9400000001, 'actual_estimator__fit_intercept': False, 'actual_estimator__eta0': 0.01, 'actual_estimator__alpha': 1e-06}
2024-07-02 11:10:13,066:INFO:Hyperparameter search completed
2024-07-02 11:10:13,067:INFO:SubProcess create_model() called ==================================
2024-07-02 11:10:13,068:INFO:Initializing create_model()
2024-07-02 11:10:13,068:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=444, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32822b0d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'penalty': 'l1', 'learning_rate': 'optimal', 'l1_ratio': 0.9400000001, 'fit_intercept': False, 'eta0': 0.01, 'alpha': 1e-06})
2024-07-02 11:10:13,068:INFO:Checking exceptions
2024-07-02 11:10:13,068:INFO:Importing libraries
2024-07-02 11:10:13,068:INFO:Copying training dataset
2024-07-02 11:10:14,342:INFO:Defining folds
2024-07-02 11:10:14,342:INFO:Declaring metric variables
2024-07-02 11:10:14,344:INFO:Importing untrained model
2024-07-02 11:10:14,344:INFO:Declaring custom model
2024-07-02 11:10:14,346:INFO:SVM - Linear Kernel Imported successfully
2024-07-02 11:10:14,349:INFO:Starting cross validation
2024-07-02 11:10:14,356:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:11:45,712:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:11:46,686:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:11:47,142:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:11:47,420:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:11:47,459:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:11:47,626:INFO:Calculating mean and std
2024-07-02 11:11:47,628:INFO:Creating metrics dataframe
2024-07-02 11:11:47,637:INFO:Finalizing model
2024-07-02 11:13:16,903:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:13:16,908:INFO:Uploading results into container
2024-07-02 11:13:16,909:INFO:Uploading model into container now
2024-07-02 11:13:16,909:INFO:_master_model_container: 40
2024-07-02 11:13:16,909:INFO:_display_container: 29
2024-07-02 11:13:16,909:INFO:SGDClassifier(alpha=1e-06, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.01, fit_intercept=False,
              l1_ratio=0.9400000001, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=444, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-07-02 11:13:16,909:INFO:create_model() successfully completed......................................
2024-07-02 11:13:16,997:INFO:SubProcess create_model() end ==================================
2024-07-02 11:13:16,998:INFO:choose_better activated
2024-07-02 11:13:16,999:INFO:SubProcess create_model() called ==================================
2024-07-02 11:13:17,000:INFO:Initializing create_model()
2024-07-02 11:13:17,000:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=444, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:13:17,000:INFO:Checking exceptions
2024-07-02 11:13:17,001:INFO:Importing libraries
2024-07-02 11:13:17,001:INFO:Copying training dataset
2024-07-02 11:13:18,114:INFO:Defining folds
2024-07-02 11:13:18,114:INFO:Declaring metric variables
2024-07-02 11:13:18,114:INFO:Importing untrained model
2024-07-02 11:13:18,114:INFO:Declaring custom model
2024-07-02 11:13:18,114:INFO:SVM - Linear Kernel Imported successfully
2024-07-02 11:13:18,114:INFO:Starting cross validation
2024-07-02 11:13:18,121:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:13:33,701:INFO:Calculating mean and std
2024-07-02 11:13:33,703:INFO:Creating metrics dataframe
2024-07-02 11:13:33,705:INFO:Finalizing model
2024-07-02 11:13:44,452:INFO:Uploading results into container
2024-07-02 11:13:44,452:INFO:Uploading model into container now
2024-07-02 11:13:44,453:INFO:_master_model_container: 41
2024-07-02 11:13:44,453:INFO:_display_container: 30
2024-07-02 11:13:44,453:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=444, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-07-02 11:13:44,453:INFO:create_model() successfully completed......................................
2024-07-02 11:13:44,529:INFO:SubProcess create_model() end ==================================
2024-07-02 11:13:44,529:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=444, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False) result for BA is 0.7128
2024-07-02 11:13:44,529:INFO:SGDClassifier(alpha=1e-06, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.01, fit_intercept=False,
              l1_ratio=0.9400000001, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=444, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False) result for BA is 0.754
2024-07-02 11:13:44,529:INFO:SGDClassifier(alpha=1e-06, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.01, fit_intercept=False,
              l1_ratio=0.9400000001, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=444, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False) is best model
2024-07-02 11:13:44,529:INFO:choose_better completed
2024-07-02 11:13:44,534:INFO:_master_model_container: 41
2024-07-02 11:13:44,534:INFO:_display_container: 29
2024-07-02 11:13:44,534:INFO:SGDClassifier(alpha=1e-06, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.01, fit_intercept=False,
              l1_ratio=0.9400000001, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=444, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-07-02 11:13:44,534:INFO:tune_model() successfully completed......................................
2024-07-02 11:13:44,619:INFO:Initializing save_model()
2024-07-02 11:13:44,620:INFO:save_model(model=SGDClassifier(alpha=1e-06, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.01, fit_intercept=False,
              l1_ratio=0.9400000001, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=444, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), model_name=../pycaret/saved_svm_model, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-07-02 11:13:44,620:INFO:Adding model into prep_pipe
2024-07-02 11:13:44,651:INFO:../pycaret/saved_svm_model.pkl saved in current working directory
2024-07-02 11:13:44,665:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tissue',
                                             'Orthologs count',
                                             'Driver_genes_MUT (all)',
                                             'Driver_g...
                 SGDClassifier(alpha=1e-06, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.01,
                               fit_intercept=False, l1_ratio=0.9400000001,
                               learning_rate='optimal', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=444,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False)
2024-07-02 11:13:44,665:INFO:save_model() successfully completed......................................
2024-07-02 11:13:44,730:INFO:Initializing compare_models()
2024-07-02 11:13:44,730:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, include=[LGBMClassifier(bagging_fraction=0.5, bagging_freq=0, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.4,
               importance_type='split', learning_rate=0.4, max_depth=-1,
               min_child_samples=91, min_child_weight=0.001, min_split_gain=0.6,
               n_estimators=60, n_jobs=-1, num_leaves=30, objective=None,
               random_state=444, reg_alpha=0.0001, reg_lambda=1e-07,
               silent='warn', subsample=1.0, subsample_for_bin=200000,
               subsample_freq=0), XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.9,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, feature_types=None, gamma=0, gpu_id=-1,
              grow_policy='depthwise', importance_type=None,
              interaction_constraints='', learning_rate=0.5, max_bin=256,
              max_cat_threshold=64, max_cat_to_onehot=4, max_delta_step=0,
              max_depth=1, max_leaves=0, min_child_weight=2, missing=nan,
              monotone_constraints='()', n_estimators=50, n_jobs=-1,
              num_parallel_tree=1, objective='binary:logistic',
              predictor='auto', ...), AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=444), RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight='balanced',
                       criterion='gini', max_depth=6, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.01, min_samples_leaf=6,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=50, n_jobs=-1,
                       oob_score=False, random_state=444, verbose=0,
                       warm_start=False), LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=0.6, solver='lsqr',
                           store_covariance=False, tol=0.0001), LogisticRegression(C=2.396, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=444, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight='balanced',
                     criterion='gini', max_depth=6, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.01, min_samples_leaf=6,
                     min_samples_split=5, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=50, n_jobs=-1,
                     oob_score=False, random_state=444, verbose=0,
                     warm_start=False), SGDClassifier(alpha=1e-06, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.01, fit_intercept=False,
              l1_ratio=0.9400000001, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=444, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)], fold=None, round=4, cross_validation=True, sort=BA, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, 'include': [LGBMClassifier(bagging_fraction=0.5, bagging_freq=0, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.4,
               importance_type='split', learning_rate=0.4, max_depth=-1,
               min_child_samples=91, min_child_weight=0.001, min_split_gain=0.6,
               n_estimators=60, n_jobs=-1, num_leaves=30, objective=None,
               random_state=444, reg_alpha=0.0001, reg_lambda=1e-07,
               silent='warn', subsample=1.0, subsample_for_bin=200000,
               subsample_freq=0), XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.9,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, feature_types=None, gamma=0, gpu_id=-1,
              grow_policy='depthwise', importance_type=None,
              interaction_constraints='', learning_rate=0.5, max_bin=256,
              max_cat_threshold=64, max_cat_to_onehot=4, max_delta_step=0,
              max_depth=1, max_leaves=0, min_child_weight=2, missing=nan,
              monotone_constraints='()', n_estimators=50, n_jobs=-1,
              num_parallel_tree=1, objective='binary:logistic',
              predictor='auto', ...), AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=444), RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight='balanced',
                       criterion='gini', max_depth=6, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.01, min_samples_leaf=6,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=50, n_jobs=-1,
                       oob_score=False, random_state=444, verbose=0,
                       warm_start=False), LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=0.6, solver='lsqr',
                           store_covariance=False, tol=0.0001), LogisticRegression(C=2.396, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=444, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight='balanced',
                     criterion='gini', max_depth=6, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.01, min_samples_leaf=6,
                     min_samples_split=5, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=50, n_jobs=-1,
                     oob_score=False, random_state=444, verbose=0,
                     warm_start=False), SGDClassifier(alpha=1e-06, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.01, fit_intercept=False,
              l1_ratio=0.9400000001, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=444, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'BA', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-07-02 11:13:44,730:INFO:Checking exceptions
2024-07-02 11:13:45,119:INFO:Preparing display monitor
2024-07-02 11:13:45,130:INFO:Initializing custom model Light Gradient Boosting Machine
2024-07-02 11:13:45,131:INFO:Total runtime is 3.818670908610026e-06 minutes
2024-07-02 11:13:45,132:INFO:SubProcess create_model() called ==================================
2024-07-02 11:13:45,132:INFO:Initializing create_model()
2024-07-02 11:13:45,132:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=LGBMClassifier(bagging_fraction=0.5, bagging_freq=0, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.4,
               importance_type='split', learning_rate=0.4, max_depth=-1,
               min_child_samples=91, min_child_weight=0.001, min_split_gain=0.6,
               n_estimators=60, n_jobs=-1, num_leaves=30, objective=None,
               random_state=444, reg_alpha=0.0001, reg_lambda=1e-07,
               silent='warn', subsample=1.0, subsample_for_bin=200000,
               subsample_freq=0), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32822b0d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:13:45,132:INFO:Checking exceptions
2024-07-02 11:13:45,133:INFO:Importing libraries
2024-07-02 11:13:45,133:INFO:Copying training dataset
2024-07-02 11:13:46,324:INFO:Defining folds
2024-07-02 11:13:46,325:INFO:Declaring metric variables
2024-07-02 11:13:46,327:INFO:Importing untrained model
2024-07-02 11:13:46,327:INFO:Declaring custom model
2024-07-02 11:13:46,329:INFO:Light Gradient Boosting Machine Imported successfully
2024-07-02 11:13:46,332:INFO:Starting cross validation
2024-07-02 11:13:46,338:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:13:56,784:INFO:Calculating mean and std
2024-07-02 11:13:56,787:INFO:Creating metrics dataframe
2024-07-02 11:13:56,791:INFO:Uploading results into container
2024-07-02 11:13:56,791:INFO:Uploading model into container now
2024-07-02 11:13:56,792:INFO:_master_model_container: 42
2024-07-02 11:13:56,792:INFO:_display_container: 30
2024-07-02 11:13:56,792:INFO:LGBMClassifier(bagging_fraction=0.5, bagging_freq=0, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.4,
               importance_type='split', learning_rate=0.4, max_depth=-1,
               min_child_samples=91, min_child_weight=0.001, min_split_gain=0.6,
               n_estimators=60, n_jobs=-1, num_leaves=30, objective=None,
               random_state=444, reg_alpha=0.0001, reg_lambda=1e-07,
               silent='warn', subsample=1.0, subsample_for_bin=200000,
               subsample_freq=0)
2024-07-02 11:13:56,792:INFO:create_model() successfully completed......................................
2024-07-02 11:13:56,903:INFO:SubProcess create_model() end ==================================
2024-07-02 11:13:56,903:INFO:Creating metrics dataframe
2024-07-02 11:13:56,910:INFO:Initializing custom model Extreme Gradient Boosting
2024-07-02 11:13:56,910:INFO:Total runtime is 0.19632738828659058 minutes
2024-07-02 11:13:56,911:INFO:SubProcess create_model() called ==================================
2024-07-02 11:13:56,913:INFO:Initializing create_model()
2024-07-02 11:13:56,913:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.9,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, feature_types=None, gamma=0, gpu_id=-1,
              grow_policy='depthwise', importance_type=None,
              interaction_constraints='', learning_rate=0.5, max_bin=256,
              max_cat_threshold=64, max_cat_to_onehot=4, max_delta_step=0,
              max_depth=1, max_leaves=0, min_child_weight=2, missing=nan,
              monotone_constraints='()', n_estimators=50, n_jobs=-1,
              num_parallel_tree=1, objective='binary:logistic',
              predictor='auto', ...), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32822b0d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:13:56,913:INFO:Checking exceptions
2024-07-02 11:13:56,913:INFO:Importing libraries
2024-07-02 11:13:56,913:INFO:Copying training dataset
2024-07-02 11:13:58,118:INFO:Defining folds
2024-07-02 11:13:58,118:INFO:Declaring metric variables
2024-07-02 11:13:58,120:INFO:Importing untrained model
2024-07-02 11:13:58,121:INFO:Declaring custom model
2024-07-02 11:13:58,123:INFO:Extreme Gradient Boosting Imported successfully
2024-07-02 11:13:58,126:INFO:Starting cross validation
2024-07-02 11:13:58,132:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:13:59,582:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:13:59,582:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:13:59,629:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:13:59,649:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:14:00,210:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 11:14:00,257:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:14:00,258:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:14:00,309:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:14:00,330:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:14:00,934:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 11:14:01,006:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:14:01,007:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:14:01,067:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:14:01,101:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:14:01,511:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:14:01,511:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:14:01,559:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:14:01,576:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:14:01,700:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 11:14:02,138:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 11:14:02,261:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:14:02,261:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:14:02,306:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:14:02,322:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:14:02,858:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 11:14:11,420:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:14:11,421:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:14:11,469:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:14:11,486:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:14:11,608:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:14:11,608:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:14:11,651:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:14:11,672:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:14:11,923:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:14:11,923:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:14:11,960:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:14:11,977:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:14:12,071:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:14:12,071:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:14:12,108:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:14:12,125:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:14:12,447:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:14:12,447:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:14:12,484:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:14:12,501:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:14:12,596:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:14:12,596:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:14:12,627:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:14:12,627:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:14:12,633:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:14:12,649:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:14:12,664:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:14:12,680:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:14:12,774:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:14:12,774:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:14:12,810:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:14:12,825:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:14:13,364:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:14:13,364:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:14:13,399:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:14:13,415:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:14:13,502:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:14:13,503:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:14:13,538:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:14:13,553:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:14:13,655:INFO:Calculating mean and std
2024-07-02 11:14:13,657:INFO:Creating metrics dataframe
2024-07-02 11:14:13,661:INFO:Uploading results into container
2024-07-02 11:14:13,661:INFO:Uploading model into container now
2024-07-02 11:14:13,662:INFO:_master_model_container: 43
2024-07-02 11:14:13,662:INFO:_display_container: 30
2024-07-02 11:14:13,663:INFO:XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.9,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, feature_types=None, gamma=0, gpu_id=-1,
              grow_policy='depthwise', importance_type=None,
              interaction_constraints='', learning_rate=0.5, max_bin=256,
              max_cat_threshold=64, max_cat_to_onehot=4, max_delta_step=0,
              max_depth=1, max_leaves=0, min_child_weight=2, missing=nan,
              monotone_constraints='()', n_estimators=50, n_jobs=-1,
              num_parallel_tree=1, objective='binary:logistic',
              predictor='auto', ...)
2024-07-02 11:14:13,663:INFO:create_model() successfully completed......................................
2024-07-02 11:14:13,764:INFO:SubProcess create_model() end ==================================
2024-07-02 11:14:13,765:INFO:Creating metrics dataframe
2024-07-02 11:14:13,768:INFO:Initializing custom model Ada Boost Classifier
2024-07-02 11:14:13,768:INFO:Total runtime is 0.47729690074920655 minutes
2024-07-02 11:14:13,770:INFO:SubProcess create_model() called ==================================
2024-07-02 11:14:13,770:INFO:Initializing create_model()
2024-07-02 11:14:13,770:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=444), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32822b0d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:14:13,770:INFO:Checking exceptions
2024-07-02 11:14:13,770:INFO:Importing libraries
2024-07-02 11:14:13,770:INFO:Copying training dataset
2024-07-02 11:14:14,837:INFO:Defining folds
2024-07-02 11:14:14,837:INFO:Declaring metric variables
2024-07-02 11:14:14,839:INFO:Importing untrained model
2024-07-02 11:14:14,840:INFO:Declaring custom model
2024-07-02 11:14:14,841:INFO:Ada Boost Classifier Imported successfully
2024-07-02 11:14:14,844:INFO:Starting cross validation
2024-07-02 11:14:14,850:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:14:16,420:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:14:16,820:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:14:17,355:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:14:17,880:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:14:18,462:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:14:39,061:INFO:Calculating mean and std
2024-07-02 11:14:39,063:INFO:Creating metrics dataframe
2024-07-02 11:14:39,066:INFO:Uploading results into container
2024-07-02 11:14:39,067:INFO:Uploading model into container now
2024-07-02 11:14:39,068:INFO:_master_model_container: 44
2024-07-02 11:14:39,068:INFO:_display_container: 30
2024-07-02 11:14:39,068:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=444)
2024-07-02 11:14:39,068:INFO:create_model() successfully completed......................................
2024-07-02 11:14:39,196:INFO:SubProcess create_model() end ==================================
2024-07-02 11:14:39,196:INFO:Creating metrics dataframe
2024-07-02 11:14:39,200:INFO:Initializing custom model Random Forest Classifier
2024-07-02 11:14:39,200:INFO:Total runtime is 0.9011616508165996 minutes
2024-07-02 11:14:39,202:INFO:SubProcess create_model() called ==================================
2024-07-02 11:14:39,202:INFO:Initializing create_model()
2024-07-02 11:14:39,202:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight='balanced',
                       criterion='gini', max_depth=6, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.01, min_samples_leaf=6,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=50, n_jobs=-1,
                       oob_score=False, random_state=444, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32822b0d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:14:39,202:INFO:Checking exceptions
2024-07-02 11:14:39,202:INFO:Importing libraries
2024-07-02 11:14:39,202:INFO:Copying training dataset
2024-07-02 11:14:40,336:INFO:Defining folds
2024-07-02 11:14:40,336:INFO:Declaring metric variables
2024-07-02 11:14:40,338:INFO:Importing untrained model
2024-07-02 11:14:40,338:INFO:Declaring custom model
2024-07-02 11:14:40,340:INFO:Random Forest Classifier Imported successfully
2024-07-02 11:14:40,342:INFO:Starting cross validation
2024-07-02 11:14:40,349:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:14:44,904:INFO:Calculating mean and std
2024-07-02 11:14:44,907:INFO:Creating metrics dataframe
2024-07-02 11:14:44,910:INFO:Uploading results into container
2024-07-02 11:14:44,911:INFO:Uploading model into container now
2024-07-02 11:14:44,911:INFO:_master_model_container: 45
2024-07-02 11:14:44,911:INFO:_display_container: 30
2024-07-02 11:14:44,912:INFO:RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight='balanced',
                       criterion='gini', max_depth=6, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.01, min_samples_leaf=6,
                       min_samples_split=5, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=50, n_jobs=-1,
                       oob_score=False, random_state=444, verbose=0,
                       warm_start=False)
2024-07-02 11:14:44,912:INFO:create_model() successfully completed......................................
2024-07-02 11:14:45,029:INFO:SubProcess create_model() end ==================================
2024-07-02 11:14:45,029:INFO:Creating metrics dataframe
2024-07-02 11:14:45,032:INFO:Initializing custom model Linear Discriminant Analysis
2024-07-02 11:14:45,032:INFO:Total runtime is 0.9983677705128988 minutes
2024-07-02 11:14:45,034:INFO:SubProcess create_model() called ==================================
2024-07-02 11:14:45,034:INFO:Initializing create_model()
2024-07-02 11:14:45,034:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=0.6, solver='lsqr',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32822b0d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:14:45,034:INFO:Checking exceptions
2024-07-02 11:14:45,034:INFO:Importing libraries
2024-07-02 11:14:45,035:INFO:Copying training dataset
2024-07-02 11:14:46,198:INFO:Defining folds
2024-07-02 11:14:46,198:INFO:Declaring metric variables
2024-07-02 11:14:46,200:INFO:Importing untrained model
2024-07-02 11:14:46,200:INFO:Declaring custom model
2024-07-02 11:14:46,202:INFO:Linear Discriminant Analysis Imported successfully
2024-07-02 11:14:46,204:INFO:Starting cross validation
2024-07-02 11:14:46,211:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:15:18,761:INFO:Calculating mean and std
2024-07-02 11:15:18,764:INFO:Creating metrics dataframe
2024-07-02 11:15:18,768:INFO:Uploading results into container
2024-07-02 11:15:18,768:INFO:Uploading model into container now
2024-07-02 11:15:18,769:INFO:_master_model_container: 46
2024-07-02 11:15:18,769:INFO:_display_container: 30
2024-07-02 11:15:18,770:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=0.6, solver='lsqr',
                           store_covariance=False, tol=0.0001)
2024-07-02 11:15:18,770:INFO:create_model() successfully completed......................................
2024-07-02 11:15:18,888:INFO:SubProcess create_model() end ==================================
2024-07-02 11:15:18,888:INFO:Creating metrics dataframe
2024-07-02 11:15:18,892:INFO:Initializing custom model Logistic Regression
2024-07-02 11:15:18,892:INFO:Total runtime is 1.5626944859822591 minutes
2024-07-02 11:15:18,893:INFO:SubProcess create_model() called ==================================
2024-07-02 11:15:18,894:INFO:Initializing create_model()
2024-07-02 11:15:18,894:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=LogisticRegression(C=2.396, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=444, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32822b0d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:15:18,894:INFO:Checking exceptions
2024-07-02 11:15:18,894:INFO:Importing libraries
2024-07-02 11:15:18,894:INFO:Copying training dataset
2024-07-02 11:15:20,031:INFO:Defining folds
2024-07-02 11:15:20,032:INFO:Declaring metric variables
2024-07-02 11:15:20,034:INFO:Importing untrained model
2024-07-02 11:15:20,034:INFO:Declaring custom model
2024-07-02 11:15:20,037:INFO:Logistic Regression Imported successfully
2024-07-02 11:15:20,039:INFO:Starting cross validation
2024-07-02 11:15:20,046:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:15:27,543:INFO:Calculating mean and std
2024-07-02 11:15:27,545:INFO:Creating metrics dataframe
2024-07-02 11:15:27,549:INFO:Uploading results into container
2024-07-02 11:15:27,550:INFO:Uploading model into container now
2024-07-02 11:15:27,550:INFO:_master_model_container: 47
2024-07-02 11:15:27,550:INFO:_display_container: 30
2024-07-02 11:15:27,551:INFO:LogisticRegression(C=2.396, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=444, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-07-02 11:15:27,551:INFO:create_model() successfully completed......................................
2024-07-02 11:15:27,666:INFO:SubProcess create_model() end ==================================
2024-07-02 11:15:27,666:INFO:Creating metrics dataframe
2024-07-02 11:15:27,672:INFO:Initializing custom model Extra Trees Classifier
2024-07-02 11:15:27,672:INFO:Total runtime is 1.7090219537417095 minutes
2024-07-02 11:15:27,673:INFO:SubProcess create_model() called ==================================
2024-07-02 11:15:27,674:INFO:Initializing create_model()
2024-07-02 11:15:27,674:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight='balanced',
                     criterion='gini', max_depth=6, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.01, min_samples_leaf=6,
                     min_samples_split=5, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=50, n_jobs=-1,
                     oob_score=False, random_state=444, verbose=0,
                     warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32822b0d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:15:27,674:INFO:Checking exceptions
2024-07-02 11:15:27,674:INFO:Importing libraries
2024-07-02 11:15:27,674:INFO:Copying training dataset
2024-07-02 11:15:28,778:INFO:Defining folds
2024-07-02 11:15:28,778:INFO:Declaring metric variables
2024-07-02 11:15:28,780:INFO:Importing untrained model
2024-07-02 11:15:28,780:INFO:Declaring custom model
2024-07-02 11:15:28,783:INFO:Extra Trees Classifier Imported successfully
2024-07-02 11:15:28,786:INFO:Starting cross validation
2024-07-02 11:15:28,792:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:15:33,106:INFO:Calculating mean and std
2024-07-02 11:15:33,108:INFO:Creating metrics dataframe
2024-07-02 11:15:33,112:INFO:Uploading results into container
2024-07-02 11:15:33,113:INFO:Uploading model into container now
2024-07-02 11:15:33,113:INFO:_master_model_container: 48
2024-07-02 11:15:33,113:INFO:_display_container: 30
2024-07-02 11:15:33,114:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight='balanced',
                     criterion='gini', max_depth=6, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.01, min_samples_leaf=6,
                     min_samples_split=5, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=50, n_jobs=-1,
                     oob_score=False, random_state=444, verbose=0,
                     warm_start=False)
2024-07-02 11:15:33,114:INFO:create_model() successfully completed......................................
2024-07-02 11:15:33,239:INFO:SubProcess create_model() end ==================================
2024-07-02 11:15:33,239:INFO:Creating metrics dataframe
2024-07-02 11:15:33,243:INFO:Initializing custom model SVM - Linear Kernel
2024-07-02 11:15:33,243:INFO:Total runtime is 1.8018734852472942 minutes
2024-07-02 11:15:33,244:INFO:SubProcess create_model() called ==================================
2024-07-02 11:15:33,245:INFO:Initializing create_model()
2024-07-02 11:15:33,245:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=SGDClassifier(alpha=1e-06, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.01, fit_intercept=False,
              l1_ratio=0.9400000001, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=444, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32822b0d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:15:33,245:INFO:Checking exceptions
2024-07-02 11:15:33,245:INFO:Importing libraries
2024-07-02 11:15:33,245:INFO:Copying training dataset
2024-07-02 11:15:34,451:INFO:Defining folds
2024-07-02 11:15:34,451:INFO:Declaring metric variables
2024-07-02 11:15:34,453:INFO:Importing untrained model
2024-07-02 11:15:34,453:INFO:Declaring custom model
2024-07-02 11:15:34,456:INFO:SVM - Linear Kernel Imported successfully
2024-07-02 11:15:34,458:INFO:Starting cross validation
2024-07-02 11:15:34,464:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:17:04,429:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:17:05,321:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:17:05,393:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:17:06,352:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:17:06,373:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:17:06,577:INFO:Calculating mean and std
2024-07-02 11:17:06,579:INFO:Creating metrics dataframe
2024-07-02 11:17:06,584:INFO:Uploading results into container
2024-07-02 11:17:06,584:INFO:Uploading model into container now
2024-07-02 11:17:06,585:INFO:_master_model_container: 49
2024-07-02 11:17:06,585:INFO:_display_container: 30
2024-07-02 11:17:06,586:INFO:SGDClassifier(alpha=1e-06, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.01, fit_intercept=False,
              l1_ratio=0.9400000001, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l1',
              power_t=0.5, random_state=444, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-07-02 11:17:06,586:INFO:create_model() successfully completed......................................
2024-07-02 11:17:06,710:INFO:SubProcess create_model() end ==================================
2024-07-02 11:17:06,710:INFO:Creating metrics dataframe
2024-07-02 11:17:06,715:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/pycaret/internal/pycaret_experiment/supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-07-02 11:17:06,720:INFO:Initializing create_model()
2024-07-02 11:17:06,720:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.9,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, feature_types=None, gamma=0, gpu_id=-1,
              grow_policy='depthwise', importance_type=None,
              interaction_constraints='', learning_rate=0.5, max_bin=256,
              max_cat_threshold=64, max_cat_to_onehot=4, max_delta_step=0,
              max_depth=1, max_leaves=0, min_child_weight=2, missing=nan,
              monotone_constraints='()', n_estimators=50, n_jobs=-1,
              num_parallel_tree=1, objective='binary:logistic',
              predictor='auto', ...), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:17:06,720:INFO:Checking exceptions
2024-07-02 11:17:06,721:INFO:Importing libraries
2024-07-02 11:17:06,721:INFO:Copying training dataset
2024-07-02 11:17:07,858:INFO:Defining folds
2024-07-02 11:17:07,859:INFO:Declaring metric variables
2024-07-02 11:17:07,859:INFO:Importing untrained model
2024-07-02 11:17:07,859:INFO:Declaring custom model
2024-07-02 11:17:07,859:INFO:Extreme Gradient Boosting Imported successfully
2024-07-02 11:17:07,865:INFO:Cross validation set to False
2024-07-02 11:17:07,865:INFO:Fitting Model
2024-07-02 11:17:08,579:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:17:08,579:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:17:08,614:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:17:08,629:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:17:08,812:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 11:17:11,421:INFO:XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.9,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, feature_types=None, gamma=0, gpu_id=-1,
              grow_policy='depthwise', importance_type=None,
              interaction_constraints='', learning_rate=0.5, max_bin=256,
              max_cat_threshold=64, max_cat_to_onehot=4, max_delta_step=0,
              max_depth=1, max_leaves=0, min_child_weight=2, missing=nan,
              monotone_constraints='()', n_estimators=50, n_jobs=-1,
              num_parallel_tree=1, objective='binary:logistic',
              predictor='auto', ...)
2024-07-02 11:17:11,422:INFO:create_model() successfully completed......................................
2024-07-02 11:17:11,506:INFO:_master_model_container: 49
2024-07-02 11:17:11,506:INFO:_display_container: 30
2024-07-02 11:17:11,507:INFO:XGBClassifier(base_score=0.5, booster='gbtree', callbacks=None,
              colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.9,
              early_stopping_rounds=None, enable_categorical=False,
              eval_metric=None, feature_types=None, gamma=0, gpu_id=-1,
              grow_policy='depthwise', importance_type=None,
              interaction_constraints='', learning_rate=0.5, max_bin=256,
              max_cat_threshold=64, max_cat_to_onehot=4, max_delta_step=0,
              max_depth=1, max_leaves=0, min_child_weight=2, missing=nan,
              monotone_constraints='()', n_estimators=50, n_jobs=-1,
              num_parallel_tree=1, objective='binary:logistic',
              predictor='auto', ...)
2024-07-02 11:17:11,508:INFO:compare_models() successfully completed......................................
2024-07-02 11:26:42,549:INFO:Initializing load_model()
2024-07-02 11:26:42,549:INFO:load_model(model_name=../pycaret/saved_sveLGBM(n_jobs=-1, n_voters=-1, split_seed=42, verbose=False, voting='soft')_model, platform=None, authentication=None, verbose=True)
2024-07-02 11:30:21,976:INFO:Initializing load_model()
2024-07-02 11:30:21,976:INFO:load_model(model_name=../pycaret/saved_sveLGBM_model, platform=None, authentication=None, verbose=True)
2024-07-02 11:30:22,031:INFO:Initializing load_model()
2024-07-02 11:30:22,031:INFO:load_model(model_name=../pycaret/saved_sveXGB_model, platform=None, authentication=None, verbose=True)
2024-07-02 11:30:22,059:INFO:Initializing load_model()
2024-07-02 11:30:22,060:INFO:load_model(model_name=../pycaret/saved_sveADA_model, platform=None, authentication=None, verbose=True)
2024-07-02 11:30:22,152:INFO:Initializing load_model()
2024-07-02 11:30:22,152:INFO:load_model(model_name=../pycaret/saved_sveRF_model, platform=None, authentication=None, verbose=True)
2024-07-02 11:30:22,320:INFO:Initializing load_model()
2024-07-02 11:30:22,320:INFO:load_model(model_name=../pycaret/saved_sveLDA_model, platform=None, authentication=None, verbose=True)
2024-07-02 11:30:22,336:INFO:Initializing load_model()
2024-07-02 11:30:22,336:INFO:load_model(model_name=../pycaret/saved_lightgbm_model, platform=None, authentication=None, verbose=True)
2024-07-02 11:30:22,355:INFO:Initializing load_model()
2024-07-02 11:30:22,355:INFO:load_model(model_name=../pycaret/saved_xgboost_model, platform=None, authentication=None, verbose=True)
2024-07-02 11:30:22,372:INFO:Initializing load_model()
2024-07-02 11:30:22,372:INFO:load_model(model_name=../pycaret/saved_ada_model, platform=None, authentication=None, verbose=True)
2024-07-02 11:30:22,393:INFO:Initializing load_model()
2024-07-02 11:30:22,393:INFO:load_model(model_name=../pycaret/saved_rf_model, platform=None, authentication=None, verbose=True)
2024-07-02 11:30:22,414:INFO:Initializing load_model()
2024-07-02 11:30:22,414:INFO:load_model(model_name=../pycaret/saved_lda_model, platform=None, authentication=None, verbose=True)
2024-07-02 11:30:22,458:INFO:Initializing load_model()
2024-07-02 11:30:22,458:INFO:load_model(model_name=../pycaret/saved_lr_model, platform=None, authentication=None, verbose=True)
2024-07-02 11:30:22,473:INFO:Initializing load_model()
2024-07-02 11:30:22,473:INFO:load_model(model_name=../pycaret/saved_et_model, platform=None, authentication=None, verbose=True)
2024-07-02 11:30:22,494:INFO:Initializing load_model()
2024-07-02 11:30:22,494:INFO:load_model(model_name=../pycaret/saved_svm_model, platform=None, authentication=None, verbose=True)
2024-07-02 11:30:22,862:INFO:Initializing compare_models()
2024-07-02 11:30:22,862:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, include=[Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                colsample_bytree=1.0, feature_fraction=0.4,
                                importance_type='split', learning_rate=0.4,
                                max_depth=-1, min_child_samples=91,
                                min_child_weight=0.001, min_split_gain=0.6,
                                n_estimators=60, n_jobs=-1, num_leaves=30,
                                objective=None, random_state=444,
                                reg_alpha=0.0001, reg_lambda=1e-07,
                                silent='warn', subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                               grow_policy='depthwise', importance_type=None,
                               interaction_constraints='', learning_rate=0.5,
                               max_bin=256, max_cat_threshold=64,
                               max_cat_to_onehot=4, max_delta_step=0,
                               max_depth=1, max_leaves=0, min_child_weight=2,
                               missing=nan, monotone_constraints='()',
                               n_estimators=50, n_jobs=-1, num_parallel_tree=1,
                               objective='binary:logistic', predictor='auto', ...))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=444))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='gini', max_depth=6,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.01,
                                        min_samples_leaf=6, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=50,
                                        n_jobs=-1, oob_score=False,
                                        random_state=444, verbose=0,
                                        warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=0.6, solver='lsqr',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=2.396, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=444,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight='balanced', criterion='gini',
                                      max_depth=6, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.01,
                                      min_samples_leaf=6, min_samples_split=5,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=50,
                                      n_jobs=-1, oob_score=False,
                                      random_state=444, verbose=0,
                                      warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 SGDClassifier(alpha=1e-06, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.01,
                               fit_intercept=False, l1_ratio=0.9400000001,
                               learning_rate='optimal', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=444,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False)], fold=None, round=4, cross_validation=True, sort=BA, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, 'include': [Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                colsample_bytree=1.0, feature_fraction=0.4,
                                importance_type='split', learning_rate=0.4,
                                max_depth=-1, min_child_samples=91,
                                min_child_weight=0.001, min_split_gain=0.6,
                                n_estimators=60, n_jobs=-1, num_leaves=30,
                                objective=None, random_state=444,
                                reg_alpha=0.0001, reg_lambda=1e-07,
                                silent='warn', subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                               grow_policy='depthwise', importance_type=None,
                               interaction_constraints='', learning_rate=0.5,
                               max_bin=256, max_cat_threshold=64,
                               max_cat_to_onehot=4, max_delta_step=0,
                               max_depth=1, max_leaves=0, min_child_weight=2,
                               missing=nan, monotone_constraints='()',
                               n_estimators=50, n_jobs=-1, num_parallel_tree=1,
                               objective='binary:logistic', predictor='auto', ...))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=444))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='gini', max_depth=6,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.01,
                                        min_samples_leaf=6, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=50,
                                        n_jobs=-1, oob_score=False,
                                        random_state=444, verbose=0,
                                        warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=0.6, solver='lsqr',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=2.396, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=444,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight='balanced', criterion='gini',
                                      max_depth=6, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.01,
                                      min_samples_leaf=6, min_samples_split=5,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=50,
                                      n_jobs=-1, oob_score=False,
                                      random_state=444, verbose=0,
                                      warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 SGDClassifier(alpha=1e-06, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.01,
                               fit_intercept=False, l1_ratio=0.9400000001,
                               learning_rate='optimal', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=444,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False)], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'BA', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-07-02 11:30:22,862:INFO:Checking exceptions
2024-07-02 11:30:23,321:INFO:Preparing display monitor
2024-07-02 11:30:23,331:INFO:Initializing custom model sveLGBM
2024-07-02 11:30:23,331:INFO:Total runtime is 5.316734313964844e-06 minutes
2024-07-02 11:30:23,334:INFO:SubProcess create_model() called ==================================
2024-07-02 11:30:23,397:INFO:Initializing create_model()
2024-07-02 11:30:23,397:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31e0ed8d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:30:23,397:INFO:Checking exceptions
2024-07-02 11:30:23,398:INFO:Importing libraries
2024-07-02 11:30:23,398:INFO:Copying training dataset
2024-07-02 11:30:24,424:INFO:Defining folds
2024-07-02 11:30:24,424:INFO:Declaring metric variables
2024-07-02 11:30:24,426:INFO:Importing untrained model
2024-07-02 11:30:24,426:INFO:Declaring custom model
2024-07-02 11:30:24,433:INFO:sveLGBM Imported successfully
2024-07-02 11:30:24,436:INFO:Starting cross validation
2024-07-02 11:30:24,442:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:31:28,012:INFO:Calculating mean and std
2024-07-02 11:31:28,014:INFO:Creating metrics dataframe
2024-07-02 11:31:28,019:INFO:Uploading results into container
2024-07-02 11:31:28,020:INFO:Uploading model into container now
2024-07-02 11:31:28,020:INFO:_master_model_container: 50
2024-07-02 11:31:28,020:INFO:_display_container: 31
2024-07-02 11:31:28,039:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False)
2024-07-02 11:31:28,039:INFO:create_model() successfully completed......................................
2024-07-02 11:31:28,155:INFO:SubProcess create_model() end ==================================
2024-07-02 11:31:28,155:INFO:Creating metrics dataframe
2024-07-02 11:31:28,159:INFO:Initializing custom model sveXGB
2024-07-02 11:31:28,159:INFO:Total runtime is 1.080464498202006 minutes
2024-07-02 11:31:28,160:INFO:SubProcess create_model() called ==================================
2024-07-02 11:31:28,176:INFO:Initializing create_model()
2024-07-02 11:31:28,177:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31e0ed8d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:31:28,177:INFO:Checking exceptions
2024-07-02 11:31:28,177:INFO:Importing libraries
2024-07-02 11:31:28,177:INFO:Copying training dataset
2024-07-02 11:31:29,313:INFO:Defining folds
2024-07-02 11:31:29,313:INFO:Declaring metric variables
2024-07-02 11:31:29,315:INFO:Importing untrained model
2024-07-02 11:31:29,315:INFO:Declaring custom model
2024-07-02 11:31:29,322:INFO:sveXGB Imported successfully
2024-07-02 11:31:29,325:INFO:Starting cross validation
2024-07-02 11:31:29,331:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:33:47,494:INFO:Calculating mean and std
2024-07-02 11:33:47,496:INFO:Creating metrics dataframe
2024-07-02 11:33:47,501:INFO:Uploading results into container
2024-07-02 11:33:47,501:INFO:Uploading model into container now
2024-07-02 11:33:47,502:INFO:_master_model_container: 51
2024-07-02 11:33:47,502:INFO:_display_container: 31
2024-07-02 11:33:47,519:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False)
2024-07-02 11:33:47,519:INFO:create_model() successfully completed......................................
2024-07-02 11:33:47,629:INFO:SubProcess create_model() end ==================================
2024-07-02 11:33:47,629:INFO:Creating metrics dataframe
2024-07-02 11:33:47,632:INFO:Initializing custom model sveADA
2024-07-02 11:33:47,632:INFO:Total runtime is 3.4050273140271505 minutes
2024-07-02 11:33:47,634:INFO:SubProcess create_model() called ==================================
2024-07-02 11:33:47,649:INFO:Initializing create_model()
2024-07-02 11:33:47,649:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31e0ed8d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:33:47,649:INFO:Checking exceptions
2024-07-02 11:33:47,649:INFO:Importing libraries
2024-07-02 11:33:47,649:INFO:Copying training dataset
2024-07-02 11:33:48,777:INFO:Defining folds
2024-07-02 11:33:48,777:INFO:Declaring metric variables
2024-07-02 11:33:48,779:INFO:Importing untrained model
2024-07-02 11:33:48,779:INFO:Declaring custom model
2024-07-02 11:33:48,786:INFO:sveADA Imported successfully
2024-07-02 11:33:48,788:INFO:Starting cross validation
2024-07-02 11:33:48,795:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:33:50,399:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:50,400:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:50,402:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:50,410:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:50,421:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:50,421:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:50,429:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:50,431:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:51,616:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:51,619:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:51,628:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:51,628:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:51,639:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:51,640:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:51,640:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:51,645:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:53,670:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:53,672:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:53,682:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:53,684:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:53,686:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:53,701:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:53,716:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:53,732:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:57,391:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:57,403:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:57,421:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:57,429:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:57,432:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:57,444:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:57,461:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:57,462:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:59,870:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:59,882:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:59,889:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:59,941:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:59,981:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:59,994:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:33:59,995:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:00,051:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:13,167:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:13,217:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:13,356:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:13,422:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:13,683:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:13,713:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:16,261:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:16,343:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:16,557:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:16,663:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:16,933:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:17,031:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:19,733:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:19,928:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:20,049:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:20,077:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:20,085:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:20,205:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:24,492:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:24,604:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:24,749:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:25,166:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:25,261:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:25,319:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:26,710:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:26,841:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:27,078:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:27,199:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:27,353:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:27,534:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:34:47,296:INFO:Calculating mean and std
2024-07-02 11:34:47,298:INFO:Creating metrics dataframe
2024-07-02 11:34:47,302:INFO:Uploading results into container
2024-07-02 11:34:47,302:INFO:Uploading model into container now
2024-07-02 11:34:47,303:INFO:_master_model_container: 52
2024-07-02 11:34:47,303:INFO:_display_container: 31
2024-07-02 11:34:47,322:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False)
2024-07-02 11:34:47,322:INFO:create_model() successfully completed......................................
2024-07-02 11:34:47,432:INFO:SubProcess create_model() end ==================================
2024-07-02 11:34:47,433:INFO:Creating metrics dataframe
2024-07-02 11:34:47,436:INFO:Initializing custom model sveRF
2024-07-02 11:34:47,436:INFO:Total runtime is 4.401759696006775 minutes
2024-07-02 11:34:47,438:INFO:SubProcess create_model() called ==================================
2024-07-02 11:34:47,453:INFO:Initializing create_model()
2024-07-02 11:34:47,453:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31e0ed8d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:34:47,454:INFO:Checking exceptions
2024-07-02 11:34:47,454:INFO:Importing libraries
2024-07-02 11:34:47,454:INFO:Copying training dataset
2024-07-02 11:34:48,626:INFO:Defining folds
2024-07-02 11:34:48,626:INFO:Declaring metric variables
2024-07-02 11:34:48,628:INFO:Importing untrained model
2024-07-02 11:34:48,629:INFO:Declaring custom model
2024-07-02 11:34:48,636:INFO:sveRF Imported successfully
2024-07-02 11:34:48,638:INFO:Starting cross validation
2024-07-02 11:34:48,645:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:35:02,819:INFO:Calculating mean and std
2024-07-02 11:35:02,821:INFO:Creating metrics dataframe
2024-07-02 11:35:02,826:INFO:Uploading results into container
2024-07-02 11:35:02,826:INFO:Uploading model into container now
2024-07-02 11:35:02,827:INFO:_master_model_container: 53
2024-07-02 11:35:02,827:INFO:_display_container: 31
2024-07-02 11:35:02,846:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False)
2024-07-02 11:35:02,846:INFO:create_model() successfully completed......................................
2024-07-02 11:35:02,956:INFO:SubProcess create_model() end ==================================
2024-07-02 11:35:02,956:INFO:Creating metrics dataframe
2024-07-02 11:35:02,960:INFO:Initializing custom model sveLDA
2024-07-02 11:35:02,960:INFO:Total runtime is 4.6604860941569015 minutes
2024-07-02 11:35:02,962:INFO:SubProcess create_model() called ==================================
2024-07-02 11:35:02,978:INFO:Initializing create_model()
2024-07-02 11:35:02,978:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31e0ed8d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:35:02,978:INFO:Checking exceptions
2024-07-02 11:35:02,978:INFO:Importing libraries
2024-07-02 11:35:02,978:INFO:Copying training dataset
2024-07-02 11:35:04,082:INFO:Defining folds
2024-07-02 11:35:04,083:INFO:Declaring metric variables
2024-07-02 11:35:04,085:INFO:Importing untrained model
2024-07-02 11:35:04,085:INFO:Declaring custom model
2024-07-02 11:35:04,092:INFO:sveLDA Imported successfully
2024-07-02 11:35:04,095:INFO:Starting cross validation
2024-07-02 11:35:04,103:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:35:29,905:INFO:Calculating mean and std
2024-07-02 11:35:29,909:INFO:Creating metrics dataframe
2024-07-02 11:35:29,914:INFO:Uploading results into container
2024-07-02 11:35:29,915:INFO:Uploading model into container now
2024-07-02 11:35:29,915:INFO:_master_model_container: 54
2024-07-02 11:35:29,915:INFO:_display_container: 31
2024-07-02 11:35:29,936:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False)
2024-07-02 11:35:29,936:INFO:create_model() successfully completed......................................
2024-07-02 11:35:30,052:INFO:SubProcess create_model() end ==================================
2024-07-02 11:35:30,052:INFO:Creating metrics dataframe
2024-07-02 11:35:30,056:INFO:Initializing custom model Light Gradient Boosting Machine
2024-07-02 11:35:30,056:INFO:Total runtime is 5.1120813488960275 minutes
2024-07-02 11:35:30,057:INFO:SubProcess create_model() called ==================================
2024-07-02 11:35:30,073:INFO:Initializing create_model()
2024-07-02 11:35:30,073:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                colsample_bytree=1.0, feature_fraction=0.4,
                                importance_type='split', learning_rate=0.4,
                                max_depth=-1, min_child_samples=91,
                                min_child_weight=0.001, min_split_gain=0.6,
                                n_estimators=60, n_jobs=-1, num_leaves=30,
                                objective=None, random_state=444,
                                reg_alpha=0.0001, reg_lambda=1e-07,
                                silent='warn', subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31e0ed8d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:35:30,073:INFO:Checking exceptions
2024-07-02 11:35:30,073:INFO:Importing libraries
2024-07-02 11:35:30,073:INFO:Copying training dataset
2024-07-02 11:35:31,172:INFO:Defining folds
2024-07-02 11:35:31,172:INFO:Declaring metric variables
2024-07-02 11:35:31,174:INFO:Importing untrained model
2024-07-02 11:35:31,175:INFO:Declaring custom model
2024-07-02 11:35:31,183:INFO:Light Gradient Boosting Machine Imported successfully
2024-07-02 11:35:31,188:INFO:Starting cross validation
2024-07-02 11:35:31,196:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:35:41,345:INFO:Calculating mean and std
2024-07-02 11:35:41,347:INFO:Creating metrics dataframe
2024-07-02 11:35:41,351:INFO:Uploading results into container
2024-07-02 11:35:41,351:INFO:Uploading model into container now
2024-07-02 11:35:41,352:INFO:_master_model_container: 55
2024-07-02 11:35:41,352:INFO:_display_container: 31
2024-07-02 11:35:41,370:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                colsample_bytree=1.0, feature_fraction=0.4,
                                importance_type='split', learning_rate=0.4,
                                max_depth=-1, min_child_samples=91,
                                min_child_weight=0.001, min_split_gain=0.6,
                                n_estimators=60, n_jobs=-1, num_leaves=30,
                                objective=None, random_state=444,
                                reg_alpha=0.0001, reg_lambda=1e-07,
                                silent='warn', subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2024-07-02 11:35:41,370:INFO:create_model() successfully completed......................................
2024-07-02 11:35:41,481:INFO:SubProcess create_model() end ==================================
2024-07-02 11:35:41,481:INFO:Creating metrics dataframe
2024-07-02 11:35:41,487:INFO:Initializing custom model Extreme Gradient Boosting
2024-07-02 11:35:41,487:INFO:Total runtime is 5.302603332201641 minutes
2024-07-02 11:35:41,489:INFO:SubProcess create_model() called ==================================
2024-07-02 11:35:41,508:INFO:Initializing create_model()
2024-07-02 11:35:41,508:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                               grow_policy='depthwise', importance_type=None,
                               interaction_constraints='', learning_rate=0.5,
                               max_bin=256, max_cat_threshold=64,
                               max_cat_to_onehot=4, max_delta_step=0,
                               max_depth=1, max_leaves=0, min_child_weight=2,
                               missing=nan, monotone_constraints='()',
                               n_estimators=50, n_jobs=-1, num_parallel_tree=1,
                               objective='binary:logistic', predictor='auto', ...))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31e0ed8d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:35:41,508:INFO:Checking exceptions
2024-07-02 11:35:41,508:INFO:Importing libraries
2024-07-02 11:35:41,508:INFO:Copying training dataset
2024-07-02 11:35:42,609:INFO:Defining folds
2024-07-02 11:35:42,609:INFO:Declaring metric variables
2024-07-02 11:35:42,611:INFO:Importing untrained model
2024-07-02 11:35:42,611:INFO:Declaring custom model
2024-07-02 11:35:42,619:INFO:Extreme Gradient Boosting Imported successfully
2024-07-02 11:35:42,621:INFO:Starting cross validation
2024-07-02 11:35:42,628:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:35:44,087:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:35:44,088:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:35:44,127:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:35:44,145:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:35:44,621:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:35:44,621:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:35:44,669:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:35:44,689:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 11:35:44,692:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:35:45,290:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 11:35:45,500:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:35:45,501:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:35:45,550:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:35:45,567:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:35:46,106:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:35:46,107:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:35:46,149:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:35:46,166:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:35:46,235:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 11:35:46,563:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:35:46,563:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:35:46,604:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:35:46,627:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:35:46,759:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 11:35:47,094:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 11:35:55,924:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:35:55,924:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:35:55,963:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:35:55,980:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:35:56,099:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:35:56,099:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:35:56,155:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:35:56,177:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:35:56,377:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:35:56,377:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:35:56,415:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:35:56,431:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:35:56,528:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:35:56,528:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:35:56,566:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:35:56,582:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:35:56,793:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:35:56,793:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:35:56,830:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:35:56,846:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:35:56,939:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:35:56,939:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:35:56,976:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:35:56,993:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:35:57,478:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:35:57,478:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:35:57,514:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:35:57,530:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:35:57,620:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:35:57,620:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:35:57,656:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:35:57,672:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:35:57,763:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:35:57,763:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:35:57,800:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:35:57,816:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:35:57,906:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 11:35:57,906:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 11:35:57,941:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 11:35:57,957:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 11:35:58,057:INFO:Calculating mean and std
2024-07-02 11:35:58,059:INFO:Creating metrics dataframe
2024-07-02 11:35:58,064:INFO:Uploading results into container
2024-07-02 11:35:58,064:INFO:Uploading model into container now
2024-07-02 11:35:58,065:INFO:_master_model_container: 56
2024-07-02 11:35:58,065:INFO:_display_container: 31
2024-07-02 11:35:58,085:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                               grow_policy='depthwise', importance_type=None,
                               interaction_constraints='', learning_rate=0.5,
                               max_bin=256, max_cat_threshold=64,
                               max_cat_to_onehot=4, max_delta_step=0,
                               max_depth=1, max_leaves=0, min_child_weight=2,
                               missing=nan, monotone_constraints='()',
                               n_estimators=50, n_jobs=-1, num_parallel_tree=1,
                               objective='binary:logistic', predictor='auto', ...))],
         verbose=False)
2024-07-02 11:35:58,086:INFO:create_model() successfully completed......................................
2024-07-02 11:35:58,204:INFO:SubProcess create_model() end ==================================
2024-07-02 11:35:58,204:INFO:Creating metrics dataframe
2024-07-02 11:35:58,208:INFO:Initializing custom model Ada Boost Classifier
2024-07-02 11:35:58,208:INFO:Total runtime is 5.581286613146465 minutes
2024-07-02 11:35:58,209:INFO:SubProcess create_model() called ==================================
2024-07-02 11:35:58,225:INFO:Initializing create_model()
2024-07-02 11:35:58,225:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=444))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31e0ed8d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:35:58,225:INFO:Checking exceptions
2024-07-02 11:35:58,225:INFO:Importing libraries
2024-07-02 11:35:58,225:INFO:Copying training dataset
2024-07-02 11:35:59,324:INFO:Defining folds
2024-07-02 11:35:59,324:INFO:Declaring metric variables
2024-07-02 11:35:59,326:INFO:Importing untrained model
2024-07-02 11:35:59,326:INFO:Declaring custom model
2024-07-02 11:35:59,333:INFO:Ada Boost Classifier Imported successfully
2024-07-02 11:35:59,336:INFO:Starting cross validation
2024-07-02 11:35:59,343:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:36:01,069:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:36:01,883:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:36:02,095:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:36:02,332:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:36:03,082:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 11:36:23,590:INFO:Calculating mean and std
2024-07-02 11:36:23,593:INFO:Creating metrics dataframe
2024-07-02 11:36:23,597:INFO:Uploading results into container
2024-07-02 11:36:23,597:INFO:Uploading model into container now
2024-07-02 11:36:23,598:INFO:_master_model_container: 57
2024-07-02 11:36:23,598:INFO:_display_container: 31
2024-07-02 11:36:23,615:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=444))],
         verbose=False)
2024-07-02 11:36:23,616:INFO:create_model() successfully completed......................................
2024-07-02 11:36:23,750:INFO:SubProcess create_model() end ==================================
2024-07-02 11:36:23,750:INFO:Creating metrics dataframe
2024-07-02 11:36:23,755:INFO:Initializing custom model Random Forest Classifier
2024-07-02 11:36:23,755:INFO:Total runtime is 6.007063146432241 minutes
2024-07-02 11:36:23,756:INFO:SubProcess create_model() called ==================================
2024-07-02 11:36:23,772:INFO:Initializing create_model()
2024-07-02 11:36:23,772:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='gini', max_depth=6,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.01,
                                        min_samples_leaf=6, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=50,
                                        n_jobs=-1, oob_score=False,
                                        random_state=444, verbose=0,
                                        warm_start=False))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31e0ed8d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:36:23,772:INFO:Checking exceptions
2024-07-02 11:36:23,772:INFO:Importing libraries
2024-07-02 11:36:23,772:INFO:Copying training dataset
2024-07-02 11:36:24,918:INFO:Defining folds
2024-07-02 11:36:24,918:INFO:Declaring metric variables
2024-07-02 11:36:24,920:INFO:Importing untrained model
2024-07-02 11:36:24,920:INFO:Declaring custom model
2024-07-02 11:36:24,927:INFO:Random Forest Classifier Imported successfully
2024-07-02 11:36:24,930:INFO:Starting cross validation
2024-07-02 11:36:24,937:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:36:29,231:INFO:Calculating mean and std
2024-07-02 11:36:29,232:INFO:Creating metrics dataframe
2024-07-02 11:36:29,233:INFO:Uploading results into container
2024-07-02 11:36:29,234:INFO:Uploading model into container now
2024-07-02 11:36:29,234:INFO:_master_model_container: 58
2024-07-02 11:36:29,234:INFO:_display_container: 31
2024-07-02 11:36:29,251:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='gini', max_depth=6,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.01,
                                        min_samples_leaf=6, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=50,
                                        n_jobs=-1, oob_score=False,
                                        random_state=444, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-07-02 11:36:29,252:INFO:create_model() successfully completed......................................
2024-07-02 11:36:29,335:INFO:SubProcess create_model() end ==================================
2024-07-02 11:36:29,335:INFO:Creating metrics dataframe
2024-07-02 11:36:29,339:INFO:Initializing custom model Linear Discriminant Analysis
2024-07-02 11:36:29,339:INFO:Total runtime is 6.100144012769063 minutes
2024-07-02 11:36:29,341:INFO:SubProcess create_model() called ==================================
2024-07-02 11:36:29,358:INFO:Initializing create_model()
2024-07-02 11:36:29,358:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=0.6, solver='lsqr',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31e0ed8d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:36:29,358:INFO:Checking exceptions
2024-07-02 11:36:29,358:INFO:Importing libraries
2024-07-02 11:36:29,358:INFO:Copying training dataset
2024-07-02 11:36:30,410:INFO:Defining folds
2024-07-02 11:36:30,411:INFO:Declaring metric variables
2024-07-02 11:36:30,412:INFO:Importing untrained model
2024-07-02 11:36:30,412:INFO:Declaring custom model
2024-07-02 11:36:30,420:INFO:Linear Discriminant Analysis Imported successfully
2024-07-02 11:36:30,422:INFO:Starting cross validation
2024-07-02 11:36:30,429:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:37:03,056:INFO:Calculating mean and std
2024-07-02 11:37:03,060:INFO:Creating metrics dataframe
2024-07-02 11:37:03,064:INFO:Uploading results into container
2024-07-02 11:37:03,065:INFO:Uploading model into container now
2024-07-02 11:37:03,066:INFO:_master_model_container: 59
2024-07-02 11:37:03,066:INFO:_display_container: 31
2024-07-02 11:37:03,088:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=0.6, solver='lsqr',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False)
2024-07-02 11:37:03,088:INFO:create_model() successfully completed......................................
2024-07-02 11:37:03,215:INFO:SubProcess create_model() end ==================================
2024-07-02 11:37:03,215:INFO:Creating metrics dataframe
2024-07-02 11:37:03,221:INFO:Initializing custom model Logistic Regression
2024-07-02 11:37:03,221:INFO:Total runtime is 6.664832778771719 minutes
2024-07-02 11:37:03,222:INFO:SubProcess create_model() called ==================================
2024-07-02 11:37:03,237:INFO:Initializing create_model()
2024-07-02 11:37:03,237:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=2.396, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=444,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31e0ed8d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:37:03,238:INFO:Checking exceptions
2024-07-02 11:37:03,238:INFO:Importing libraries
2024-07-02 11:37:03,238:INFO:Copying training dataset
2024-07-02 11:37:04,410:INFO:Defining folds
2024-07-02 11:37:04,411:INFO:Declaring metric variables
2024-07-02 11:37:04,412:INFO:Importing untrained model
2024-07-02 11:37:04,412:INFO:Declaring custom model
2024-07-02 11:37:04,420:INFO:Logistic Regression Imported successfully
2024-07-02 11:37:04,422:INFO:Starting cross validation
2024-07-02 11:37:04,429:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:37:12,312:INFO:Calculating mean and std
2024-07-02 11:37:12,314:INFO:Creating metrics dataframe
2024-07-02 11:37:12,318:INFO:Uploading results into container
2024-07-02 11:37:12,318:INFO:Uploading model into container now
2024-07-02 11:37:12,319:INFO:_master_model_container: 60
2024-07-02 11:37:12,319:INFO:_display_container: 31
2024-07-02 11:37:12,339:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=2.396, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=444,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-07-02 11:37:12,339:INFO:create_model() successfully completed......................................
2024-07-02 11:37:12,446:INFO:SubProcess create_model() end ==================================
2024-07-02 11:37:12,446:INFO:Creating metrics dataframe
2024-07-02 11:37:12,450:INFO:Initializing custom model Extra Trees Classifier
2024-07-02 11:37:12,450:INFO:Total runtime is 6.818660799662273 minutes
2024-07-02 11:37:12,452:INFO:SubProcess create_model() called ==================================
2024-07-02 11:37:12,468:INFO:Initializing create_model()
2024-07-02 11:37:12,468:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight='balanced', criterion='gini',
                                      max_depth=6, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.01,
                                      min_samples_leaf=6, min_samples_split=5,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=50,
                                      n_jobs=-1, oob_score=False,
                                      random_state=444, verbose=0,
                                      warm_start=False))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31e0ed8d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:37:12,468:INFO:Checking exceptions
2024-07-02 11:37:12,468:INFO:Importing libraries
2024-07-02 11:37:12,468:INFO:Copying training dataset
2024-07-02 11:37:13,612:INFO:Defining folds
2024-07-02 11:37:13,613:INFO:Declaring metric variables
2024-07-02 11:37:13,615:INFO:Importing untrained model
2024-07-02 11:37:13,615:INFO:Declaring custom model
2024-07-02 11:37:13,622:INFO:Extra Trees Classifier Imported successfully
2024-07-02 11:37:13,624:INFO:Starting cross validation
2024-07-02 11:37:13,632:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:37:17,287:INFO:Calculating mean and std
2024-07-02 11:37:17,288:INFO:Creating metrics dataframe
2024-07-02 11:37:17,289:INFO:Uploading results into container
2024-07-02 11:37:17,289:INFO:Uploading model into container now
2024-07-02 11:37:17,289:INFO:_master_model_container: 61
2024-07-02 11:37:17,289:INFO:_display_container: 31
2024-07-02 11:37:17,306:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight='balanced', criterion='gini',
                                      max_depth=6, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.01,
                                      min_samples_leaf=6, min_samples_split=5,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=50,
                                      n_jobs=-1, oob_score=False,
                                      random_state=444, verbose=0,
                                      warm_start=False))],
         verbose=False)
2024-07-02 11:37:17,306:INFO:create_model() successfully completed......................................
2024-07-02 11:37:17,387:INFO:SubProcess create_model() end ==================================
2024-07-02 11:37:17,387:INFO:Creating metrics dataframe
2024-07-02 11:37:17,392:INFO:Initializing custom model SVM - Linear Kernel
2024-07-02 11:37:17,392:INFO:Total runtime is 6.901026395956676 minutes
2024-07-02 11:37:17,394:INFO:SubProcess create_model() called ==================================
2024-07-02 11:37:17,409:INFO:Initializing create_model()
2024-07-02 11:37:17,409:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 SGDClassifier(alpha=1e-06, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.01,
                               fit_intercept=False, l1_ratio=0.9400000001,
                               learning_rate='optimal', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=444,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31e0ed8d0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:37:17,409:INFO:Checking exceptions
2024-07-02 11:37:17,410:INFO:Importing libraries
2024-07-02 11:37:17,410:INFO:Copying training dataset
2024-07-02 11:37:18,472:INFO:Defining folds
2024-07-02 11:37:18,473:INFO:Declaring metric variables
2024-07-02 11:37:18,475:INFO:Importing untrained model
2024-07-02 11:37:18,475:INFO:Declaring custom model
2024-07-02 11:37:18,481:INFO:SVM - Linear Kernel Imported successfully
2024-07-02 11:37:18,485:INFO:Starting cross validation
2024-07-02 11:37:18,491:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:38:49,123:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:38:49,830:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:38:50,034:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:38:50,400:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:38:50,906:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 11:38:51,048:INFO:Calculating mean and std
2024-07-02 11:38:51,050:INFO:Creating metrics dataframe
2024-07-02 11:38:51,053:INFO:Uploading results into container
2024-07-02 11:38:51,053:INFO:Uploading model into container now
2024-07-02 11:38:51,054:INFO:_master_model_container: 62
2024-07-02 11:38:51,054:INFO:_display_container: 31
2024-07-02 11:38:51,075:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 SGDClassifier(alpha=1e-06, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.01,
                               fit_intercept=False, l1_ratio=0.9400000001,
                               learning_rate='optimal', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=444,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False)
2024-07-02 11:38:51,075:INFO:create_model() successfully completed......................................
2024-07-02 11:38:51,202:INFO:SubProcess create_model() end ==================================
2024-07-02 11:38:51,202:INFO:Creating metrics dataframe
2024-07-02 11:38:51,207:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/pycaret/internal/pycaret_experiment/supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-07-02 11:38:51,227:INFO:Initializing create_model()
2024-07-02 11:38:51,227:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:38:51,227:INFO:Checking exceptions
2024-07-02 11:38:51,228:INFO:Importing libraries
2024-07-02 11:38:51,228:INFO:Copying training dataset
2024-07-02 11:38:52,475:INFO:Defining folds
2024-07-02 11:38:52,476:INFO:Declaring metric variables
2024-07-02 11:38:52,476:INFO:Importing untrained model
2024-07-02 11:38:52,476:INFO:Declaring custom model
2024-07-02 11:38:52,481:INFO:sveXGB Imported successfully
2024-07-02 11:38:52,487:INFO:Cross validation set to False
2024-07-02 11:38:52,487:INFO:Fitting Model
2024-07-02 11:39:40,480:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False)
2024-07-02 11:39:40,481:INFO:create_model() successfully completed......................................
2024-07-02 11:39:40,567:INFO:_master_model_container: 62
2024-07-02 11:39:40,568:INFO:_display_container: 31
2024-07-02 11:39:40,582:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False)
2024-07-02 11:39:40,582:INFO:compare_models() successfully completed......................................
2024-07-02 11:47:05,694:INFO:Initializing create_model()
2024-07-02 11:47:05,694:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=<class 'icarlearn.ensemble.splitvotingens.sveLGBM'>, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:47:05,695:INFO:Checking exceptions
2024-07-02 11:47:05,707:INFO:Importing libraries
2024-07-02 11:47:05,707:INFO:Copying training dataset
2024-07-02 11:47:06,806:INFO:Defining folds
2024-07-02 11:47:06,807:INFO:Declaring metric variables
2024-07-02 11:47:06,808:INFO:Importing untrained model
2024-07-02 11:47:06,808:INFO:Declaring custom model
2024-07-02 11:47:20,278:INFO:Initializing create_model()
2024-07-02 11:47:20,278:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveLGBM(n_jobs=-1, n_voters=-1, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:47:20,278:INFO:Checking exceptions
2024-07-02 11:47:20,291:INFO:Importing libraries
2024-07-02 11:47:20,292:INFO:Copying training dataset
2024-07-02 11:47:21,473:INFO:Defining folds
2024-07-02 11:47:21,473:INFO:Declaring metric variables
2024-07-02 11:47:21,475:INFO:Importing untrained model
2024-07-02 11:47:21,475:INFO:Declaring custom model
2024-07-02 11:47:21,477:INFO:sveLGBM Imported successfully
2024-07-02 11:47:21,480:INFO:Starting cross validation
2024-07-02 11:47:21,486:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:47:42,351:INFO:Initializing create_model()
2024-07-02 11:47:42,351:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveLGBM(n_jobs=-1, n_voters=-1, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:47:42,351:INFO:Checking exceptions
2024-07-02 11:47:42,368:INFO:Importing libraries
2024-07-02 11:47:42,368:INFO:Copying training dataset
2024-07-02 11:47:43,649:INFO:Defining folds
2024-07-02 11:47:43,649:INFO:Declaring metric variables
2024-07-02 11:47:43,651:INFO:Importing untrained model
2024-07-02 11:47:43,652:INFO:Declaring custom model
2024-07-02 11:47:43,653:INFO:sveLGBM Imported successfully
2024-07-02 11:47:43,656:INFO:Starting cross validation
2024-07-02 11:47:43,662:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:48:23,136:INFO:Initializing create_model()
2024-07-02 11:48:23,137:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveLGBM(n_jobs=-1, n_voters=-1, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 11:48:23,137:INFO:Checking exceptions
2024-07-02 11:48:23,154:INFO:Importing libraries
2024-07-02 11:48:23,155:INFO:Copying training dataset
2024-07-02 11:48:24,463:INFO:Defining folds
2024-07-02 11:48:24,463:INFO:Declaring metric variables
2024-07-02 11:48:24,465:INFO:Importing untrained model
2024-07-02 11:48:24,465:INFO:Declaring custom model
2024-07-02 11:48:24,467:INFO:sveLGBM Imported successfully
2024-07-02 11:48:24,469:INFO:Starting cross validation
2024-07-02 11:48:24,476:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 11:49:19,483:INFO:Calculating mean and std
2024-07-02 11:49:19,487:INFO:Creating metrics dataframe
2024-07-02 11:49:19,496:INFO:Finalizing model
2024-07-02 11:49:32,374:INFO:Uploading results into container
2024-07-02 11:49:32,376:INFO:Uploading model into container now
2024-07-02 11:49:32,383:INFO:_master_model_container: 63
2024-07-02 11:49:32,383:INFO:_display_container: 32
2024-07-02 11:49:32,383:INFO:sveLGBM(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft')
2024-07-02 11:49:32,383:INFO:create_model() successfully completed......................................
2024-07-02 11:49:32,518:INFO:Initializing tune_model()
2024-07-02 11:49:32,519:INFO:tune_model(estimator=sveLGBM(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, n_iter=10, custom_grid={'n_voters': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, optimize=BA, custom_scorer=None, search_library=scikit-learn, search_algorithm=grid, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=True, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>)
2024-07-02 11:49:32,519:INFO:Checking exceptions
2024-07-02 11:49:32,948:INFO:Copying training dataset
2024-07-02 11:49:33,717:INFO:Checking base model
2024-07-02 11:49:33,717:INFO:A custom model has been passed
2024-07-02 11:49:33,717:INFO:Base model : sveLGBM
2024-07-02 11:49:33,719:INFO:Declaring metric variables
2024-07-02 11:49:33,720:INFO:Defining Hyperparameters
2024-07-02 11:49:33,814:INFO:custom_grid: {'actual_estimator__n_voters': [4, 6, 8, 10, 12, 14, 16, 18, 20]}
2024-07-02 11:49:33,814:INFO:Tuning with n_jobs=-1
2024-07-02 11:49:33,814:INFO:Initializing GridSearchCV
2024-07-02 11:54:55,458:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/joblib/externals/loky/process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(

2024-07-02 12:00:15,722:INFO:best_params: {'actual_estimator__n_voters': 16}
2024-07-02 12:00:15,724:INFO:Hyperparameter search completed
2024-07-02 12:00:15,725:INFO:SubProcess create_model() called ==================================
2024-07-02 12:00:15,726:INFO:Initializing create_model()
2024-07-02 12:00:15,726:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveLGBM(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft'), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32dea2b00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_voters': 16})
2024-07-02 12:00:15,727:INFO:Checking exceptions
2024-07-02 12:00:15,727:INFO:Importing libraries
2024-07-02 12:00:15,727:INFO:Copying training dataset
2024-07-02 12:00:17,009:INFO:Defining folds
2024-07-02 12:00:17,009:INFO:Declaring metric variables
2024-07-02 12:00:17,012:INFO:Importing untrained model
2024-07-02 12:00:17,012:INFO:Declaring custom model
2024-07-02 12:00:17,014:INFO:sveLGBM Imported successfully
2024-07-02 12:00:17,016:INFO:Starting cross validation
2024-07-02 12:00:17,023:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:01:13,786:INFO:Calculating mean and std
2024-07-02 12:01:13,790:INFO:Creating metrics dataframe
2024-07-02 12:01:13,799:INFO:Finalizing model
2024-07-02 12:01:27,805:INFO:Uploading results into container
2024-07-02 12:01:27,807:INFO:Uploading model into container now
2024-07-02 12:01:27,808:INFO:_master_model_container: 64
2024-07-02 12:01:27,808:INFO:_display_container: 33
2024-07-02 12:01:27,809:INFO:sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False, voting='soft')
2024-07-02 12:01:27,809:INFO:create_model() successfully completed......................................
2024-07-02 12:01:27,943:INFO:SubProcess create_model() end ==================================
2024-07-02 12:01:27,943:INFO:choose_better activated
2024-07-02 12:01:27,944:INFO:SubProcess create_model() called ==================================
2024-07-02 12:01:27,945:INFO:Initializing create_model()
2024-07-02 12:01:27,945:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False, voting='soft'), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:01:27,945:INFO:Checking exceptions
2024-07-02 12:01:27,947:INFO:Importing libraries
2024-07-02 12:01:27,947:INFO:Copying training dataset
2024-07-02 12:01:29,065:INFO:Defining folds
2024-07-02 12:01:29,065:INFO:Declaring metric variables
2024-07-02 12:01:29,065:INFO:Importing untrained model
2024-07-02 12:01:29,065:INFO:Declaring custom model
2024-07-02 12:01:29,065:INFO:sveLGBM Imported successfully
2024-07-02 12:01:29,065:INFO:Starting cross validation
2024-07-02 12:01:29,072:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:02:26,462:INFO:Calculating mean and std
2024-07-02 12:02:26,463:INFO:Creating metrics dataframe
2024-07-02 12:02:26,468:INFO:Finalizing model
2024-07-02 12:02:40,746:INFO:Uploading results into container
2024-07-02 12:02:40,748:INFO:Uploading model into container now
2024-07-02 12:02:40,748:INFO:_master_model_container: 65
2024-07-02 12:02:40,748:INFO:_display_container: 34
2024-07-02 12:02:40,749:INFO:sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False, voting='soft')
2024-07-02 12:02:40,749:INFO:create_model() successfully completed......................................
2024-07-02 12:02:40,860:INFO:SubProcess create_model() end ==================================
2024-07-02 12:02:40,860:INFO:sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False, voting='soft') result for BA is 0.8799
2024-07-02 12:02:40,860:INFO:sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False, voting='soft') result for BA is 0.8799
2024-07-02 12:02:40,860:INFO:sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False, voting='soft') is best model
2024-07-02 12:02:40,860:INFO:choose_better completed
2024-07-02 12:02:40,865:INFO:_master_model_container: 65
2024-07-02 12:02:40,865:INFO:_display_container: 33
2024-07-02 12:02:40,865:INFO:sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False, voting='soft')
2024-07-02 12:02:40,865:INFO:tune_model() successfully completed......................................
2024-07-02 12:02:40,979:INFO:Initializing save_model()
2024-07-02 12:02:40,979:INFO:save_model(model=sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False, voting='soft'), model_name=../pycaret/saved_sveLGBM_model_2, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-07-02 12:02:40,979:INFO:Adding model into prep_pipe
2024-07-02 12:02:41,056:INFO:../pycaret/saved_sveLGBM_model_2.pkl saved in current working directory
2024-07-02 12:02:41,070:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tissue',
                                             'Orthologs count',
                                             'Driver_genes_MUT (all)',
                                             'Driver_g...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False)
2024-07-02 12:02:41,070:INFO:save_model() successfully completed......................................
2024-07-02 12:04:17,741:INFO:Initializing load_model()
2024-07-02 12:04:17,741:INFO:load_model(model_name=../pycaret/saved_sveLGBM_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:17,793:INFO:Initializing load_model()
2024-07-02 12:04:17,793:INFO:load_model(model_name=../pycaret/saved_sveXGB_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:17,819:INFO:Initializing load_model()
2024-07-02 12:04:17,819:INFO:load_model(model_name=../pycaret/saved_sveADA_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:17,915:INFO:Initializing load_model()
2024-07-02 12:04:17,915:INFO:load_model(model_name=../pycaret/saved_sveRF_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:18,088:INFO:Initializing load_model()
2024-07-02 12:04:18,088:INFO:load_model(model_name=../pycaret/saved_sveLDA_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:18,109:INFO:Initializing load_model()
2024-07-02 12:04:18,109:INFO:load_model(model_name=../pycaret/saved_lightgbm_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:18,129:INFO:Initializing load_model()
2024-07-02 12:04:18,129:INFO:load_model(model_name=../pycaret/saved_xgboost_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:18,148:INFO:Initializing load_model()
2024-07-02 12:04:18,148:INFO:load_model(model_name=../pycaret/saved_ada_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:18,172:INFO:Initializing load_model()
2024-07-02 12:04:18,172:INFO:load_model(model_name=../pycaret/saved_rf_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:18,197:INFO:Initializing load_model()
2024-07-02 12:04:18,197:INFO:load_model(model_name=../pycaret/saved_lda_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:18,243:INFO:Initializing load_model()
2024-07-02 12:04:18,243:INFO:load_model(model_name=../pycaret/saved_lr_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:18,257:INFO:Initializing load_model()
2024-07-02 12:04:18,257:INFO:load_model(model_name=../pycaret/saved_et_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:18,276:INFO:Initializing load_model()
2024-07-02 12:04:18,276:INFO:load_model(model_name=../pycaret/saved_svm_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:18,291:INFO:Initializing load_model()
2024-07-02 12:04:18,291:INFO:load_model(model_name=../pycaret/saved_LGBM_model2, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:43,842:INFO:Initializing load_model()
2024-07-02 12:04:43,842:INFO:load_model(model_name=../pycaret/saved_sveLGBM_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:43,895:INFO:Initializing load_model()
2024-07-02 12:04:43,895:INFO:load_model(model_name=../pycaret/saved_sveXGB_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:43,918:INFO:Initializing load_model()
2024-07-02 12:04:43,918:INFO:load_model(model_name=../pycaret/saved_sveADA_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:44,014:INFO:Initializing load_model()
2024-07-02 12:04:44,014:INFO:load_model(model_name=../pycaret/saved_sveRF_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:44,167:INFO:Initializing load_model()
2024-07-02 12:04:44,167:INFO:load_model(model_name=../pycaret/saved_sveLDA_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:44,183:INFO:Initializing load_model()
2024-07-02 12:04:44,183:INFO:load_model(model_name=../pycaret/saved_lightgbm_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:44,198:INFO:Initializing load_model()
2024-07-02 12:04:44,198:INFO:load_model(model_name=../pycaret/saved_xgboost_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:44,214:INFO:Initializing load_model()
2024-07-02 12:04:44,214:INFO:load_model(model_name=../pycaret/saved_ada_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:44,233:INFO:Initializing load_model()
2024-07-02 12:04:44,233:INFO:load_model(model_name=../pycaret/saved_rf_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:44,252:INFO:Initializing load_model()
2024-07-02 12:04:44,252:INFO:load_model(model_name=../pycaret/saved_lda_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:44,279:INFO:Initializing load_model()
2024-07-02 12:04:44,280:INFO:load_model(model_name=../pycaret/saved_lr_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:44,293:INFO:Initializing load_model()
2024-07-02 12:04:44,293:INFO:load_model(model_name=../pycaret/saved_et_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:44,312:INFO:Initializing load_model()
2024-07-02 12:04:44,312:INFO:load_model(model_name=../pycaret/saved_svm_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:44,326:INFO:Initializing load_model()
2024-07-02 12:04:44,326:INFO:load_model(model_name=../pycaret/saved_sveLGBM_model2, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:52,974:INFO:Initializing load_model()
2024-07-02 12:04:52,974:INFO:load_model(model_name=../pycaret/saved_sveLGBM_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:53,020:INFO:Initializing load_model()
2024-07-02 12:04:53,020:INFO:load_model(model_name=../pycaret/saved_sveXGB_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:53,042:INFO:Initializing load_model()
2024-07-02 12:04:53,042:INFO:load_model(model_name=../pycaret/saved_sveADA_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:53,136:INFO:Initializing load_model()
2024-07-02 12:04:53,137:INFO:load_model(model_name=../pycaret/saved_sveRF_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:53,283:INFO:Initializing load_model()
2024-07-02 12:04:53,283:INFO:load_model(model_name=../pycaret/saved_sveLDA_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:53,299:INFO:Initializing load_model()
2024-07-02 12:04:53,299:INFO:load_model(model_name=../pycaret/saved_lightgbm_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:53,314:INFO:Initializing load_model()
2024-07-02 12:04:53,314:INFO:load_model(model_name=../pycaret/saved_xgboost_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:53,329:INFO:Initializing load_model()
2024-07-02 12:04:53,330:INFO:load_model(model_name=../pycaret/saved_ada_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:53,348:INFO:Initializing load_model()
2024-07-02 12:04:53,348:INFO:load_model(model_name=../pycaret/saved_rf_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:53,367:INFO:Initializing load_model()
2024-07-02 12:04:53,367:INFO:load_model(model_name=../pycaret/saved_lda_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:53,393:INFO:Initializing load_model()
2024-07-02 12:04:53,394:INFO:load_model(model_name=../pycaret/saved_lr_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:53,406:INFO:Initializing load_model()
2024-07-02 12:04:53,406:INFO:load_model(model_name=../pycaret/saved_et_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:53,425:INFO:Initializing load_model()
2024-07-02 12:04:53,425:INFO:load_model(model_name=../pycaret/saved_svm_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:53,438:INFO:Initializing load_model()
2024-07-02 12:04:53,438:INFO:load_model(model_name=../pycaret/saved_sveLGBM_model_2, platform=None, authentication=None, verbose=True)
2024-07-02 12:04:53,867:INFO:Initializing compare_models()
2024-07-02 12:04:53,868:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, include=[Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                colsample_bytree=1.0, feature_fraction=0.4,
                                importance_type='split', learning_rate=0.4,
                                max_depth=-1, min_child_samples=91,
                                min_child_weight=0.001, min_split_gain=0.6,
                                n_estimators=60, n_jobs=-1, num_leaves=30,
                                objective=None, random_state=444,
                                reg_alpha=0.0001, reg_lambda=1e-07,
                                silent='warn', subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                               grow_policy='depthwise', importance_type=None,
                               interaction_constraints='', learning_rate=0.5,
                               max_bin=256, max_cat_threshold=64,
                               max_cat_to_onehot=4, max_delta_step=0,
                               max_depth=1, max_leaves=0, min_child_weight=2,
                               missing=nan, monotone_constraints='()',
                               n_estimators=50, n_jobs=-1, num_parallel_tree=1,
                               objective='binary:logistic', predictor='auto', ...))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=444))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='gini', max_depth=6,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.01,
                                        min_samples_leaf=6, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=50,
                                        n_jobs=-1, oob_score=False,
                                        random_state=444, verbose=0,
                                        warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=0.6, solver='lsqr',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=2.396, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=444,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight='balanced', criterion='gini',
                                      max_depth=6, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.01,
                                      min_samples_leaf=6, min_samples_split=5,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=50,
                                      n_jobs=-1, oob_score=False,
                                      random_state=444, verbose=0,
                                      warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 SGDClassifier(alpha=1e-06, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.01,
                               fit_intercept=False, l1_ratio=0.9400000001,
                               learning_rate='optimal', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=444,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False)], fold=None, round=4, cross_validation=True, sort=BA, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, 'include': [Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                colsample_bytree=1.0, feature_fraction=0.4,
                                importance_type='split', learning_rate=0.4,
                                max_depth=-1, min_child_samples=91,
                                min_child_weight=0.001, min_split_gain=0.6,
                                n_estimators=60, n_jobs=-1, num_leaves=30,
                                objective=None, random_state=444,
                                reg_alpha=0.0001, reg_lambda=1e-07,
                                silent='warn', subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                               grow_policy='depthwise', importance_type=None,
                               interaction_constraints='', learning_rate=0.5,
                               max_bin=256, max_cat_threshold=64,
                               max_cat_to_onehot=4, max_delta_step=0,
                               max_depth=1, max_leaves=0, min_child_weight=2,
                               missing=nan, monotone_constraints='()',
                               n_estimators=50, n_jobs=-1, num_parallel_tree=1,
                               objective='binary:logistic', predictor='auto', ...))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=444))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='gini', max_depth=6,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.01,
                                        min_samples_leaf=6, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=50,
                                        n_jobs=-1, oob_score=False,
                                        random_state=444, verbose=0,
                                        warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=0.6, solver='lsqr',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=2.396, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=444,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight='balanced', criterion='gini',
                                      max_depth=6, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.01,
                                      min_samples_leaf=6, min_samples_split=5,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=50,
                                      n_jobs=-1, oob_score=False,
                                      random_state=444, verbose=0,
                                      warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 SGDClassifier(alpha=1e-06, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.01,
                               fit_intercept=False, l1_ratio=0.9400000001,
                               learning_rate='optimal', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=444,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False)], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'BA', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-07-02 12:04:53,868:INFO:Checking exceptions
2024-07-02 12:04:54,407:INFO:Preparing display monitor
2024-07-02 12:04:54,417:INFO:Initializing custom model sveLGBM
2024-07-02 12:04:54,418:INFO:Total runtime is 5.598862965901693e-06 minutes
2024-07-02 12:04:54,419:INFO:SubProcess create_model() called ==================================
2024-07-02 12:04:54,437:INFO:Initializing create_model()
2024-07-02 12:04:54,437:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32818ded0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:04:54,437:INFO:Checking exceptions
2024-07-02 12:04:54,437:INFO:Importing libraries
2024-07-02 12:04:54,437:INFO:Copying training dataset
2024-07-02 12:04:55,506:INFO:Defining folds
2024-07-02 12:04:55,506:INFO:Declaring metric variables
2024-07-02 12:04:55,508:INFO:Importing untrained model
2024-07-02 12:04:55,508:INFO:Declaring custom model
2024-07-02 12:04:55,515:INFO:sveLGBM Imported successfully
2024-07-02 12:04:55,518:INFO:Starting cross validation
2024-07-02 12:04:55,525:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:05:53,007:INFO:Calculating mean and std
2024-07-02 12:05:53,010:INFO:Creating metrics dataframe
2024-07-02 12:05:53,014:INFO:Uploading results into container
2024-07-02 12:05:53,014:INFO:Uploading model into container now
2024-07-02 12:05:53,015:INFO:_master_model_container: 66
2024-07-02 12:05:53,015:INFO:_display_container: 34
2024-07-02 12:05:53,034:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False)
2024-07-02 12:05:53,034:INFO:create_model() successfully completed......................................
2024-07-02 12:05:53,161:INFO:SubProcess create_model() end ==================================
2024-07-02 12:05:53,161:INFO:Creating metrics dataframe
2024-07-02 12:05:53,166:INFO:Initializing custom model sveXGB
2024-07-02 12:05:53,166:INFO:Total runtime is 0.9791460673014323 minutes
2024-07-02 12:05:53,168:INFO:SubProcess create_model() called ==================================
2024-07-02 12:05:53,184:INFO:Initializing create_model()
2024-07-02 12:05:53,185:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32818ded0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:05:53,185:INFO:Checking exceptions
2024-07-02 12:05:53,185:INFO:Importing libraries
2024-07-02 12:05:53,185:INFO:Copying training dataset
2024-07-02 12:05:54,297:INFO:Defining folds
2024-07-02 12:05:54,297:INFO:Declaring metric variables
2024-07-02 12:05:54,299:INFO:Importing untrained model
2024-07-02 12:05:54,299:INFO:Declaring custom model
2024-07-02 12:05:54,307:INFO:sveXGB Imported successfully
2024-07-02 12:05:54,309:INFO:Starting cross validation
2024-07-02 12:05:54,316:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:08:10,700:INFO:Calculating mean and std
2024-07-02 12:08:10,703:INFO:Creating metrics dataframe
2024-07-02 12:08:10,708:INFO:Uploading results into container
2024-07-02 12:08:10,709:INFO:Uploading model into container now
2024-07-02 12:08:10,710:INFO:_master_model_container: 67
2024-07-02 12:08:10,710:INFO:_display_container: 34
2024-07-02 12:08:10,727:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False)
2024-07-02 12:08:10,727:INFO:create_model() successfully completed......................................
2024-07-02 12:08:10,849:INFO:SubProcess create_model() end ==================================
2024-07-02 12:08:10,850:INFO:Creating metrics dataframe
2024-07-02 12:08:10,853:INFO:Initializing custom model sveADA
2024-07-02 12:08:10,854:INFO:Total runtime is 3.2739381631215414 minutes
2024-07-02 12:08:10,855:INFO:SubProcess create_model() called ==================================
2024-07-02 12:08:10,871:INFO:Initializing create_model()
2024-07-02 12:08:10,871:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32818ded0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:08:10,872:INFO:Checking exceptions
2024-07-02 12:08:10,872:INFO:Importing libraries
2024-07-02 12:08:10,872:INFO:Copying training dataset
2024-07-02 12:08:11,973:INFO:Defining folds
2024-07-02 12:08:11,973:INFO:Declaring metric variables
2024-07-02 12:08:11,974:INFO:Importing untrained model
2024-07-02 12:08:11,975:INFO:Declaring custom model
2024-07-02 12:08:11,982:INFO:sveADA Imported successfully
2024-07-02 12:08:11,984:INFO:Starting cross validation
2024-07-02 12:08:11,992:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:08:13,619:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:13,627:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:13,634:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:13,649:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:13,653:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:13,655:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:13,673:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:13,676:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:15,227:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:15,231:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:15,239:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:15,250:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:15,251:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:15,254:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:15,260:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:15,263:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:16,977:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:17,009:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:17,018:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:17,025:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:17,025:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:17,028:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:17,038:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:19,388:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:19,390:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:19,392:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:19,394:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:19,397:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:19,418:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:19,428:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:19,436:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:24,990:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:24,993:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:25,016:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:25,038:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:25,045:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:25,050:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:25,111:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:25,121:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:35,350:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:36,126:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:36,175:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:36,290:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:36,436:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:36,582:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:41,037:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:41,055:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:41,134:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:41,214:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:41,380:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:41,509:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:44,307:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:44,601:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:44,627:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:44,659:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:44,696:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:44,767:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:46,648:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:46,983:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:47,068:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:47,164:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:47,223:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:47,474:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:52,699:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:52,802:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:52,891:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:52,935:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:53,038:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:08:53,076:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:09:12,330:INFO:Calculating mean and std
2024-07-02 12:09:12,332:INFO:Creating metrics dataframe
2024-07-02 12:09:12,336:INFO:Uploading results into container
2024-07-02 12:09:12,336:INFO:Uploading model into container now
2024-07-02 12:09:12,337:INFO:_master_model_container: 68
2024-07-02 12:09:12,337:INFO:_display_container: 34
2024-07-02 12:09:12,354:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False)
2024-07-02 12:09:12,354:INFO:create_model() successfully completed......................................
2024-07-02 12:09:12,460:INFO:SubProcess create_model() end ==================================
2024-07-02 12:09:12,460:INFO:Creating metrics dataframe
2024-07-02 12:09:12,464:INFO:Initializing custom model sveRF
2024-07-02 12:09:12,464:INFO:Total runtime is 4.300783530871073 minutes
2024-07-02 12:09:12,466:INFO:SubProcess create_model() called ==================================
2024-07-02 12:09:12,484:INFO:Initializing create_model()
2024-07-02 12:09:12,484:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32818ded0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:09:12,484:INFO:Checking exceptions
2024-07-02 12:09:12,484:INFO:Importing libraries
2024-07-02 12:09:12,484:INFO:Copying training dataset
2024-07-02 12:09:13,571:INFO:Defining folds
2024-07-02 12:09:13,571:INFO:Declaring metric variables
2024-07-02 12:09:13,573:INFO:Importing untrained model
2024-07-02 12:09:13,573:INFO:Declaring custom model
2024-07-02 12:09:13,580:INFO:sveRF Imported successfully
2024-07-02 12:09:13,583:INFO:Starting cross validation
2024-07-02 12:09:13,589:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:09:27,928:INFO:Calculating mean and std
2024-07-02 12:09:27,929:INFO:Creating metrics dataframe
2024-07-02 12:09:27,930:INFO:Uploading results into container
2024-07-02 12:09:27,930:INFO:Uploading model into container now
2024-07-02 12:09:27,930:INFO:_master_model_container: 69
2024-07-02 12:09:27,931:INFO:_display_container: 34
2024-07-02 12:09:27,947:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False)
2024-07-02 12:09:27,947:INFO:create_model() successfully completed......................................
2024-07-02 12:09:28,044:INFO:SubProcess create_model() end ==================================
2024-07-02 12:09:28,045:INFO:Creating metrics dataframe
2024-07-02 12:09:28,048:INFO:Initializing custom model sveLDA
2024-07-02 12:09:28,048:INFO:Total runtime is 4.560518081982931 minutes
2024-07-02 12:09:28,050:INFO:SubProcess create_model() called ==================================
2024-07-02 12:09:28,066:INFO:Initializing create_model()
2024-07-02 12:09:28,066:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32818ded0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:09:28,066:INFO:Checking exceptions
2024-07-02 12:09:28,067:INFO:Importing libraries
2024-07-02 12:09:28,067:INFO:Copying training dataset
2024-07-02 12:09:29,157:INFO:Defining folds
2024-07-02 12:09:29,157:INFO:Declaring metric variables
2024-07-02 12:09:29,159:INFO:Importing untrained model
2024-07-02 12:09:29,159:INFO:Declaring custom model
2024-07-02 12:09:29,168:INFO:sveLDA Imported successfully
2024-07-02 12:09:29,171:INFO:Starting cross validation
2024-07-02 12:09:29,179:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:09:54,272:INFO:Calculating mean and std
2024-07-02 12:09:54,274:INFO:Creating metrics dataframe
2024-07-02 12:09:54,279:INFO:Uploading results into container
2024-07-02 12:09:54,279:INFO:Uploading model into container now
2024-07-02 12:09:54,280:INFO:_master_model_container: 70
2024-07-02 12:09:54,280:INFO:_display_container: 34
2024-07-02 12:09:54,299:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False)
2024-07-02 12:09:54,299:INFO:create_model() successfully completed......................................
2024-07-02 12:09:54,417:INFO:SubProcess create_model() end ==================================
2024-07-02 12:09:54,417:INFO:Creating metrics dataframe
2024-07-02 12:09:54,421:INFO:Initializing custom model Light Gradient Boosting Machine
2024-07-02 12:09:54,421:INFO:Total runtime is 5.000070567925771 minutes
2024-07-02 12:09:54,423:INFO:SubProcess create_model() called ==================================
2024-07-02 12:09:54,439:INFO:Initializing create_model()
2024-07-02 12:09:54,439:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                colsample_bytree=1.0, feature_fraction=0.4,
                                importance_type='split', learning_rate=0.4,
                                max_depth=-1, min_child_samples=91,
                                min_child_weight=0.001, min_split_gain=0.6,
                                n_estimators=60, n_jobs=-1, num_leaves=30,
                                objective=None, random_state=444,
                                reg_alpha=0.0001, reg_lambda=1e-07,
                                silent='warn', subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32818ded0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:09:54,439:INFO:Checking exceptions
2024-07-02 12:09:54,439:INFO:Importing libraries
2024-07-02 12:09:54,439:INFO:Copying training dataset
2024-07-02 12:09:55,547:INFO:Defining folds
2024-07-02 12:09:55,547:INFO:Declaring metric variables
2024-07-02 12:09:55,549:INFO:Importing untrained model
2024-07-02 12:09:55,549:INFO:Declaring custom model
2024-07-02 12:09:55,556:INFO:Light Gradient Boosting Machine Imported successfully
2024-07-02 12:09:55,558:INFO:Starting cross validation
2024-07-02 12:09:55,565:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:10:05,059:INFO:Calculating mean and std
2024-07-02 12:10:05,062:INFO:Creating metrics dataframe
2024-07-02 12:10:05,068:INFO:Uploading results into container
2024-07-02 12:10:05,069:INFO:Uploading model into container now
2024-07-02 12:10:05,071:INFO:_master_model_container: 71
2024-07-02 12:10:05,071:INFO:_display_container: 34
2024-07-02 12:10:05,094:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                colsample_bytree=1.0, feature_fraction=0.4,
                                importance_type='split', learning_rate=0.4,
                                max_depth=-1, min_child_samples=91,
                                min_child_weight=0.001, min_split_gain=0.6,
                                n_estimators=60, n_jobs=-1, num_leaves=30,
                                objective=None, random_state=444,
                                reg_alpha=0.0001, reg_lambda=1e-07,
                                silent='warn', subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2024-07-02 12:10:05,095:INFO:create_model() successfully completed......................................
2024-07-02 12:10:05,266:INFO:SubProcess create_model() end ==================================
2024-07-02 12:10:05,266:INFO:Creating metrics dataframe
2024-07-02 12:10:05,287:INFO:Initializing custom model Extreme Gradient Boosting
2024-07-02 12:10:05,287:INFO:Total runtime is 5.181161630153656 minutes
2024-07-02 12:10:05,290:INFO:SubProcess create_model() called ==================================
2024-07-02 12:10:05,364:INFO:Initializing create_model()
2024-07-02 12:10:05,364:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                               grow_policy='depthwise', importance_type=None,
                               interaction_constraints='', learning_rate=0.5,
                               max_bin=256, max_cat_threshold=64,
                               max_cat_to_onehot=4, max_delta_step=0,
                               max_depth=1, max_leaves=0, min_child_weight=2,
                               missing=nan, monotone_constraints='()',
                               n_estimators=50, n_jobs=-1, num_parallel_tree=1,
                               objective='binary:logistic', predictor='auto', ...))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32818ded0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:10:05,364:INFO:Checking exceptions
2024-07-02 12:10:05,364:INFO:Importing libraries
2024-07-02 12:10:05,364:INFO:Copying training dataset
2024-07-02 12:10:06,658:INFO:Defining folds
2024-07-02 12:10:06,658:INFO:Declaring metric variables
2024-07-02 12:10:06,660:INFO:Importing untrained model
2024-07-02 12:10:06,660:INFO:Declaring custom model
2024-07-02 12:10:06,667:INFO:Extreme Gradient Boosting Imported successfully
2024-07-02 12:10:06,671:INFO:Starting cross validation
2024-07-02 12:10:06,677:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:10:08,123:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 12:10:08,123:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 12:10:08,163:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 12:10:08,180:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 12:10:08,712:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 12:10:08,712:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 12:10:08,746:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 12:10:08,755:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 12:10:08,778:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 12:10:09,304:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 12:10:09,305:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 12:10:09,322:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 12:10:09,348:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 12:10:09,367:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 12:10:09,863:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 12:10:11,129:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 12:10:11,129:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 12:10:11,170:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 12:10:11,187:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 12:10:11,202:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 12:10:11,202:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 12:10:11,241:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 12:10:11,262:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 12:10:11,689:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 12:10:11,773:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:427: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(data):

2024-07-02 12:10:19,769:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 12:10:19,770:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 12:10:19,808:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 12:10:19,828:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 12:10:19,935:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 12:10:19,935:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 12:10:19,984:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 12:10:20,001:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 12:10:20,291:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 12:10:20,292:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 12:10:20,329:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 12:10:20,346:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 12:10:20,444:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 12:10:20,444:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 12:10:20,482:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 12:10:20,498:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 12:10:20,679:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 12:10:20,679:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 12:10:20,718:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 12:10:20,736:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 12:10:20,830:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 12:10:20,830:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 12:10:20,868:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 12:10:20,885:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 12:10:22,274:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 12:10:22,274:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 12:10:22,309:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 12:10:22,325:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 12:10:22,409:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 12:10:22,409:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 12:10:22,417:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 12:10:22,418:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 12:10:22,446:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 12:10:22,453:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 12:10:22,462:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 12:10:22,468:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 12:10:22,552:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:299: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(dtype):

2024-07-02 12:10:22,552:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:301: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  elif is_categorical_dtype(dtype) and enable_categorical:

2024-07-02 12:10:22,589:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:332: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if is_categorical_dtype(dtype)

2024-07-02 12:10:22,605:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/xgboost/data.py:323: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  return is_int or is_bool or is_float or is_categorical_dtype(dtype)

2024-07-02 12:10:22,711:INFO:Calculating mean and std
2024-07-02 12:10:22,714:INFO:Creating metrics dataframe
2024-07-02 12:10:22,719:INFO:Uploading results into container
2024-07-02 12:10:22,719:INFO:Uploading model into container now
2024-07-02 12:10:22,720:INFO:_master_model_container: 72
2024-07-02 12:10:22,721:INFO:_display_container: 34
2024-07-02 12:10:22,748:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                               grow_policy='depthwise', importance_type=None,
                               interaction_constraints='', learning_rate=0.5,
                               max_bin=256, max_cat_threshold=64,
                               max_cat_to_onehot=4, max_delta_step=0,
                               max_depth=1, max_leaves=0, min_child_weight=2,
                               missing=nan, monotone_constraints='()',
                               n_estimators=50, n_jobs=-1, num_parallel_tree=1,
                               objective='binary:logistic', predictor='auto', ...))],
         verbose=False)
2024-07-02 12:10:22,748:INFO:create_model() successfully completed......................................
2024-07-02 12:10:22,870:INFO:SubProcess create_model() end ==================================
2024-07-02 12:10:22,870:INFO:Creating metrics dataframe
2024-07-02 12:10:22,874:INFO:Initializing custom model Ada Boost Classifier
2024-07-02 12:10:22,874:INFO:Total runtime is 5.47428719997406 minutes
2024-07-02 12:10:22,876:INFO:SubProcess create_model() called ==================================
2024-07-02 12:10:22,891:INFO:Initializing create_model()
2024-07-02 12:10:22,891:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=444))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32818ded0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:10:22,891:INFO:Checking exceptions
2024-07-02 12:10:22,891:INFO:Importing libraries
2024-07-02 12:10:22,891:INFO:Copying training dataset
2024-07-02 12:10:23,989:INFO:Defining folds
2024-07-02 12:10:23,990:INFO:Declaring metric variables
2024-07-02 12:10:23,992:INFO:Importing untrained model
2024-07-02 12:10:23,992:INFO:Declaring custom model
2024-07-02 12:10:23,998:INFO:Ada Boost Classifier Imported successfully
2024-07-02 12:10:24,002:INFO:Starting cross validation
2024-07-02 12:10:24,048:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:10:25,420:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:10:25,836:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:10:26,389:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:10:26,946:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:10:27,383:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:10:47,829:INFO:Calculating mean and std
2024-07-02 12:10:47,830:INFO:Creating metrics dataframe
2024-07-02 12:10:47,831:INFO:Uploading results into container
2024-07-02 12:10:47,831:INFO:Uploading model into container now
2024-07-02 12:10:47,831:INFO:_master_model_container: 73
2024-07-02 12:10:47,831:INFO:_display_container: 34
2024-07-02 12:10:47,847:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=444))],
         verbose=False)
2024-07-02 12:10:47,847:INFO:create_model() successfully completed......................................
2024-07-02 12:10:47,933:INFO:SubProcess create_model() end ==================================
2024-07-02 12:10:47,933:INFO:Creating metrics dataframe
2024-07-02 12:10:47,937:INFO:Initializing custom model Random Forest Classifier
2024-07-02 12:10:47,937:INFO:Total runtime is 5.891995314757029 minutes
2024-07-02 12:10:47,938:INFO:SubProcess create_model() called ==================================
2024-07-02 12:10:47,954:INFO:Initializing create_model()
2024-07-02 12:10:47,954:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='gini', max_depth=6,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.01,
                                        min_samples_leaf=6, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=50,
                                        n_jobs=-1, oob_score=False,
                                        random_state=444, verbose=0,
                                        warm_start=False))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32818ded0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:10:47,954:INFO:Checking exceptions
2024-07-02 12:10:47,954:INFO:Importing libraries
2024-07-02 12:10:47,954:INFO:Copying training dataset
2024-07-02 12:10:49,018:INFO:Defining folds
2024-07-02 12:10:49,018:INFO:Declaring metric variables
2024-07-02 12:10:49,021:INFO:Importing untrained model
2024-07-02 12:10:49,021:INFO:Declaring custom model
2024-07-02 12:10:49,028:INFO:Random Forest Classifier Imported successfully
2024-07-02 12:10:49,030:INFO:Starting cross validation
2024-07-02 12:10:49,037:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:10:53,199:INFO:Calculating mean and std
2024-07-02 12:10:53,201:INFO:Creating metrics dataframe
2024-07-02 12:10:53,204:INFO:Uploading results into container
2024-07-02 12:10:53,205:INFO:Uploading model into container now
2024-07-02 12:10:53,206:INFO:_master_model_container: 74
2024-07-02 12:10:53,206:INFO:_display_container: 34
2024-07-02 12:10:53,224:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='gini', max_depth=6,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.01,
                                        min_samples_leaf=6, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=50,
                                        n_jobs=-1, oob_score=False,
                                        random_state=444, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-07-02 12:10:53,224:INFO:create_model() successfully completed......................................
2024-07-02 12:10:53,337:INFO:SubProcess create_model() end ==================================
2024-07-02 12:10:53,337:INFO:Creating metrics dataframe
2024-07-02 12:10:53,342:INFO:Initializing custom model Linear Discriminant Analysis
2024-07-02 12:10:53,342:INFO:Total runtime is 5.982079950968425 minutes
2024-07-02 12:10:53,344:INFO:SubProcess create_model() called ==================================
2024-07-02 12:10:53,359:INFO:Initializing create_model()
2024-07-02 12:10:53,359:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=0.6, solver='lsqr',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32818ded0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:10:53,359:INFO:Checking exceptions
2024-07-02 12:10:53,359:INFO:Importing libraries
2024-07-02 12:10:53,360:INFO:Copying training dataset
2024-07-02 12:10:54,500:INFO:Defining folds
2024-07-02 12:10:54,501:INFO:Declaring metric variables
2024-07-02 12:10:54,503:INFO:Importing untrained model
2024-07-02 12:10:54,503:INFO:Declaring custom model
2024-07-02 12:10:54,510:INFO:Linear Discriminant Analysis Imported successfully
2024-07-02 12:10:54,512:INFO:Starting cross validation
2024-07-02 12:10:54,519:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:11:26,792:INFO:Calculating mean and std
2024-07-02 12:11:26,795:INFO:Creating metrics dataframe
2024-07-02 12:11:26,800:INFO:Uploading results into container
2024-07-02 12:11:26,801:INFO:Uploading model into container now
2024-07-02 12:11:26,801:INFO:_master_model_container: 75
2024-07-02 12:11:26,801:INFO:_display_container: 34
2024-07-02 12:11:26,819:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=0.6, solver='lsqr',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False)
2024-07-02 12:11:26,820:INFO:create_model() successfully completed......................................
2024-07-02 12:11:26,947:INFO:SubProcess create_model() end ==================================
2024-07-02 12:11:26,947:INFO:Creating metrics dataframe
2024-07-02 12:11:26,952:INFO:Initializing custom model Logistic Regression
2024-07-02 12:11:26,952:INFO:Total runtime is 6.542243166764577 minutes
2024-07-02 12:11:26,953:INFO:SubProcess create_model() called ==================================
2024-07-02 12:11:26,969:INFO:Initializing create_model()
2024-07-02 12:11:26,969:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=2.396, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=444,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32818ded0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:11:26,970:INFO:Checking exceptions
2024-07-02 12:11:26,970:INFO:Importing libraries
2024-07-02 12:11:26,970:INFO:Copying training dataset
2024-07-02 12:11:28,151:INFO:Defining folds
2024-07-02 12:11:28,152:INFO:Declaring metric variables
2024-07-02 12:11:28,154:INFO:Importing untrained model
2024-07-02 12:11:28,154:INFO:Declaring custom model
2024-07-02 12:11:28,161:INFO:Logistic Regression Imported successfully
2024-07-02 12:11:28,164:INFO:Starting cross validation
2024-07-02 12:11:28,170:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:11:35,994:INFO:Calculating mean and std
2024-07-02 12:11:35,997:INFO:Creating metrics dataframe
2024-07-02 12:11:36,001:INFO:Uploading results into container
2024-07-02 12:11:36,001:INFO:Uploading model into container now
2024-07-02 12:11:36,002:INFO:_master_model_container: 76
2024-07-02 12:11:36,002:INFO:_display_container: 34
2024-07-02 12:11:36,021:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=2.396, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=444,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-07-02 12:11:36,022:INFO:create_model() successfully completed......................................
2024-07-02 12:11:36,143:INFO:SubProcess create_model() end ==================================
2024-07-02 12:11:36,143:INFO:Creating metrics dataframe
2024-07-02 12:11:36,148:INFO:Initializing custom model Extra Trees Classifier
2024-07-02 12:11:36,148:INFO:Total runtime is 6.6955203175544735 minutes
2024-07-02 12:11:36,150:INFO:SubProcess create_model() called ==================================
2024-07-02 12:11:36,168:INFO:Initializing create_model()
2024-07-02 12:11:36,168:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight='balanced', criterion='gini',
                                      max_depth=6, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.01,
                                      min_samples_leaf=6, min_samples_split=5,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=50,
                                      n_jobs=-1, oob_score=False,
                                      random_state=444, verbose=0,
                                      warm_start=False))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32818ded0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:11:36,169:INFO:Checking exceptions
2024-07-02 12:11:36,169:INFO:Importing libraries
2024-07-02 12:11:36,169:INFO:Copying training dataset
2024-07-02 12:11:37,302:INFO:Defining folds
2024-07-02 12:11:37,302:INFO:Declaring metric variables
2024-07-02 12:11:37,303:INFO:Importing untrained model
2024-07-02 12:11:37,304:INFO:Declaring custom model
2024-07-02 12:11:37,311:INFO:Extra Trees Classifier Imported successfully
2024-07-02 12:11:37,313:INFO:Starting cross validation
2024-07-02 12:11:37,320:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:11:40,908:INFO:Calculating mean and std
2024-07-02 12:11:40,910:INFO:Creating metrics dataframe
2024-07-02 12:11:40,912:INFO:Uploading results into container
2024-07-02 12:11:40,913:INFO:Uploading model into container now
2024-07-02 12:11:40,913:INFO:_master_model_container: 77
2024-07-02 12:11:40,913:INFO:_display_container: 34
2024-07-02 12:11:40,930:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight='balanced', criterion='gini',
                                      max_depth=6, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.01,
                                      min_samples_leaf=6, min_samples_split=5,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=50,
                                      n_jobs=-1, oob_score=False,
                                      random_state=444, verbose=0,
                                      warm_start=False))],
         verbose=False)
2024-07-02 12:11:40,930:INFO:create_model() successfully completed......................................
2024-07-02 12:11:41,032:INFO:SubProcess create_model() end ==================================
2024-07-02 12:11:41,032:INFO:Creating metrics dataframe
2024-07-02 12:11:41,037:INFO:Initializing custom model SVM - Linear Kernel
2024-07-02 12:11:41,038:INFO:Total runtime is 6.777006185054779 minutes
2024-07-02 12:11:41,039:INFO:SubProcess create_model() called ==================================
2024-07-02 12:11:41,056:INFO:Initializing create_model()
2024-07-02 12:11:41,056:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 SGDClassifier(alpha=1e-06, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.01,
                               fit_intercept=False, l1_ratio=0.9400000001,
                               learning_rate='optimal', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=444,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32818ded0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:11:41,056:INFO:Checking exceptions
2024-07-02 12:11:41,057:INFO:Importing libraries
2024-07-02 12:11:41,057:INFO:Copying training dataset
2024-07-02 12:11:42,267:INFO:Defining folds
2024-07-02 12:11:42,267:INFO:Declaring metric variables
2024-07-02 12:11:42,276:INFO:Importing untrained model
2024-07-02 12:11:42,276:INFO:Declaring custom model
2024-07-02 12:11:42,284:INFO:SVM - Linear Kernel Imported successfully
2024-07-02 12:11:42,288:INFO:Starting cross validation
2024-07-02 12:11:42,295:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:13:13,840:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 12:13:14,553:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 12:13:15,115:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 12:13:15,280:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 12:13:15,565:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 12:13:15,744:INFO:Calculating mean and std
2024-07-02 12:13:15,746:INFO:Creating metrics dataframe
2024-07-02 12:13:15,750:INFO:Uploading results into container
2024-07-02 12:13:15,751:INFO:Uploading model into container now
2024-07-02 12:13:15,752:INFO:_master_model_container: 78
2024-07-02 12:13:15,752:INFO:_display_container: 34
2024-07-02 12:13:15,769:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 SGDClassifier(alpha=1e-06, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.01,
                               fit_intercept=False, l1_ratio=0.9400000001,
                               learning_rate='optimal', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=444,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False)
2024-07-02 12:13:15,770:INFO:create_model() successfully completed......................................
2024-07-02 12:13:15,910:INFO:SubProcess create_model() end ==================================
2024-07-02 12:13:15,910:INFO:Creating metrics dataframe
2024-07-02 12:13:15,915:INFO:Initializing custom model sveLGBM
2024-07-02 12:13:15,915:INFO:Total runtime is 8.358296779791514 minutes
2024-07-02 12:13:15,916:INFO:SubProcess create_model() called ==================================
2024-07-02 12:13:15,932:INFO:Initializing create_model()
2024-07-02 12:13:15,932:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x32818ded0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:13:15,932:INFO:Checking exceptions
2024-07-02 12:13:15,932:INFO:Importing libraries
2024-07-02 12:13:15,932:INFO:Copying training dataset
2024-07-02 12:13:17,136:INFO:Defining folds
2024-07-02 12:13:17,137:INFO:Declaring metric variables
2024-07-02 12:13:17,139:INFO:Importing untrained model
2024-07-02 12:13:17,139:INFO:Declaring custom model
2024-07-02 12:13:17,145:INFO:sveLGBM Imported successfully
2024-07-02 12:13:17,147:INFO:Starting cross validation
2024-07-02 12:13:17,154:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:14:13,769:INFO:Calculating mean and std
2024-07-02 12:14:13,772:INFO:Creating metrics dataframe
2024-07-02 12:14:13,777:INFO:Uploading results into container
2024-07-02 12:14:13,777:INFO:Uploading model into container now
2024-07-02 12:14:13,778:INFO:_master_model_container: 79
2024-07-02 12:14:13,778:INFO:_display_container: 34
2024-07-02 12:14:13,797:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False)
2024-07-02 12:14:13,797:INFO:create_model() successfully completed......................................
2024-07-02 12:14:13,922:INFO:SubProcess create_model() end ==================================
2024-07-02 12:14:13,922:INFO:Creating metrics dataframe
2024-07-02 12:14:13,928:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/pycaret/internal/pycaret_experiment/supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-07-02 12:14:13,947:INFO:Initializing create_model()
2024-07-02 12:14:13,947:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:14:13,948:INFO:Checking exceptions
2024-07-02 12:14:13,949:INFO:Importing libraries
2024-07-02 12:14:13,949:INFO:Copying training dataset
2024-07-02 12:14:15,068:INFO:Defining folds
2024-07-02 12:14:15,068:INFO:Declaring metric variables
2024-07-02 12:14:15,068:INFO:Importing untrained model
2024-07-02 12:14:15,068:INFO:Declaring custom model
2024-07-02 12:14:15,073:INFO:sveXGB Imported successfully
2024-07-02 12:14:15,079:INFO:Cross validation set to False
2024-07-02 12:14:15,079:INFO:Fitting Model
2024-07-02 12:14:15,991:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False)
2024-07-02 12:14:15,991:INFO:create_model() successfully completed......................................
2024-07-02 12:14:16,088:INFO:_master_model_container: 79
2024-07-02 12:14:16,088:INFO:_display_container: 34
2024-07-02 12:14:16,103:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveXGB(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False)
2024-07-02 12:14:16,103:INFO:compare_models() successfully completed......................................
2024-07-02 12:31:09,304:INFO:Initializing load_model()
2024-07-02 12:31:09,304:INFO:load_model(model_name=../pycaret/saved_sveLGBM_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:31:09,363:INFO:Initializing load_model()
2024-07-02 12:31:09,364:INFO:load_model(model_name=../pycaret/saved_sveADA_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:31:09,457:INFO:Initializing load_model()
2024-07-02 12:31:09,457:INFO:load_model(model_name=../pycaret/saved_sveRF_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:31:09,613:INFO:Initializing load_model()
2024-07-02 12:31:09,613:INFO:load_model(model_name=../pycaret/saved_sveLDA_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:31:09,630:INFO:Initializing load_model()
2024-07-02 12:31:09,630:INFO:load_model(model_name=../pycaret/saved_lightgbm_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:31:09,646:INFO:Initializing load_model()
2024-07-02 12:31:09,646:INFO:load_model(model_name=../pycaret/saved_ada_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:31:09,666:INFO:Initializing load_model()
2024-07-02 12:31:09,666:INFO:load_model(model_name=../pycaret/saved_rf_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:31:09,685:INFO:Initializing load_model()
2024-07-02 12:31:09,685:INFO:load_model(model_name=../pycaret/saved_lda_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:31:09,728:INFO:Initializing load_model()
2024-07-02 12:31:09,729:INFO:load_model(model_name=../pycaret/saved_lr_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:31:09,743:INFO:Initializing load_model()
2024-07-02 12:31:09,743:INFO:load_model(model_name=../pycaret/saved_et_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:31:09,762:INFO:Initializing load_model()
2024-07-02 12:31:09,762:INFO:load_model(model_name=../pycaret/saved_svm_model, platform=None, authentication=None, verbose=True)
2024-07-02 12:31:10,065:INFO:Initializing compare_models()
2024-07-02 12:31:10,066:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, include=[Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                colsample_bytree=1.0, feature_fraction=0.4,
                                importance_type='split', learning_rate=0.4,
                                max_depth=-1, min_child_samples=91,
                                min_child_weight=0.001, min_split_gain=0.6,
                                n_estimators=60, n_jobs=-1, num_leaves=30,
                                objective=None, random_state=444,
                                reg_alpha=0.0001, reg_lambda=1e-07,
                                silent='warn', subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=444))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='gini', max_depth=6,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.01,
                                        min_samples_leaf=6, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=50,
                                        n_jobs=-1, oob_score=False,
                                        random_state=444, verbose=0,
                                        warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=0.6, solver='lsqr',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=2.396, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=444,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight='balanced', criterion='gini',
                                      max_depth=6, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.01,
                                      min_samples_leaf=6, min_samples_split=5,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=50,
                                      n_jobs=-1, oob_score=False,
                                      random_state=444, verbose=0,
                                      warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 SGDClassifier(alpha=1e-06, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.01,
                               fit_intercept=False, l1_ratio=0.9400000001,
                               learning_rate='optimal', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=444,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False)], fold=None, round=4, cross_validation=True, sort=BA, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, 'include': [Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                colsample_bytree=1.0, feature_fraction=0.4,
                                importance_type='split', learning_rate=0.4,
                                max_depth=-1, min_child_samples=91,
                                min_child_weight=0.001, min_split_gain=0.6,
                                n_estimators=60, n_jobs=-1, num_leaves=30,
                                objective=None, random_state=444,
                                reg_alpha=0.0001, reg_lambda=1e-07,
                                silent='warn', subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=444))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='gini', max_depth=6,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.01,
                                        min_samples_leaf=6, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=50,
                                        n_jobs=-1, oob_score=False,
                                        random_state=444, verbose=0,
                                        warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=0.6, solver='lsqr',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=2.396, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=444,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight='balanced', criterion='gini',
                                      max_depth=6, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.01,
                                      min_samples_leaf=6, min_samples_split=5,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=50,
                                      n_jobs=-1, oob_score=False,
                                      random_state=444, verbose=0,
                                      warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 SGDClassifier(alpha=1e-06, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.01,
                               fit_intercept=False, l1_ratio=0.9400000001,
                               learning_rate='optimal', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=444,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False)], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'BA', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-07-02 12:31:10,066:INFO:Checking exceptions
2024-07-02 12:31:10,432:INFO:Preparing display monitor
2024-07-02 12:31:10,442:INFO:Initializing custom model sveLGBM
2024-07-02 12:31:10,442:INFO:Total runtime is 5.7657559712727865e-06 minutes
2024-07-02 12:31:10,444:INFO:SubProcess create_model() called ==================================
2024-07-02 12:31:10,460:INFO:Initializing create_model()
2024-07-02 12:31:10,460:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x3284f3100>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:31:10,461:INFO:Checking exceptions
2024-07-02 12:31:10,461:INFO:Importing libraries
2024-07-02 12:31:10,461:INFO:Copying training dataset
2024-07-02 12:31:11,609:INFO:Defining folds
2024-07-02 12:31:11,609:INFO:Declaring metric variables
2024-07-02 12:31:11,612:INFO:Importing untrained model
2024-07-02 12:31:11,612:INFO:Declaring custom model
2024-07-02 12:31:11,618:INFO:sveLGBM Imported successfully
2024-07-02 12:31:11,621:INFO:Starting cross validation
2024-07-02 12:31:11,628:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:32:15,616:INFO:Calculating mean and std
2024-07-02 12:32:15,619:INFO:Creating metrics dataframe
2024-07-02 12:32:15,624:INFO:Uploading results into container
2024-07-02 12:32:15,624:INFO:Uploading model into container now
2024-07-02 12:32:15,626:INFO:_master_model_container: 80
2024-07-02 12:32:15,626:INFO:_display_container: 35
2024-07-02 12:32:15,644:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False)
2024-07-02 12:32:15,644:INFO:create_model() successfully completed......................................
2024-07-02 12:32:15,772:INFO:SubProcess create_model() end ==================================
2024-07-02 12:32:15,772:INFO:Creating metrics dataframe
2024-07-02 12:32:15,775:INFO:Initializing custom model sveADA
2024-07-02 12:32:15,775:INFO:Total runtime is 1.0888938188552857 minutes
2024-07-02 12:32:15,777:INFO:SubProcess create_model() called ==================================
2024-07-02 12:32:15,793:INFO:Initializing create_model()
2024-07-02 12:32:15,793:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x3284f3100>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:32:15,793:INFO:Checking exceptions
2024-07-02 12:32:15,793:INFO:Importing libraries
2024-07-02 12:32:15,793:INFO:Copying training dataset
2024-07-02 12:32:16,920:INFO:Defining folds
2024-07-02 12:32:16,921:INFO:Declaring metric variables
2024-07-02 12:32:16,923:INFO:Importing untrained model
2024-07-02 12:32:16,923:INFO:Declaring custom model
2024-07-02 12:32:16,930:INFO:sveADA Imported successfully
2024-07-02 12:32:16,933:INFO:Starting cross validation
2024-07-02 12:32:16,939:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:32:18,785:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:18,796:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:18,805:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:18,807:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:18,808:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:18,812:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:18,814:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:18,835:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:20,039:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:20,058:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:20,064:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:20,068:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:20,071:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:20,071:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:20,072:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:20,081:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:21,865:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:21,870:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:21,871:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:21,873:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:21,892:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:21,894:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:21,895:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:23,280:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:23,310:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:23,314:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:23,328:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:23,331:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:23,350:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:23,351:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:23,357:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:24,351:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:24,358:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:24,362:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:24,364:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:24,374:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:24,395:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:24,408:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:24,409:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:43,692:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:43,724:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:43,846:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:43,907:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:43,970:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:44,287:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:46,949:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:47,359:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:47,463:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:47,475:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:47,529:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:47,550:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:50,082:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:50,187:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:50,318:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:50,450:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:50,665:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:50,757:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:51,985:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:52,235:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:52,346:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:52,469:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:52,500:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:52,707:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:52,803:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:53,392:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:53,412:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:53,634:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:53,635:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:32:53,644:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:33:16,484:INFO:Calculating mean and std
2024-07-02 12:33:16,487:INFO:Creating metrics dataframe
2024-07-02 12:33:16,491:INFO:Uploading results into container
2024-07-02 12:33:16,492:INFO:Uploading model into container now
2024-07-02 12:33:16,492:INFO:_master_model_container: 81
2024-07-02 12:33:16,493:INFO:_display_container: 35
2024-07-02 12:33:16,510:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False)
2024-07-02 12:33:16,511:INFO:create_model() successfully completed......................................
2024-07-02 12:33:16,635:INFO:SubProcess create_model() end ==================================
2024-07-02 12:33:16,635:INFO:Creating metrics dataframe
2024-07-02 12:33:16,639:INFO:Initializing custom model sveRF
2024-07-02 12:33:16,639:INFO:Total runtime is 2.103284482161204 minutes
2024-07-02 12:33:16,641:INFO:SubProcess create_model() called ==================================
2024-07-02 12:33:16,657:INFO:Initializing create_model()
2024-07-02 12:33:16,657:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x3284f3100>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:33:16,657:INFO:Checking exceptions
2024-07-02 12:33:16,657:INFO:Importing libraries
2024-07-02 12:33:16,658:INFO:Copying training dataset
2024-07-02 12:33:17,793:INFO:Defining folds
2024-07-02 12:33:17,793:INFO:Declaring metric variables
2024-07-02 12:33:17,795:INFO:Importing untrained model
2024-07-02 12:33:17,795:INFO:Declaring custom model
2024-07-02 12:33:17,802:INFO:sveRF Imported successfully
2024-07-02 12:33:17,805:INFO:Starting cross validation
2024-07-02 12:33:17,812:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:33:32,948:INFO:Calculating mean and std
2024-07-02 12:33:32,951:INFO:Creating metrics dataframe
2024-07-02 12:33:32,956:INFO:Uploading results into container
2024-07-02 12:33:32,957:INFO:Uploading model into container now
2024-07-02 12:33:32,958:INFO:_master_model_container: 82
2024-07-02 12:33:32,958:INFO:_display_container: 35
2024-07-02 12:33:32,978:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False)
2024-07-02 12:33:32,978:INFO:create_model() successfully completed......................................
2024-07-02 12:33:33,115:INFO:SubProcess create_model() end ==================================
2024-07-02 12:33:33,115:INFO:Creating metrics dataframe
2024-07-02 12:33:33,119:INFO:Initializing custom model sveLDA
2024-07-02 12:33:33,119:INFO:Total runtime is 2.377958083152771 minutes
2024-07-02 12:33:33,121:INFO:SubProcess create_model() called ==================================
2024-07-02 12:33:33,137:INFO:Initializing create_model()
2024-07-02 12:33:33,137:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x3284f3100>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:33:33,137:INFO:Checking exceptions
2024-07-02 12:33:33,137:INFO:Importing libraries
2024-07-02 12:33:33,137:INFO:Copying training dataset
2024-07-02 12:33:34,284:INFO:Defining folds
2024-07-02 12:33:34,285:INFO:Declaring metric variables
2024-07-02 12:33:34,286:INFO:Importing untrained model
2024-07-02 12:33:34,286:INFO:Declaring custom model
2024-07-02 12:33:34,294:INFO:sveLDA Imported successfully
2024-07-02 12:33:34,297:INFO:Starting cross validation
2024-07-02 12:33:34,306:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:34:00,311:INFO:Calculating mean and std
2024-07-02 12:34:00,314:INFO:Creating metrics dataframe
2024-07-02 12:34:00,318:INFO:Uploading results into container
2024-07-02 12:34:00,319:INFO:Uploading model into container now
2024-07-02 12:34:00,319:INFO:_master_model_container: 83
2024-07-02 12:34:00,319:INFO:_display_container: 35
2024-07-02 12:34:00,338:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False)
2024-07-02 12:34:00,339:INFO:create_model() successfully completed......................................
2024-07-02 12:34:00,466:INFO:SubProcess create_model() end ==================================
2024-07-02 12:34:00,467:INFO:Creating metrics dataframe
2024-07-02 12:34:00,471:INFO:Initializing custom model Light Gradient Boosting Machine
2024-07-02 12:34:00,471:INFO:Total runtime is 2.833813786506653 minutes
2024-07-02 12:34:00,472:INFO:SubProcess create_model() called ==================================
2024-07-02 12:34:00,487:INFO:Initializing create_model()
2024-07-02 12:34:00,487:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                colsample_bytree=1.0, feature_fraction=0.4,
                                importance_type='split', learning_rate=0.4,
                                max_depth=-1, min_child_samples=91,
                                min_child_weight=0.001, min_split_gain=0.6,
                                n_estimators=60, n_jobs=-1, num_leaves=30,
                                objective=None, random_state=444,
                                reg_alpha=0.0001, reg_lambda=1e-07,
                                silent='warn', subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x3284f3100>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:34:00,488:INFO:Checking exceptions
2024-07-02 12:34:00,488:INFO:Importing libraries
2024-07-02 12:34:00,488:INFO:Copying training dataset
2024-07-02 12:34:01,615:INFO:Defining folds
2024-07-02 12:34:01,615:INFO:Declaring metric variables
2024-07-02 12:34:01,617:INFO:Importing untrained model
2024-07-02 12:34:01,617:INFO:Declaring custom model
2024-07-02 12:34:01,626:INFO:Light Gradient Boosting Machine Imported successfully
2024-07-02 12:34:01,629:INFO:Starting cross validation
2024-07-02 12:34:01,636:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:34:11,456:INFO:Calculating mean and std
2024-07-02 12:34:11,458:INFO:Creating metrics dataframe
2024-07-02 12:34:11,464:INFO:Uploading results into container
2024-07-02 12:34:11,464:INFO:Uploading model into container now
2024-07-02 12:34:11,465:INFO:_master_model_container: 84
2024-07-02 12:34:11,465:INFO:_display_container: 35
2024-07-02 12:34:11,484:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                colsample_bytree=1.0, feature_fraction=0.4,
                                importance_type='split', learning_rate=0.4,
                                max_depth=-1, min_child_samples=91,
                                min_child_weight=0.001, min_split_gain=0.6,
                                n_estimators=60, n_jobs=-1, num_leaves=30,
                                objective=None, random_state=444,
                                reg_alpha=0.0001, reg_lambda=1e-07,
                                silent='warn', subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2024-07-02 12:34:11,484:INFO:create_model() successfully completed......................................
2024-07-02 12:34:11,609:INFO:SubProcess create_model() end ==================================
2024-07-02 12:34:11,609:INFO:Creating metrics dataframe
2024-07-02 12:34:11,614:INFO:Initializing custom model Ada Boost Classifier
2024-07-02 12:34:11,614:INFO:Total runtime is 3.0195322195688883 minutes
2024-07-02 12:34:11,616:INFO:SubProcess create_model() called ==================================
2024-07-02 12:34:11,633:INFO:Initializing create_model()
2024-07-02 12:34:11,633:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=444))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x3284f3100>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:34:11,633:INFO:Checking exceptions
2024-07-02 12:34:11,634:INFO:Importing libraries
2024-07-02 12:34:11,634:INFO:Copying training dataset
2024-07-02 12:34:12,744:INFO:Defining folds
2024-07-02 12:34:12,745:INFO:Declaring metric variables
2024-07-02 12:34:12,747:INFO:Importing untrained model
2024-07-02 12:34:12,747:INFO:Declaring custom model
2024-07-02 12:34:12,754:INFO:Ada Boost Classifier Imported successfully
2024-07-02 12:34:12,756:INFO:Starting cross validation
2024-07-02 12:34:12,763:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:34:14,322:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:34:14,731:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:34:15,182:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:34:15,898:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:34:16,875:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-02 12:34:36,808:INFO:Calculating mean and std
2024-07-02 12:34:36,810:INFO:Creating metrics dataframe
2024-07-02 12:34:36,813:INFO:Uploading results into container
2024-07-02 12:34:36,813:INFO:Uploading model into container now
2024-07-02 12:34:36,814:INFO:_master_model_container: 85
2024-07-02 12:34:36,814:INFO:_display_container: 35
2024-07-02 12:34:36,831:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=444))],
         verbose=False)
2024-07-02 12:34:36,831:INFO:create_model() successfully completed......................................
2024-07-02 12:34:36,936:INFO:SubProcess create_model() end ==================================
2024-07-02 12:34:36,936:INFO:Creating metrics dataframe
2024-07-02 12:34:36,941:INFO:Initializing custom model Random Forest Classifier
2024-07-02 12:34:36,941:INFO:Total runtime is 3.441660185654958 minutes
2024-07-02 12:34:36,943:INFO:SubProcess create_model() called ==================================
2024-07-02 12:34:36,958:INFO:Initializing create_model()
2024-07-02 12:34:36,958:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='gini', max_depth=6,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.01,
                                        min_samples_leaf=6, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=50,
                                        n_jobs=-1, oob_score=False,
                                        random_state=444, verbose=0,
                                        warm_start=False))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x3284f3100>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:34:36,958:INFO:Checking exceptions
2024-07-02 12:34:36,958:INFO:Importing libraries
2024-07-02 12:34:36,958:INFO:Copying training dataset
2024-07-02 12:34:38,057:INFO:Defining folds
2024-07-02 12:34:38,057:INFO:Declaring metric variables
2024-07-02 12:34:38,059:INFO:Importing untrained model
2024-07-02 12:34:38,060:INFO:Declaring custom model
2024-07-02 12:34:38,067:INFO:Random Forest Classifier Imported successfully
2024-07-02 12:34:38,069:INFO:Starting cross validation
2024-07-02 12:34:38,076:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:34:42,921:INFO:Calculating mean and std
2024-07-02 12:34:42,923:INFO:Creating metrics dataframe
2024-07-02 12:34:42,924:INFO:Uploading results into container
2024-07-02 12:34:42,924:INFO:Uploading model into container now
2024-07-02 12:34:42,925:INFO:_master_model_container: 86
2024-07-02 12:34:42,925:INFO:_display_container: 35
2024-07-02 12:34:42,944:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='gini', max_depth=6,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.01,
                                        min_samples_leaf=6, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=50,
                                        n_jobs=-1, oob_score=False,
                                        random_state=444, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-07-02 12:34:42,944:INFO:create_model() successfully completed......................................
2024-07-02 12:34:43,036:INFO:SubProcess create_model() end ==================================
2024-07-02 12:34:43,036:INFO:Creating metrics dataframe
2024-07-02 12:34:43,040:INFO:Initializing custom model Linear Discriminant Analysis
2024-07-02 12:34:43,040:INFO:Total runtime is 3.543307832876841 minutes
2024-07-02 12:34:43,042:INFO:SubProcess create_model() called ==================================
2024-07-02 12:34:43,059:INFO:Initializing create_model()
2024-07-02 12:34:43,059:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=0.6, solver='lsqr',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x3284f3100>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:34:43,059:INFO:Checking exceptions
2024-07-02 12:34:43,059:INFO:Importing libraries
2024-07-02 12:34:43,060:INFO:Copying training dataset
2024-07-02 12:34:44,144:INFO:Defining folds
2024-07-02 12:34:44,144:INFO:Declaring metric variables
2024-07-02 12:34:44,146:INFO:Importing untrained model
2024-07-02 12:34:44,146:INFO:Declaring custom model
2024-07-02 12:34:44,153:INFO:Linear Discriminant Analysis Imported successfully
2024-07-02 12:34:44,155:INFO:Starting cross validation
2024-07-02 12:34:44,163:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:35:16,994:INFO:Calculating mean and std
2024-07-02 12:35:16,997:INFO:Creating metrics dataframe
2024-07-02 12:35:17,002:INFO:Uploading results into container
2024-07-02 12:35:17,002:INFO:Uploading model into container now
2024-07-02 12:35:17,003:INFO:_master_model_container: 87
2024-07-02 12:35:17,003:INFO:_display_container: 35
2024-07-02 12:35:17,024:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=0.6, solver='lsqr',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False)
2024-07-02 12:35:17,024:INFO:create_model() successfully completed......................................
2024-07-02 12:35:17,146:INFO:SubProcess create_model() end ==================================
2024-07-02 12:35:17,146:INFO:Creating metrics dataframe
2024-07-02 12:35:17,150:INFO:Initializing custom model Logistic Regression
2024-07-02 12:35:17,150:INFO:Total runtime is 4.111810866991679 minutes
2024-07-02 12:35:17,152:INFO:SubProcess create_model() called ==================================
2024-07-02 12:35:17,168:INFO:Initializing create_model()
2024-07-02 12:35:17,168:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=2.396, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=444,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x3284f3100>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:35:17,168:INFO:Checking exceptions
2024-07-02 12:35:17,168:INFO:Importing libraries
2024-07-02 12:35:17,168:INFO:Copying training dataset
2024-07-02 12:35:18,366:INFO:Defining folds
2024-07-02 12:35:18,366:INFO:Declaring metric variables
2024-07-02 12:35:18,368:INFO:Importing untrained model
2024-07-02 12:35:18,368:INFO:Declaring custom model
2024-07-02 12:35:18,376:INFO:Logistic Regression Imported successfully
2024-07-02 12:35:18,379:INFO:Starting cross validation
2024-07-02 12:35:18,386:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:35:25,905:INFO:Calculating mean and std
2024-07-02 12:35:25,908:INFO:Creating metrics dataframe
2024-07-02 12:35:25,912:INFO:Uploading results into container
2024-07-02 12:35:25,913:INFO:Uploading model into container now
2024-07-02 12:35:25,913:INFO:_master_model_container: 88
2024-07-02 12:35:25,913:INFO:_display_container: 35
2024-07-02 12:35:25,932:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=2.396, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=444,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-07-02 12:35:25,932:INFO:create_model() successfully completed......................................
2024-07-02 12:35:26,051:INFO:SubProcess create_model() end ==================================
2024-07-02 12:35:26,051:INFO:Creating metrics dataframe
2024-07-02 12:35:26,055:INFO:Initializing custom model Extra Trees Classifier
2024-07-02 12:35:26,055:INFO:Total runtime is 4.260224147637685 minutes
2024-07-02 12:35:26,057:INFO:SubProcess create_model() called ==================================
2024-07-02 12:35:26,072:INFO:Initializing create_model()
2024-07-02 12:35:26,073:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight='balanced', criterion='gini',
                                      max_depth=6, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.01,
                                      min_samples_leaf=6, min_samples_split=5,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=50,
                                      n_jobs=-1, oob_score=False,
                                      random_state=444, verbose=0,
                                      warm_start=False))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x3284f3100>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:35:26,073:INFO:Checking exceptions
2024-07-02 12:35:26,073:INFO:Importing libraries
2024-07-02 12:35:26,073:INFO:Copying training dataset
2024-07-02 12:35:27,214:INFO:Defining folds
2024-07-02 12:35:27,214:INFO:Declaring metric variables
2024-07-02 12:35:27,216:INFO:Importing untrained model
2024-07-02 12:35:27,216:INFO:Declaring custom model
2024-07-02 12:35:27,224:INFO:Extra Trees Classifier Imported successfully
2024-07-02 12:35:27,227:INFO:Starting cross validation
2024-07-02 12:35:27,233:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:35:31,120:INFO:Calculating mean and std
2024-07-02 12:35:31,123:INFO:Creating metrics dataframe
2024-07-02 12:35:31,126:INFO:Uploading results into container
2024-07-02 12:35:31,127:INFO:Uploading model into container now
2024-07-02 12:35:31,127:INFO:_master_model_container: 89
2024-07-02 12:35:31,127:INFO:_display_container: 35
2024-07-02 12:35:31,145:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight='balanced', criterion='gini',
                                      max_depth=6, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.01,
                                      min_samples_leaf=6, min_samples_split=5,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=50,
                                      n_jobs=-1, oob_score=False,
                                      random_state=444, verbose=0,
                                      warm_start=False))],
         verbose=False)
2024-07-02 12:35:31,145:INFO:create_model() successfully completed......................................
2024-07-02 12:35:31,269:INFO:SubProcess create_model() end ==================================
2024-07-02 12:35:31,269:INFO:Creating metrics dataframe
2024-07-02 12:35:31,274:INFO:Initializing custom model SVM - Linear Kernel
2024-07-02 12:35:31,274:INFO:Total runtime is 4.347208881378174 minutes
2024-07-02 12:35:31,276:INFO:SubProcess create_model() called ==================================
2024-07-02 12:35:31,292:INFO:Initializing create_model()
2024-07-02 12:35:31,292:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 SGDClassifier(alpha=1e-06, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.01,
                               fit_intercept=False, l1_ratio=0.9400000001,
                               learning_rate='optimal', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=444,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x3284f3100>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:35:31,292:INFO:Checking exceptions
2024-07-02 12:35:31,292:INFO:Importing libraries
2024-07-02 12:35:31,293:INFO:Copying training dataset
2024-07-02 12:35:32,433:INFO:Defining folds
2024-07-02 12:35:32,433:INFO:Declaring metric variables
2024-07-02 12:35:32,435:INFO:Importing untrained model
2024-07-02 12:35:32,435:INFO:Declaring custom model
2024-07-02 12:35:32,442:INFO:SVM - Linear Kernel Imported successfully
2024-07-02 12:35:32,445:INFO:Starting cross validation
2024-07-02 12:35:32,452:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-02 12:37:05,339:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 12:37:05,363:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 12:37:06,491:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 12:37:06,987:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 12:37:07,039:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-02 12:37:07,254:INFO:Calculating mean and std
2024-07-02 12:37:07,257:INFO:Creating metrics dataframe
2024-07-02 12:37:07,262:INFO:Uploading results into container
2024-07-02 12:37:07,262:INFO:Uploading model into container now
2024-07-02 12:37:07,263:INFO:_master_model_container: 90
2024-07-02 12:37:07,263:INFO:_display_container: 35
2024-07-02 12:37:07,288:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 SGDClassifier(alpha=1e-06, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.01,
                               fit_intercept=False, l1_ratio=0.9400000001,
                               learning_rate='optimal', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=444,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False)
2024-07-02 12:37:07,288:INFO:create_model() successfully completed......................................
2024-07-02 12:37:07,419:INFO:SubProcess create_model() end ==================================
2024-07-02 12:37:07,419:INFO:Creating metrics dataframe
2024-07-02 12:37:07,424:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/pycaret/internal/pycaret_experiment/supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-07-02 12:37:07,445:INFO:Initializing create_model()
2024-07-02 12:37:07,445:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x32dd330d0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-02 12:37:07,445:INFO:Checking exceptions
2024-07-02 12:37:07,446:INFO:Importing libraries
2024-07-02 12:37:07,446:INFO:Copying training dataset
2024-07-02 12:37:08,636:INFO:Defining folds
2024-07-02 12:37:08,636:INFO:Declaring metric variables
2024-07-02 12:37:08,636:INFO:Importing untrained model
2024-07-02 12:37:08,636:INFO:Declaring custom model
2024-07-02 12:37:08,641:INFO:sveLGBM Imported successfully
2024-07-02 12:37:08,647:INFO:Cross validation set to False
2024-07-02 12:37:08,647:INFO:Fitting Model
2024-07-02 12:37:22,397:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False)
2024-07-02 12:37:22,397:INFO:create_model() successfully completed......................................
2024-07-02 12:37:22,497:INFO:_master_model_container: 90
2024-07-02 12:37:22,497:INFO:_display_container: 35
2024-07-02 12:37:22,512:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False)
2024-07-02 12:37:22,512:INFO:compare_models() successfully completed......................................
2024-07-05 17:03:57,448:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-05 17:03:57,448:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-05 17:03:57,448:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-05 17:03:57,448:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-05 17:03:57,684:INFO:PyCaret ClassificationExperiment
2024-07-05 17:03:57,684:INFO:Logging name: clf-default-name
2024-07-05 17:03:57,684:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-07-05 17:03:57,684:INFO:version 3.3.2
2024-07-05 17:03:57,684:INFO:Initializing setup()
2024-07-05 17:03:57,684:INFO:self.USI: b2d1
2024-07-05 17:03:57,684:INFO:self._variable_keys: {'gpu_n_jobs_param', 'fold_generator', 'fold_shuffle_param', 'fold_groups_param', 'target_param', 'idx', 'USI', '_ml_usecase', 'exp_name_log', 'y_test', 'gpu_param', 'fix_imbalance', 'n_jobs_param', 'data', 'X', 'y', 'pipeline', 'exp_id', 'y_train', 'html_param', 'memory', 'logging_param', 'log_plots_param', 'is_multiclass', 'seed', '_available_plots', 'X_train', 'X_test'}
2024-07-05 17:03:57,684:INFO:Checking environment
2024-07-05 17:03:57,684:INFO:python_version: 3.10.13
2024-07-05 17:03:57,684:INFO:python_build: ('main', 'Dec 23 2023 15:35:25')
2024-07-05 17:03:57,684:INFO:machine: arm64
2024-07-05 17:03:57,684:INFO:platform: macOS-14.4.1-arm64-arm-64bit
2024-07-05 17:03:57,684:INFO:Memory: svmem(total=17179869184, available=5401378816, percent=68.6, used=6847430656, free=668925952, active=4738400256, inactive=4698554368, wired=2109030400)
2024-07-05 17:03:57,684:INFO:Physical Core: 8
2024-07-05 17:03:57,684:INFO:Logical Core: 8
2024-07-05 17:03:57,684:INFO:Checking libraries
2024-07-05 17:03:57,684:INFO:System:
2024-07-05 17:03:57,684:INFO:    python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:35:25) [Clang 16.0.6 ]
2024-07-05 17:03:57,684:INFO:executable: /Users/maurizio/miniconda3/bin/python
2024-07-05 17:03:57,684:INFO:   machine: macOS-14.4.1-arm64-arm-64bit
2024-07-05 17:03:57,684:INFO:PyCaret required dependencies:
2024-07-05 17:03:57,685:INFO:                 pip: 23.3.2
2024-07-05 17:03:57,685:INFO:          setuptools: 69.0.3
2024-07-05 17:03:57,685:INFO:             pycaret: 3.3.2
2024-07-05 17:03:57,685:INFO:             IPython: 8.20.0
2024-07-05 17:03:57,685:INFO:          ipywidgets: 8.1.1
2024-07-05 17:03:57,685:INFO:                tqdm: 4.66.1
2024-07-05 17:03:57,685:INFO:               numpy: 1.26.4
2024-07-05 17:03:57,685:INFO:              pandas: 2.1.3
2024-07-05 17:03:57,685:INFO:              jinja2: 3.1.3
2024-07-05 17:03:57,685:INFO:               scipy: 1.10.1
2024-07-05 17:03:57,685:INFO:              joblib: 1.3.2
2024-07-05 17:03:57,685:INFO:             sklearn: 1.4.2
2024-07-05 17:03:57,685:INFO:                pyod: 1.1.3
2024-07-05 17:03:57,685:INFO:            imblearn: 0.12.2
2024-07-05 17:03:57,685:INFO:   category_encoders: 2.6.3
2024-07-05 17:03:57,685:INFO:            lightgbm: 3.3.5
2024-07-05 17:03:57,685:INFO:               numba: 0.59.1
2024-07-05 17:03:57,685:INFO:            requests: 2.31.0
2024-07-05 17:03:57,685:INFO:          matplotlib: 3.6.0
2024-07-05 17:03:57,685:INFO:          scikitplot: 0.3.7
2024-07-05 17:03:57,685:INFO:         yellowbrick: 1.5
2024-07-05 17:03:57,685:INFO:              plotly: 5.18.0
2024-07-05 17:03:57,685:INFO:    plotly-resampler: Not installed
2024-07-05 17:03:57,685:INFO:             kaleido: 0.2.1
2024-07-05 17:03:57,685:INFO:           schemdraw: 0.15
2024-07-05 17:03:57,685:INFO:         statsmodels: 0.14.1
2024-07-05 17:03:57,685:INFO:              sktime: 0.26.0
2024-07-05 17:03:57,685:INFO:               tbats: 1.1.3
2024-07-05 17:03:57,685:INFO:            pmdarima: 2.0.4
2024-07-05 17:03:57,685:INFO:              psutil: 5.9.4
2024-07-05 17:03:57,685:INFO:          markupsafe: 2.1.3
2024-07-05 17:03:57,685:INFO:             pickle5: Not installed
2024-07-05 17:03:57,685:INFO:         cloudpickle: 2.2.1
2024-07-05 17:03:57,685:INFO:         deprecation: 2.1.0
2024-07-05 17:03:57,685:INFO:              xxhash: 3.4.1
2024-07-05 17:03:57,685:INFO:           wurlitzer: 3.1.0
2024-07-05 17:03:57,685:INFO:PyCaret optional dependencies:
2024-07-05 17:03:57,690:INFO:                shap: Not installed
2024-07-05 17:03:57,690:INFO:           interpret: Not installed
2024-07-05 17:03:57,690:INFO:                umap: Not installed
2024-07-05 17:03:57,691:INFO:     ydata_profiling: Not installed
2024-07-05 17:03:57,691:INFO:  explainerdashboard: Not installed
2024-07-05 17:03:57,691:INFO:             autoviz: Not installed
2024-07-05 17:03:57,691:INFO:           fairlearn: Not installed
2024-07-05 17:03:57,691:INFO:          deepchecks: Not installed
2024-07-05 17:03:57,691:INFO:             xgboost: 1.7.1
2024-07-05 17:03:57,691:INFO:            catboost: Not installed
2024-07-05 17:03:57,691:INFO:              kmodes: Not installed
2024-07-05 17:03:57,691:INFO:             mlxtend: Not installed
2024-07-05 17:03:57,691:INFO:       statsforecast: Not installed
2024-07-05 17:03:57,691:INFO:        tune_sklearn: Not installed
2024-07-05 17:03:57,691:INFO:                 ray: Not installed
2024-07-05 17:03:57,691:INFO:            hyperopt: Not installed
2024-07-05 17:03:57,691:INFO:              optuna: 3.6.1
2024-07-05 17:03:57,691:INFO:               skopt: Not installed
2024-07-05 17:03:57,691:INFO:              mlflow: Not installed
2024-07-05 17:03:57,691:INFO:              gradio: Not installed
2024-07-05 17:03:57,691:INFO:             fastapi: Not installed
2024-07-05 17:03:57,691:INFO:             uvicorn: Not installed
2024-07-05 17:03:57,691:INFO:              m2cgen: Not installed
2024-07-05 17:03:57,691:INFO:           evidently: Not installed
2024-07-05 17:03:57,691:INFO:               fugue: Not installed
2024-07-05 17:03:57,691:INFO:           streamlit: Not installed
2024-07-05 17:03:57,691:INFO:             prophet: Not installed
2024-07-05 17:03:57,691:INFO:None
2024-07-05 17:03:57,691:INFO:Set up data.
2024-07-05 17:03:58,506:INFO:Set up folding strategy.
2024-07-05 17:03:58,506:INFO:Set up train/test split.
2024-07-05 17:03:59,200:INFO:Set up index.
2024-07-05 17:03:59,224:INFO:Assigning column types.
2024-07-05 17:04:00,073:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-07-05 17:04:00,091:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-07-05 17:04:00,093:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-05 17:04:00,107:INFO:Soft dependency imported: xgboost: 1.7.1
2024-07-05 17:04:00,108:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-05 17:04:00,126:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-07-05 17:04:00,126:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-05 17:04:00,137:INFO:Soft dependency imported: xgboost: 1.7.1
2024-07-05 17:04:00,138:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-05 17:04:00,138:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-07-05 17:04:00,157:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-05 17:04:00,169:INFO:Soft dependency imported: xgboost: 1.7.1
2024-07-05 17:04:00,170:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-05 17:04:00,189:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-05 17:04:00,199:INFO:Soft dependency imported: xgboost: 1.7.1
2024-07-05 17:04:00,200:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-05 17:04:00,200:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-07-05 17:04:00,229:INFO:Soft dependency imported: xgboost: 1.7.1
2024-07-05 17:04:00,230:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-05 17:04:00,258:INFO:Soft dependency imported: xgboost: 1.7.1
2024-07-05 17:04:00,259:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-05 17:04:00,261:INFO:Preparing preprocessing pipeline...
2024-07-05 17:04:00,358:INFO:Set up simple imputation.
2024-07-05 17:04:00,496:INFO:Set up column name cleaning.
2024-07-05 17:04:02,944:INFO:Finished creating preprocessing pipeline.
2024-07-05 17:04:02,958:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-07-05 17:04:02,958:INFO:Creating final display dataframe.
2024-07-05 17:04:09,049:INFO:Setup _display_container:                     Description             Value
0                    Session id               444
1                        Target             label
2                   Target type            Binary
3           Original data shape     (17236, 3457)
4        Transformed data shape     (17236, 3457)
5   Transformed train set shape     (12065, 3457)
6    Transformed test set shape      (5171, 3457)
7              Numeric features              3456
8      Rows with missing values             78.1%
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                 5
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              b2d1
2024-07-05 17:04:09,085:INFO:Soft dependency imported: xgboost: 1.7.1
2024-07-05 17:04:09,086:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-05 17:04:09,120:INFO:Soft dependency imported: xgboost: 1.7.1
2024-07-05 17:04:09,121:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-05 17:04:09,122:INFO:setup() successfully completed in 11.44s...............
2024-07-05 17:04:18,723:INFO:Initializing create_model()
2024-07-05 17:04:18,724:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, estimator=sveET(n_jobs=-1, n_voters=-1, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-05 17:04:18,724:INFO:Checking exceptions
2024-07-05 17:04:18,775:INFO:Importing libraries
2024-07-05 17:04:18,775:INFO:Copying training dataset
2024-07-05 17:04:19,938:INFO:Defining folds
2024-07-05 17:04:19,939:INFO:Declaring metric variables
2024-07-05 17:04:19,941:INFO:Importing untrained model
2024-07-05 17:04:19,941:INFO:Declaring custom model
2024-07-05 17:04:19,943:INFO:sveET Imported successfully
2024-07-05 17:04:19,946:INFO:Starting cross validation
2024-07-05 17:04:19,952:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-05 17:04:30,717:INFO:Initializing create_model()
2024-07-05 17:04:30,717:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, estimator=sveET(n_jobs=-1, n_voters=-1, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-05 17:04:30,718:INFO:Checking exceptions
2024-07-05 17:04:30,738:INFO:Importing libraries
2024-07-05 17:04:30,738:INFO:Copying training dataset
2024-07-05 17:04:31,952:INFO:Defining folds
2024-07-05 17:04:31,952:INFO:Declaring metric variables
2024-07-05 17:04:31,954:INFO:Importing untrained model
2024-07-05 17:04:31,955:INFO:Declaring custom model
2024-07-05 17:04:31,956:INFO:sveET Imported successfully
2024-07-05 17:04:31,959:INFO:Starting cross validation
2024-07-05 17:04:31,965:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-05 17:04:52,676:INFO:Calculating mean and std
2024-07-05 17:04:52,679:INFO:Creating metrics dataframe
2024-07-05 17:04:52,686:INFO:Finalizing model
2024-07-05 17:04:58,785:INFO:Uploading results into container
2024-07-05 17:04:58,787:INFO:Uploading model into container now
2024-07-05 17:04:58,793:INFO:_master_model_container: 1
2024-07-05 17:04:58,793:INFO:_display_container: 2
2024-07-05 17:04:58,793:INFO:sveET(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft')
2024-07-05 17:04:58,793:INFO:create_model() successfully completed......................................
2024-07-05 17:04:58,893:INFO:Initializing tune_model()
2024-07-05 17:04:58,893:INFO:tune_model(estimator=sveET(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft'), fold=None, round=4, n_iter=10, custom_grid={'n_voters': [4, 6, 8, 10, 12, 14, 16, 18, 20]}, optimize=BA, custom_scorer=None, search_library=scikit-learn, search_algorithm=grid, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=True, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>)
2024-07-05 17:04:58,893:INFO:Checking exceptions
2024-07-05 17:04:59,570:INFO:Copying training dataset
2024-07-05 17:05:00,320:INFO:Checking base model
2024-07-05 17:05:00,320:INFO:A custom model has been passed
2024-07-05 17:05:00,320:INFO:Base model : sveET
2024-07-05 17:05:00,322:INFO:Declaring metric variables
2024-07-05 17:05:00,323:INFO:Defining Hyperparameters
2024-07-05 17:05:00,396:INFO:custom_grid: {'actual_estimator__n_voters': [4, 6, 8, 10, 12, 14, 16, 18, 20]}
2024-07-05 17:05:00,396:INFO:Tuning with n_jobs=-1
2024-07-05 17:05:00,396:INFO:Initializing GridSearchCV
2024-07-05 17:07:44,986:INFO:best_params: {'actual_estimator__n_voters': 12}
2024-07-05 17:07:44,988:INFO:Hyperparameter search completed
2024-07-05 17:07:44,988:INFO:SubProcess create_model() called ==================================
2024-07-05 17:07:44,989:INFO:Initializing create_model()
2024-07-05 17:07:44,989:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, estimator=sveET(n_jobs=-1, n_voters=13, split_seed=42, verbose=False, voting='soft'), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x30f5fefb0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_voters': 12})
2024-07-05 17:07:44,989:INFO:Checking exceptions
2024-07-05 17:07:44,989:INFO:Importing libraries
2024-07-05 17:07:44,990:INFO:Copying training dataset
2024-07-05 17:07:46,243:INFO:Defining folds
2024-07-05 17:07:46,243:INFO:Declaring metric variables
2024-07-05 17:07:46,246:INFO:Importing untrained model
2024-07-05 17:07:46,246:INFO:Declaring custom model
2024-07-05 17:07:46,248:INFO:sveET Imported successfully
2024-07-05 17:07:46,251:INFO:Starting cross validation
2024-07-05 17:07:46,257:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-05 17:08:04,206:INFO:Calculating mean and std
2024-07-05 17:08:04,209:INFO:Creating metrics dataframe
2024-07-05 17:08:04,217:INFO:Finalizing model
2024-07-05 17:08:10,812:INFO:Uploading results into container
2024-07-05 17:08:10,814:INFO:Uploading model into container now
2024-07-05 17:08:10,814:INFO:_master_model_container: 2
2024-07-05 17:08:10,814:INFO:_display_container: 3
2024-07-05 17:08:10,815:INFO:sveET(n_jobs=-1, n_voters=12, split_seed=42, verbose=False, voting='soft')
2024-07-05 17:08:10,815:INFO:create_model() successfully completed......................................
2024-07-05 17:08:10,905:INFO:SubProcess create_model() end ==================================
2024-07-05 17:08:10,906:INFO:choose_better activated
2024-07-05 17:08:10,907:INFO:SubProcess create_model() called ==================================
2024-07-05 17:08:10,907:INFO:Initializing create_model()
2024-07-05 17:08:10,908:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, estimator=sveET(n_jobs=-1, n_voters=12, split_seed=42, verbose=False, voting='soft'), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-05 17:08:10,908:INFO:Checking exceptions
2024-07-05 17:08:10,908:INFO:Importing libraries
2024-07-05 17:08:10,909:INFO:Copying training dataset
2024-07-05 17:08:12,020:INFO:Defining folds
2024-07-05 17:08:12,020:INFO:Declaring metric variables
2024-07-05 17:08:12,020:INFO:Importing untrained model
2024-07-05 17:08:12,020:INFO:Declaring custom model
2024-07-05 17:08:12,020:INFO:sveET Imported successfully
2024-07-05 17:08:12,020:INFO:Starting cross validation
2024-07-05 17:08:12,027:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-05 17:08:29,808:INFO:Calculating mean and std
2024-07-05 17:08:29,809:INFO:Creating metrics dataframe
2024-07-05 17:08:29,812:INFO:Finalizing model
2024-07-05 17:08:36,091:INFO:Uploading results into container
2024-07-05 17:08:36,092:INFO:Uploading model into container now
2024-07-05 17:08:36,093:INFO:_master_model_container: 3
2024-07-05 17:08:36,093:INFO:_display_container: 4
2024-07-05 17:08:36,093:INFO:sveET(n_jobs=-1, n_voters=12, split_seed=42, verbose=False, voting='soft')
2024-07-05 17:08:36,093:INFO:create_model() successfully completed......................................
2024-07-05 17:08:36,184:INFO:SubProcess create_model() end ==================================
2024-07-05 17:08:36,185:INFO:sveET(n_jobs=-1, n_voters=12, split_seed=42, verbose=False, voting='soft') result for BA is 0.8599
2024-07-05 17:08:36,185:INFO:sveET(n_jobs=-1, n_voters=12, split_seed=42, verbose=False, voting='soft') result for BA is 0.8611
2024-07-05 17:08:36,185:INFO:sveET(n_jobs=-1, n_voters=12, split_seed=42, verbose=False, voting='soft') is best model
2024-07-05 17:08:36,185:INFO:choose_better completed
2024-07-05 17:08:36,189:INFO:_master_model_container: 3
2024-07-05 17:08:36,189:INFO:_display_container: 3
2024-07-05 17:08:36,189:INFO:sveET(n_jobs=-1, n_voters=12, split_seed=42, verbose=False, voting='soft')
2024-07-05 17:08:36,189:INFO:tune_model() successfully completed......................................
2024-07-05 17:08:36,292:INFO:Initializing save_model()
2024-07-05 17:08:36,292:INFO:save_model(model=sveET(n_jobs=-1, n_voters=12, split_seed=42, verbose=False, voting='soft'), model_name=../pycaret/saved_sveET_model, prep_pipe_=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-07-05 17:08:36,292:INFO:Adding model into prep_pipe
2024-07-05 17:08:36,602:INFO:../pycaret/saved_sveET_model.pkl saved in current working directory
2024-07-05 17:08:36,617:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tissue',
                                             'Orthologs count',
                                             'Driver_genes_MUT (all)',
                                             'Driver_g...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveET(n_jobs=-1, n_voters=12, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False)
2024-07-05 17:08:36,617:INFO:save_model() successfully completed......................................
2024-07-05 17:16:03,768:INFO:Initializing load_model()
2024-07-05 17:16:03,769:INFO:load_model(model_name=../pycaret/saved_sveLGBM_model, platform=None, authentication=None, verbose=True)
2024-07-05 17:16:03,827:INFO:Initializing load_model()
2024-07-05 17:16:03,827:INFO:load_model(model_name=../pycaret/saved_sveADA_model, platform=None, authentication=None, verbose=True)
2024-07-05 17:16:03,920:INFO:Initializing load_model()
2024-07-05 17:16:03,920:INFO:load_model(model_name=../pycaret/saved_sveRF_model, platform=None, authentication=None, verbose=True)
2024-07-05 17:16:04,067:INFO:Initializing load_model()
2024-07-05 17:16:04,067:INFO:load_model(model_name=../pycaret/saved_sveLDA_model, platform=None, authentication=None, verbose=True)
2024-07-05 17:16:04,085:INFO:Initializing load_model()
2024-07-05 17:16:04,085:INFO:load_model(model_name=../pycaret/saved_sveETlightgbm_model, platform=None, authentication=None, verbose=True)
2024-07-05 17:16:33,357:INFO:Initializing load_model()
2024-07-05 17:16:33,357:INFO:load_model(model_name=../pycaret/saved_sveLGBM_model, platform=None, authentication=None, verbose=True)
2024-07-05 17:16:33,400:INFO:Initializing load_model()
2024-07-05 17:16:33,400:INFO:load_model(model_name=../pycaret/saved_sveADA_model, platform=None, authentication=None, verbose=True)
2024-07-05 17:16:33,493:INFO:Initializing load_model()
2024-07-05 17:16:33,494:INFO:load_model(model_name=../pycaret/saved_sveRF_model, platform=None, authentication=None, verbose=True)
2024-07-05 17:16:33,646:INFO:Initializing load_model()
2024-07-05 17:16:33,646:INFO:load_model(model_name=../pycaret/saved_sveLDA_model, platform=None, authentication=None, verbose=True)
2024-07-05 17:16:33,662:INFO:Initializing load_model()
2024-07-05 17:16:33,662:INFO:load_model(model_name=../pycaret/saved_sveET_model, platform=None, authentication=None, verbose=True)
2024-07-05 17:16:33,859:INFO:Initializing load_model()
2024-07-05 17:16:33,859:INFO:load_model(model_name=../pycaret/saved_lightgbm_model, platform=None, authentication=None, verbose=True)
2024-07-05 17:16:33,876:INFO:Initializing load_model()
2024-07-05 17:16:33,876:INFO:load_model(model_name=../pycaret/saved_ada_model, platform=None, authentication=None, verbose=True)
2024-07-05 17:16:33,895:INFO:Initializing load_model()
2024-07-05 17:16:33,895:INFO:load_model(model_name=../pycaret/saved_rf_model, platform=None, authentication=None, verbose=True)
2024-07-05 17:16:33,914:INFO:Initializing load_model()
2024-07-05 17:16:33,914:INFO:load_model(model_name=../pycaret/saved_lda_model, platform=None, authentication=None, verbose=True)
2024-07-05 17:16:33,959:INFO:Initializing load_model()
2024-07-05 17:16:33,960:INFO:load_model(model_name=../pycaret/saved_lr_model, platform=None, authentication=None, verbose=True)
2024-07-05 17:16:33,973:INFO:Initializing load_model()
2024-07-05 17:16:33,973:INFO:load_model(model_name=../pycaret/saved_et_model, platform=None, authentication=None, verbose=True)
2024-07-05 17:16:33,993:INFO:Initializing load_model()
2024-07-05 17:16:33,993:INFO:load_model(model_name=../pycaret/saved_svm_model, platform=None, authentication=None, verbose=True)
2024-07-05 17:16:34,342:INFO:Initializing compare_models()
2024-07-05 17:16:34,342:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, include=[Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveET(n_jobs=-1, n_voters=12, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                colsample_bytree=1.0, feature_fraction=0.4,
                                importance_type='split', learning_rate=0.4,
                                max_depth=-1, min_child_samples=91,
                                min_child_weight=0.001, min_split_gain=0.6,
                                n_estimators=60, n_jobs=-1, num_leaves=30,
                                objective=None, random_state=444,
                                reg_alpha=0.0001, reg_lambda=1e-07,
                                silent='warn', subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=444))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='gini', max_depth=6,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.01,
                                        min_samples_leaf=6, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=50,
                                        n_jobs=-1, oob_score=False,
                                        random_state=444, verbose=0,
                                        warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=0.6, solver='lsqr',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=2.396, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=444,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight='balanced', criterion='gini',
                                      max_depth=6, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.01,
                                      min_samples_leaf=6, min_samples_split=5,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=50,
                                      n_jobs=-1, oob_score=False,
                                      random_state=444, verbose=0,
                                      warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 SGDClassifier(alpha=1e-06, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.01,
                               fit_intercept=False, l1_ratio=0.9400000001,
                               learning_rate='optimal', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=444,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False)], fold=None, round=4, cross_validation=True, sort=BA, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, 'include': [Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveET(n_jobs=-1, n_voters=12, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                colsample_bytree=1.0, feature_fraction=0.4,
                                importance_type='split', learning_rate=0.4,
                                max_depth=-1, min_child_samples=91,
                                min_child_weight=0.001, min_split_gain=0.6,
                                n_estimators=60, n_jobs=-1, num_leaves=30,
                                objective=None, random_state=444,
                                reg_alpha=0.0001, reg_lambda=1e-07,
                                silent='warn', subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=444))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='gini', max_depth=6,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.01,
                                        min_samples_leaf=6, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=50,
                                        n_jobs=-1, oob_score=False,
                                        random_state=444, verbose=0,
                                        warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=0.6, solver='lsqr',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=2.396, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=444,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight='balanced', criterion='gini',
                                      max_depth=6, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.01,
                                      min_samples_leaf=6, min_samples_split=5,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=50,
                                      n_jobs=-1, oob_score=False,
                                      random_state=444, verbose=0,
                                      warm_start=False))],
         verbose=False), Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 SGDClassifier(alpha=1e-06, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.01,
                               fit_intercept=False, l1_ratio=0.9400000001,
                               learning_rate='optimal', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=444,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False)], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'BA', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-07-05 17:16:34,342:INFO:Checking exceptions
2024-07-05 17:16:34,837:INFO:Preparing display monitor
2024-07-05 17:16:34,848:INFO:Initializing custom model sveLGBM
2024-07-05 17:16:34,848:INFO:Total runtime is 5.95251719156901e-06 minutes
2024-07-05 17:16:34,850:INFO:SubProcess create_model() called ==================================
2024-07-05 17:16:34,868:INFO:Initializing create_model()
2024-07-05 17:16:34,868:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31cc8c040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-05 17:16:34,868:INFO:Checking exceptions
2024-07-05 17:16:34,868:INFO:Importing libraries
2024-07-05 17:16:34,869:INFO:Copying training dataset
2024-07-05 17:16:36,048:INFO:Defining folds
2024-07-05 17:16:36,048:INFO:Declaring metric variables
2024-07-05 17:16:36,050:INFO:Importing untrained model
2024-07-05 17:16:36,050:INFO:Declaring custom model
2024-07-05 17:16:36,057:INFO:sveLGBM Imported successfully
2024-07-05 17:16:36,060:INFO:Starting cross validation
2024-07-05 17:16:36,067:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-05 17:17:49,111:INFO:Calculating mean and std
2024-07-05 17:17:49,114:INFO:Creating metrics dataframe
2024-07-05 17:17:49,119:INFO:Uploading results into container
2024-07-05 17:17:49,120:INFO:Uploading model into container now
2024-07-05 17:17:49,121:INFO:_master_model_container: 4
2024-07-05 17:17:49,121:INFO:_display_container: 4
2024-07-05 17:17:49,139:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False)
2024-07-05 17:17:49,139:INFO:create_model() successfully completed......................................
2024-07-05 17:17:49,254:INFO:SubProcess create_model() end ==================================
2024-07-05 17:17:49,255:INFO:Creating metrics dataframe
2024-07-05 17:17:49,260:INFO:Initializing custom model sveADA
2024-07-05 17:17:49,260:INFO:Total runtime is 1.2401924014091492 minutes
2024-07-05 17:17:49,261:INFO:SubProcess create_model() called ==================================
2024-07-05 17:17:49,277:INFO:Initializing create_model()
2024-07-05 17:17:49,277:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31cc8c040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-05 17:17:49,277:INFO:Checking exceptions
2024-07-05 17:17:49,277:INFO:Importing libraries
2024-07-05 17:17:49,277:INFO:Copying training dataset
2024-07-05 17:17:50,447:INFO:Defining folds
2024-07-05 17:17:50,447:INFO:Declaring metric variables
2024-07-05 17:17:50,449:INFO:Importing untrained model
2024-07-05 17:17:50,449:INFO:Declaring custom model
2024-07-05 17:17:50,456:INFO:sveADA Imported successfully
2024-07-05 17:17:50,459:INFO:Starting cross validation
2024-07-05 17:17:50,518:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-05 17:17:52,446:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:52,473:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:52,477:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:52,479:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:52,481:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:52,486:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:52,488:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:52,508:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:54,018:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:54,021:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:54,030:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:54,034:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:54,046:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:54,048:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:54,049:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:54,060:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:56,243:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:56,245:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:56,321:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:56,322:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:56,330:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:56,361:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:56,414:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:56,418:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:56,930:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:56,943:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:56,971:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:56,973:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:56,975:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:56,979:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:56,986:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:17:57,013:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:07,060:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:07,085:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:07,093:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:07,098:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:07,133:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:07,142:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:07,155:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:07,217:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:17,453:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:17,755:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:17,976:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:18,528:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:18,579:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:18,692:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:21,640:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:22,206:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:22,246:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:22,322:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:22,329:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:22,426:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:25,957:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:25,997:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:26,108:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:26,305:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:26,324:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:26,603:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:26,610:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:26,674:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:27,046:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:27,215:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:27,292:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:27,393:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:36,470:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:36,533:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:36,571:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:37,146:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:37,380:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:37,423:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:18:56,252:INFO:Calculating mean and std
2024-07-05 17:18:56,254:INFO:Creating metrics dataframe
2024-07-05 17:18:56,257:INFO:Uploading results into container
2024-07-05 17:18:56,258:INFO:Uploading model into container now
2024-07-05 17:18:56,258:INFO:_master_model_container: 5
2024-07-05 17:18:56,259:INFO:_display_container: 4
2024-07-05 17:18:56,276:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveADA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False)
2024-07-05 17:18:56,277:INFO:create_model() successfully completed......................................
2024-07-05 17:18:56,389:INFO:SubProcess create_model() end ==================================
2024-07-05 17:18:56,390:INFO:Creating metrics dataframe
2024-07-05 17:18:56,394:INFO:Initializing custom model sveRF
2024-07-05 17:18:56,394:INFO:Total runtime is 2.359095048904419 minutes
2024-07-05 17:18:56,395:INFO:SubProcess create_model() called ==================================
2024-07-05 17:18:56,411:INFO:Initializing create_model()
2024-07-05 17:18:56,411:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31cc8c040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-05 17:18:56,411:INFO:Checking exceptions
2024-07-05 17:18:56,412:INFO:Importing libraries
2024-07-05 17:18:56,412:INFO:Copying training dataset
2024-07-05 17:18:57,638:INFO:Defining folds
2024-07-05 17:18:57,638:INFO:Declaring metric variables
2024-07-05 17:18:57,640:INFO:Importing untrained model
2024-07-05 17:18:57,640:INFO:Declaring custom model
2024-07-05 17:18:57,647:INFO:sveRF Imported successfully
2024-07-05 17:18:57,650:INFO:Starting cross validation
2024-07-05 17:18:57,656:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-05 17:19:12,702:INFO:Calculating mean and std
2024-07-05 17:19:12,704:INFO:Creating metrics dataframe
2024-07-05 17:19:12,708:INFO:Uploading results into container
2024-07-05 17:19:12,708:INFO:Uploading model into container now
2024-07-05 17:19:12,709:INFO:_master_model_container: 6
2024-07-05 17:19:12,709:INFO:_display_container: 4
2024-07-05 17:19:12,728:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveRF(n_jobs=-1, n_voters=10, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False)
2024-07-05 17:19:12,728:INFO:create_model() successfully completed......................................
2024-07-05 17:19:12,853:INFO:SubProcess create_model() end ==================================
2024-07-05 17:19:12,853:INFO:Creating metrics dataframe
2024-07-05 17:19:12,857:INFO:Initializing custom model sveLDA
2024-07-05 17:19:12,857:INFO:Total runtime is 2.6334854841232302 minutes
2024-07-05 17:19:12,859:INFO:SubProcess create_model() called ==================================
2024-07-05 17:19:12,874:INFO:Initializing create_model()
2024-07-05 17:19:12,874:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31cc8c040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-05 17:19:12,875:INFO:Checking exceptions
2024-07-05 17:19:12,875:INFO:Importing libraries
2024-07-05 17:19:12,875:INFO:Copying training dataset
2024-07-05 17:19:14,008:INFO:Defining folds
2024-07-05 17:19:14,008:INFO:Declaring metric variables
2024-07-05 17:19:14,010:INFO:Importing untrained model
2024-07-05 17:19:14,010:INFO:Declaring custom model
2024-07-05 17:19:14,018:INFO:sveLDA Imported successfully
2024-07-05 17:19:14,021:INFO:Starting cross validation
2024-07-05 17:19:14,028:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-05 17:19:39,402:INFO:Calculating mean and std
2024-07-05 17:19:39,407:INFO:Creating metrics dataframe
2024-07-05 17:19:39,411:INFO:Uploading results into container
2024-07-05 17:19:39,412:INFO:Uploading model into container now
2024-07-05 17:19:39,412:INFO:_master_model_container: 7
2024-07-05 17:19:39,412:INFO:_display_container: 4
2024-07-05 17:19:39,432:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLDA(n_jobs=-1, n_voters=14, split_seed=42, verbose=False,
                        voting='soft'))],
         verbose=False)
2024-07-05 17:19:39,432:INFO:create_model() successfully completed......................................
2024-07-05 17:19:39,538:INFO:SubProcess create_model() end ==================================
2024-07-05 17:19:39,539:INFO:Creating metrics dataframe
2024-07-05 17:19:39,542:INFO:Initializing custom model sveET
2024-07-05 17:19:39,543:INFO:Total runtime is 3.078240052858989 minutes
2024-07-05 17:19:39,544:INFO:SubProcess create_model() called ==================================
2024-07-05 17:19:39,560:INFO:Initializing create_model()
2024-07-05 17:19:39,560:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveET(n_jobs=-1, n_voters=12, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31cc8c040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-05 17:19:39,560:INFO:Checking exceptions
2024-07-05 17:19:39,560:INFO:Importing libraries
2024-07-05 17:19:39,560:INFO:Copying training dataset
2024-07-05 17:19:40,658:INFO:Defining folds
2024-07-05 17:19:40,658:INFO:Declaring metric variables
2024-07-05 17:19:40,660:INFO:Importing untrained model
2024-07-05 17:19:40,660:INFO:Declaring custom model
2024-07-05 17:19:40,667:INFO:sveET Imported successfully
2024-07-05 17:19:40,669:INFO:Starting cross validation
2024-07-05 17:19:40,676:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-05 17:19:58,618:INFO:Calculating mean and std
2024-07-05 17:19:58,621:INFO:Creating metrics dataframe
2024-07-05 17:19:58,624:INFO:Uploading results into container
2024-07-05 17:19:58,624:INFO:Uploading model into container now
2024-07-05 17:19:58,625:INFO:_master_model_container: 8
2024-07-05 17:19:58,625:INFO:_display_container: 4
2024-07-05 17:19:58,643:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveET(n_jobs=-1, n_voters=12, split_seed=42, verbose=False,
                       voting='soft'))],
         verbose=False)
2024-07-05 17:19:58,643:INFO:create_model() successfully completed......................................
2024-07-05 17:19:58,762:INFO:SubProcess create_model() end ==================================
2024-07-05 17:19:58,762:INFO:Creating metrics dataframe
2024-07-05 17:19:58,766:INFO:Initializing custom model Light Gradient Boosting Machine
2024-07-05 17:19:58,766:INFO:Total runtime is 3.398636134465536 minutes
2024-07-05 17:19:58,768:INFO:SubProcess create_model() called ==================================
2024-07-05 17:19:58,787:INFO:Initializing create_model()
2024-07-05 17:19:58,788:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                colsample_bytree=1.0, feature_fraction=0.4,
                                importance_type='split', learning_rate=0.4,
                                max_depth=-1, min_child_samples=91,
                                min_child_weight=0.001, min_split_gain=0.6,
                                n_estimators=60, n_jobs=-1, num_leaves=30,
                                objective=None, random_state=444,
                                reg_alpha=0.0001, reg_lambda=1e-07,
                                silent='warn', subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31cc8c040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-05 17:19:58,788:INFO:Checking exceptions
2024-07-05 17:19:58,788:INFO:Importing libraries
2024-07-05 17:19:58,788:INFO:Copying training dataset
2024-07-05 17:19:59,888:INFO:Defining folds
2024-07-05 17:19:59,889:INFO:Declaring metric variables
2024-07-05 17:19:59,891:INFO:Importing untrained model
2024-07-05 17:19:59,891:INFO:Declaring custom model
2024-07-05 17:19:59,898:INFO:Light Gradient Boosting Machine Imported successfully
2024-07-05 17:19:59,900:INFO:Starting cross validation
2024-07-05 17:19:59,907:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-05 17:20:05,201:INFO:[LightGBM] [Warning] bagging_freq is set=0, subsample_freq=0 will be ignored. Current value: bagging_freq=0
2024-07-05 17:20:05,202:INFO:[LightGBM] [Warning] feature_fraction is set=0.4, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.4
2024-07-05 17:20:05,202:INFO:[LightGBM] [Warning] bagging_fraction is set=0.5, subsample=1.0 will be ignored. Current value: bagging_fraction=0.5
2024-07-05 17:20:05,311:INFO:[LightGBM] [Warning] bagging_freq is set=0, subsample_freq=0 will be ignored. Current value: bagging_freq=0
2024-07-05 17:20:05,311:INFO:[LightGBM] [Warning] feature_fraction is set=0.4, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.4
2024-07-05 17:20:05,312:INFO:[LightGBM] [Warning] bagging_fraction is set=0.5, subsample=1.0 will be ignored. Current value: bagging_fraction=0.5
2024-07-05 17:20:10,773:INFO:Calculating mean and std
2024-07-05 17:20:10,776:INFO:Creating metrics dataframe
2024-07-05 17:20:10,781:INFO:Uploading results into container
2024-07-05 17:20:10,781:INFO:Uploading model into container now
2024-07-05 17:20:10,782:INFO:_master_model_container: 9
2024-07-05 17:20:10,782:INFO:_display_container: 4
2024-07-05 17:20:10,801:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                colsample_bytree=1.0, feature_fraction=0.4,
                                importance_type='split', learning_rate=0.4,
                                max_depth=-1, min_child_samples=91,
                                min_child_weight=0.001, min_split_gain=0.6,
                                n_estimators=60, n_jobs=-1, num_leaves=30,
                                objective=None, random_state=444,
                                reg_alpha=0.0001, reg_lambda=1e-07,
                                silent='warn', subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2024-07-05 17:20:10,801:INFO:create_model() successfully completed......................................
2024-07-05 17:20:10,922:INFO:SubProcess create_model() end ==================================
2024-07-05 17:20:10,922:INFO:Creating metrics dataframe
2024-07-05 17:20:10,926:INFO:Initializing custom model Ada Boost Classifier
2024-07-05 17:20:10,926:INFO:Total runtime is 3.601301936308543 minutes
2024-07-05 17:20:10,928:INFO:SubProcess create_model() called ==================================
2024-07-05 17:20:10,945:INFO:Initializing create_model()
2024-07-05 17:20:10,945:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=444))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31cc8c040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-05 17:20:10,945:INFO:Checking exceptions
2024-07-05 17:20:10,945:INFO:Importing libraries
2024-07-05 17:20:10,945:INFO:Copying training dataset
2024-07-05 17:20:12,156:INFO:Defining folds
2024-07-05 17:20:12,156:INFO:Declaring metric variables
2024-07-05 17:20:12,158:INFO:Importing untrained model
2024-07-05 17:20:12,158:INFO:Declaring custom model
2024-07-05 17:20:12,165:INFO:Ada Boost Classifier Imported successfully
2024-07-05 17:20:12,168:INFO:Starting cross validation
2024-07-05 17:20:12,175:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-05 17:20:13,528:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:20:14,211:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:20:14,866:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:20:15,303:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:20:15,964:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-05 17:20:36,128:INFO:Calculating mean and std
2024-07-05 17:20:36,131:INFO:Creating metrics dataframe
2024-07-05 17:20:36,135:INFO:Uploading results into container
2024-07-05 17:20:36,135:INFO:Uploading model into container now
2024-07-05 17:20:36,136:INFO:_master_model_container: 10
2024-07-05 17:20:36,136:INFO:_display_container: 4
2024-07-05 17:20:36,155:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=444))],
         verbose=False)
2024-07-05 17:20:36,155:INFO:create_model() successfully completed......................................
2024-07-05 17:20:36,287:INFO:SubProcess create_model() end ==================================
2024-07-05 17:20:36,287:INFO:Creating metrics dataframe
2024-07-05 17:20:36,292:INFO:Initializing custom model Random Forest Classifier
2024-07-05 17:20:36,292:INFO:Total runtime is 4.024068633715312 minutes
2024-07-05 17:20:36,294:INFO:SubProcess create_model() called ==================================
2024-07-05 17:20:36,312:INFO:Initializing create_model()
2024-07-05 17:20:36,312:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='gini', max_depth=6,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.01,
                                        min_samples_leaf=6, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=50,
                                        n_jobs=-1, oob_score=False,
                                        random_state=444, verbose=0,
                                        warm_start=False))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31cc8c040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-05 17:20:36,312:INFO:Checking exceptions
2024-07-05 17:20:36,312:INFO:Importing libraries
2024-07-05 17:20:36,312:INFO:Copying training dataset
2024-07-05 17:20:37,470:INFO:Defining folds
2024-07-05 17:20:37,470:INFO:Declaring metric variables
2024-07-05 17:20:37,472:INFO:Importing untrained model
2024-07-05 17:20:37,473:INFO:Declaring custom model
2024-07-05 17:20:37,480:INFO:Random Forest Classifier Imported successfully
2024-07-05 17:20:37,483:INFO:Starting cross validation
2024-07-05 17:20:37,490:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-05 17:20:42,071:INFO:Calculating mean and std
2024-07-05 17:20:42,073:INFO:Creating metrics dataframe
2024-07-05 17:20:42,077:INFO:Uploading results into container
2024-07-05 17:20:42,078:INFO:Uploading model into container now
2024-07-05 17:20:42,078:INFO:_master_model_container: 11
2024-07-05 17:20:42,078:INFO:_display_container: 4
2024-07-05 17:20:42,097:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,
                                        class_weight='balanced',
                                        criterion='gini', max_depth=6,
                                        max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.01,
                                        min_samples_leaf=6, min_samples_split=5,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=50,
                                        n_jobs=-1, oob_score=False,
                                        random_state=444, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-07-05 17:20:42,097:INFO:create_model() successfully completed......................................
2024-07-05 17:20:42,211:INFO:SubProcess create_model() end ==================================
2024-07-05 17:20:42,211:INFO:Creating metrics dataframe
2024-07-05 17:20:42,215:INFO:Initializing custom model Linear Discriminant Analysis
2024-07-05 17:20:42,215:INFO:Total runtime is 4.122786434491475 minutes
2024-07-05 17:20:42,217:INFO:SubProcess create_model() called ==================================
2024-07-05 17:20:42,234:INFO:Initializing create_model()
2024-07-05 17:20:42,234:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=0.6, solver='lsqr',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31cc8c040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-05 17:20:42,234:INFO:Checking exceptions
2024-07-05 17:20:42,234:INFO:Importing libraries
2024-07-05 17:20:42,234:INFO:Copying training dataset
2024-07-05 17:20:43,415:INFO:Defining folds
2024-07-05 17:20:43,415:INFO:Declaring metric variables
2024-07-05 17:20:43,417:INFO:Importing untrained model
2024-07-05 17:20:43,417:INFO:Declaring custom model
2024-07-05 17:20:43,425:INFO:Linear Discriminant Analysis Imported successfully
2024-07-05 17:20:43,427:INFO:Starting cross validation
2024-07-05 17:20:43,434:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-05 17:21:15,992:INFO:Calculating mean and std
2024-07-05 17:21:15,995:INFO:Creating metrics dataframe
2024-07-05 17:21:16,000:INFO:Uploading results into container
2024-07-05 17:21:16,001:INFO:Uploading model into container now
2024-07-05 17:21:16,002:INFO:_master_model_container: 12
2024-07-05 17:21:16,002:INFO:_display_container: 4
2024-07-05 17:21:16,019:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=0.6, solver='lsqr',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False)
2024-07-05 17:21:16,019:INFO:create_model() successfully completed......................................
2024-07-05 17:21:16,147:INFO:SubProcess create_model() end ==================================
2024-07-05 17:21:16,147:INFO:Creating metrics dataframe
2024-07-05 17:21:16,151:INFO:Initializing custom model Logistic Regression
2024-07-05 17:21:16,152:INFO:Total runtime is 4.688390620549519 minutes
2024-07-05 17:21:16,153:INFO:SubProcess create_model() called ==================================
2024-07-05 17:21:16,169:INFO:Initializing create_model()
2024-07-05 17:21:16,169:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=2.396, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=444,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31cc8c040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-05 17:21:16,169:INFO:Checking exceptions
2024-07-05 17:21:16,169:INFO:Importing libraries
2024-07-05 17:21:16,169:INFO:Copying training dataset
2024-07-05 17:21:17,340:INFO:Defining folds
2024-07-05 17:21:17,340:INFO:Declaring metric variables
2024-07-05 17:21:17,343:INFO:Importing untrained model
2024-07-05 17:21:17,343:INFO:Declaring custom model
2024-07-05 17:21:17,352:INFO:Logistic Regression Imported successfully
2024-07-05 17:21:17,355:INFO:Starting cross validation
2024-07-05 17:21:17,362:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-05 17:21:25,218:INFO:Calculating mean and std
2024-07-05 17:21:25,220:INFO:Creating metrics dataframe
2024-07-05 17:21:25,224:INFO:Uploading results into container
2024-07-05 17:21:25,224:INFO:Uploading model into container now
2024-07-05 17:21:25,225:INFO:_master_model_container: 13
2024-07-05 17:21:25,225:INFO:_display_container: 4
2024-07-05 17:21:25,244:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=2.396, class_weight='balanced',
                                    dual=False, fit_intercept=True,
                                    intercept_scaling=1, l1_ratio=None,
                                    max_iter=1000, multi_class='auto',
                                    n_jobs=None, penalty='l2', random_state=444,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2024-07-05 17:21:25,244:INFO:create_model() successfully completed......................................
2024-07-05 17:21:25,351:INFO:SubProcess create_model() end ==================================
2024-07-05 17:21:25,351:INFO:Creating metrics dataframe
2024-07-05 17:21:25,356:INFO:Initializing custom model Extra Trees Classifier
2024-07-05 17:21:25,356:INFO:Total runtime is 4.841799449920654 minutes
2024-07-05 17:21:25,358:INFO:SubProcess create_model() called ==================================
2024-07-05 17:21:25,374:INFO:Initializing create_model()
2024-07-05 17:21:25,374:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight='balanced', criterion='gini',
                                      max_depth=6, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.01,
                                      min_samples_leaf=6, min_samples_split=5,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=50,
                                      n_jobs=-1, oob_score=False,
                                      random_state=444, verbose=0,
                                      warm_start=False))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31cc8c040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-05 17:21:25,374:INFO:Checking exceptions
2024-07-05 17:21:25,374:INFO:Importing libraries
2024-07-05 17:21:25,374:INFO:Copying training dataset
2024-07-05 17:21:26,469:INFO:Defining folds
2024-07-05 17:21:26,469:INFO:Declaring metric variables
2024-07-05 17:21:26,471:INFO:Importing untrained model
2024-07-05 17:21:26,471:INFO:Declaring custom model
2024-07-05 17:21:26,478:INFO:Extra Trees Classifier Imported successfully
2024-07-05 17:21:26,481:INFO:Starting cross validation
2024-07-05 17:21:26,488:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-05 17:21:30,280:INFO:Calculating mean and std
2024-07-05 17:21:30,282:INFO:Creating metrics dataframe
2024-07-05 17:21:30,284:INFO:Uploading results into container
2024-07-05 17:21:30,285:INFO:Uploading model into container now
2024-07-05 17:21:30,285:INFO:_master_model_container: 14
2024-07-05 17:21:30,285:INFO:_display_container: 4
2024-07-05 17:21:30,302:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight='balanced', criterion='gini',
                                      max_depth=6, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.01,
                                      min_samples_leaf=6, min_samples_split=5,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=50,
                                      n_jobs=-1, oob_score=False,
                                      random_state=444, verbose=0,
                                      warm_start=False))],
         verbose=False)
2024-07-05 17:21:30,302:INFO:create_model() successfully completed......................................
2024-07-05 17:21:30,400:INFO:SubProcess create_model() end ==================================
2024-07-05 17:21:30,400:INFO:Creating metrics dataframe
2024-07-05 17:21:30,404:INFO:Initializing custom model SVM - Linear Kernel
2024-07-05 17:21:30,404:INFO:Total runtime is 4.925939901669819 minutes
2024-07-05 17:21:30,406:INFO:SubProcess create_model() called ==================================
2024-07-05 17:21:30,423:INFO:Initializing create_model()
2024-07-05 17:21:30,423:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 SGDClassifier(alpha=1e-06, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.01,
                               fit_intercept=False, l1_ratio=0.9400000001,
                               learning_rate='optimal', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=444,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x31cc8c040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-05 17:21:30,423:INFO:Checking exceptions
2024-07-05 17:21:30,423:INFO:Importing libraries
2024-07-05 17:21:30,423:INFO:Copying training dataset
2024-07-05 17:21:31,567:INFO:Defining folds
2024-07-05 17:21:31,567:INFO:Declaring metric variables
2024-07-05 17:21:31,569:INFO:Importing untrained model
2024-07-05 17:21:31,569:INFO:Declaring custom model
2024-07-05 17:21:31,576:INFO:SVM - Linear Kernel Imported successfully
2024-07-05 17:21:31,579:INFO:Starting cross validation
2024-07-05 17:21:31,586:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-07-05 17:23:05,626:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-05 17:23:05,755:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-05 17:23:05,818:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-05 17:23:06,098:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-05 17:23:07,133:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py:723: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.
  warnings.warn(

2024-07-05 17:23:07,273:INFO:Calculating mean and std
2024-07-05 17:23:07,276:INFO:Creating metrics dataframe
2024-07-05 17:23:07,280:INFO:Uploading results into container
2024-07-05 17:23:07,280:INFO:Uploading model into container now
2024-07-05 17:23:07,281:INFO:_master_model_container: 15
2024-07-05 17:23:07,281:INFO:_display_container: 4
2024-07-05 17:23:07,299:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                 SGDClassifier(alpha=1e-06, average=False, class_weight=None,
                               early_stopping=False, epsilon=0.1, eta0=0.01,
                               fit_intercept=False, l1_ratio=0.9400000001,
                               learning_rate='optimal', loss='hinge',
                               max_iter=1000, n_iter_no_change=5, n_jobs=-1,
                               penalty='l1', power_t=0.5, random_state=444,
                               shuffle=True, tol=0.001, validation_fraction=0.1,
                               verbose=0, warm_start=False))],
         verbose=False)
2024-07-05 17:23:07,299:INFO:create_model() successfully completed......................................
2024-07-05 17:23:07,424:INFO:SubProcess create_model() end ==================================
2024-07-05 17:23:07,424:INFO:Creating metrics dataframe
2024-07-05 17:23:07,429:WARNING:/Users/maurizio/miniconda3/lib/python3.10/site-packages/pycaret/internal/pycaret_experiment/supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-07-05 17:23:07,449:INFO:Initializing create_model()
2024-07-05 17:23:07,449:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x17c35b1c0>, estimator=Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-05 17:23:07,449:INFO:Checking exceptions
2024-07-05 17:23:07,450:INFO:Importing libraries
2024-07-05 17:23:07,450:INFO:Copying training dataset
2024-07-05 17:23:08,625:INFO:Defining folds
2024-07-05 17:23:08,625:INFO:Declaring metric variables
2024-07-05 17:23:08,625:INFO:Importing untrained model
2024-07-05 17:23:08,625:INFO:Declaring custom model
2024-07-05 17:23:08,630:INFO:sveLGBM Imported successfully
2024-07-05 17:23:08,636:INFO:Cross validation set to False
2024-07-05 17:23:08,636:INFO:Fitting Model
2024-07-05 17:23:23,559:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False)
2024-07-05 17:23:23,560:INFO:create_model() successfully completed......................................
2024-07-05 17:23:23,660:INFO:_master_model_container: 15
2024-07-05 17:23:23,660:INFO:_display_container: 4
2024-07-05 17:23:23,677:INFO:Pipeline(memory=FastMemory(location=/var/folders/gl/gkr8rrn52y9cvb9jc59pvjyw0000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Gene length', 'Transcripts count',
                                             'GC content', 'GTEX_kidney',
                                             'Gene-Disease association',
                                             'OncoDB_expression', 'HPA_kidney',
                                             'GO-MF', 'GO-BP', 'GO-CC',
                                             'BIOGRID', 'KEGG', 'REACTOME',
                                             'UCSC_TFBS', 'UP_tis...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 sveLGBM(n_jobs=-1, n_voters=16, split_seed=42, verbose=False,
                         voting='soft'))],
         verbose=False)
2024-07-05 17:23:23,677:INFO:compare_models() successfully completed......................................
